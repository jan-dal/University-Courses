#!/usr/bin/python3

# Defaults defined here.
keyFileDefault = 'RSAkey'
plaintextFileDefault = 'plain.txt'
ciphertextFileDefault = 'cipher.txt'

__doc__ = (
"""Generate a ciphertext for the Bleichenbacher attack.

Optional parameters:
    – name of a file with a private RSA key (default: """ + keyFileDefault + """),
    – name of a file with a plaintext (default: """ + plaintextFileDefault + """).
    – name of a file with a ciphertext (default: """ + ciphertextFileDefault + """).
""" )

import rsa.rsa as rsa
import rsa.pkcs15pad as pad
from rsa.pkcs15pad import PaddingError, ErrorCode
from sys import argv

if len(argv) > 4:
    raise SystemExit('{}: at most 3 arguments should be given'.format(argv[0]))
if len(argv) > 1:
    if argv[1] == '-h':
        print(__doc__)
        exit()
    else:
        keyFile = argv[1]
else:
    keyFile = keyFileDefault
plaintextFile = argv[2] if len(argv) > 2 else plaintextFileDefault
ciphertextFile = argv[3] if len(argv) > 3 else ciphertextFileDefault

def encrypt(plaintext, key):
    return rsa.enc(rsa.to_int(pad.enc(plaintext, key.keyBytes)), key)

def decrypt(ciphertext, key):
    return pad.dec(rsa.from_int((rsa.dec(ciphertext, key)), key.keyBytes))

key = rsa.read(keyFile)
with open(plaintextFile) as pf:
    plaintext = pf.readline().strip().encode()
ciphertext = encrypt(plaintext, key)
with open(ciphertextFile, 'w') as cf:
    print(ciphertext, file=cf)
print(key)
print('Ciphertext:', ciphertext)
print('Plaintext:', decrypt(ciphertext, key))
print('Ciphertext written to', ciphertextFile)
