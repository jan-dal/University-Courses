
zadanie4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000010c  00000180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         0000063c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cc0  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000149c  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  000014dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00002072  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e0       	ldi	r30, 0x0C	; 12
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  8e:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <spi_init>:
#define MOSI PB3
#define SCK PB5

void spi_init()
{
  DDRB |= _BV(LA) | _BV(OE) | _BV(MOSI) | _BV(SCK); // Ustaw pin LA, OE, MOSI, SCK na output
  96:	84 b1       	in	r24, 0x04	; 4
  98:	8e 62       	ori	r24, 0x2E	; 46
  9a:	84 b9       	out	0x04, r24	; 4
  PORTB &= ~_BV(OE);
  9c:	2a 98       	cbi	0x05, 2	; 5

  SPCR |= _BV(SPR0); // 1MHz
  9e:	8c b5       	in	r24, 0x2c	; 44
  a0:	81 60       	ori	r24, 0x01	; 1
  a2:	8c bd       	out	0x2c, r24	; 44
  SPCR |= _BV(MSTR); // Ustaw master jako SPI
  a4:	8c b5       	in	r24, 0x2c	; 44
  a6:	80 61       	ori	r24, 0x10	; 16
  a8:	8c bd       	out	0x2c, r24	; 44
  SPCR |= _BV(SPE); // Włącz SPI
  aa:	8c b5       	in	r24, 0x2c	; 44
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	8c bd       	out	0x2c, r24	; 44
  b0:	08 95       	ret

000000b2 <send_number>:

}

void send_number(uint8_t number)
{
  PORTB |= _BV(LA); // Rozpocznij transmisję
  b2:	29 9a       	sbi	0x05, 1	; 5
  SPDR = number;
  b4:	8e bd       	out	0x2e, r24	; 46
  loop_until_bit_is_set(SPSR, SPIF);  // Przesyłanie bajtu
  b6:	0d b4       	in	r0, 0x2d	; 45
  b8:	07 fe       	sbrs	r0, 7
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <send_number+0x4>
  PORTB &= ~_BV(LA); // zakończ transmisję
  bc:	29 98       	cbi	0x05, 1	; 5
  be:	08 95       	ret

000000c0 <main>:
#define MOSI PB3
#define SCK PB5

void spi_init()
{
  DDRB |= _BV(LA) | _BV(OE) | _BV(MOSI) | _BV(SCK); // Ustaw pin LA, OE, MOSI, SCK na output
  c0:	84 b1       	in	r24, 0x04	; 4
  c2:	8e 62       	ori	r24, 0x2E	; 46
  c4:	84 b9       	out	0x04, r24	; 4
  PORTB &= ~_BV(OE);
  c6:	2a 98       	cbi	0x05, 2	; 5

  SPCR |= _BV(SPR0); // 1MHz
  c8:	8c b5       	in	r24, 0x2c	; 44
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	8c bd       	out	0x2c, r24	; 44
  SPCR |= _BV(MSTR); // Ustaw master jako SPI
  ce:	8c b5       	in	r24, 0x2c	; 44
  d0:	80 61       	ori	r24, 0x10	; 16
  d2:	8c bd       	out	0x2c, r24	; 44
  SPCR |= _BV(SPE); // Włącz SPI
  d4:	8c b5       	in	r24, 0x2c	; 44
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	8c bd       	out	0x2c, r24	; 44
  da:	e0 e0       	ldi	r30, 0x00	; 0
  dc:	f1 e0       	ldi	r31, 0x01	; 1
{
  spi_init();

  while(1){
    for(uint8_t i = 0; i < 10; i++){
      send_number(numbers[i]);
  de:	81 91       	ld	r24, Z+

}

void send_number(uint8_t number)
{
  PORTB |= _BV(LA); // Rozpocznij transmisję
  e0:	29 9a       	sbi	0x05, 1	; 5
  SPDR = number;
  e2:	8e bd       	out	0x2e, r24	; 46
  loop_until_bit_is_set(SPSR, SPIF);  // Przesyłanie bajtu
  e4:	0d b4       	in	r0, 0x2d	; 45
  e6:	07 fe       	sbrs	r0, 7
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <main+0x24>
  PORTB &= ~_BV(LA); // zakończ transmisję
  ea:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	83 ed       	ldi	r24, 0xD3	; 211
  f0:	90 e3       	ldi	r25, 0x30	; 48
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x32>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x3c>
  fc:	00 00       	nop
int main()
{
  spi_init();

  while(1){
    for(uint8_t i = 0; i < 10; i++){
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	ea 30       	cpi	r30, 0x0A	; 10
 102:	f2 07       	cpc	r31, r18
 104:	61 f7       	brne	.-40     	; 0xde <main+0x1e>
 106:	e9 cf       	rjmp	.-46     	; 0xda <main+0x1a>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
