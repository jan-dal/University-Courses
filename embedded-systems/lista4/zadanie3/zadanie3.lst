
zadanie3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  000006f6  0000076a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000bb8  00000000  00000000  0000078c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000dc6  00000000  00000000  00001344  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000210a  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000211c  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  0000215c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00002750  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00002cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00002d0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ef       	ldi	r30, 0xF6	; 246
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 1d 01 	call	0x23a	; 0x23a <main>
  8e:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <counter2_init>:
  // COM2B = 11   -- inverting mode
  // WGM2  = 011  -- fast PWM top=0xFF
  // CS2   = 001  -- prescaler 1
  // częstotliwość 16e6/256 = 62.5 kHz

  TCCR2A = _BV(COM2A1) | _BV(COM2A0) | _BV(WGM21) | _BV(WGM20);
  96:	83 ec       	ldi	r24, 0xC3	; 195
  98:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
  TCCR2B = _BV(CS20);
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
  // ustaw pin OC2 (PB3) jako wyjście
  DDRB |= _BV(PB3);
  a2:	23 9a       	sbi	0x04, 3	; 4
  a4:	08 95       	ret

000000a6 <counter1_init>:
  // COM1A/B = 11 -- inverting mode
  // WGM1  = 0101 -- fast PWM top=0x00FF
  // CS1   = 001  -- prescaler 1
  // częstotliwość 16e6/256 = 62.5 kHz

  TCCR1A = _BV(COM1A1) | _BV(COM1A0) | _BV(COM1B1) | _BV(COM1B0) | _BV(WGM10);
  a6:	81 ef       	ldi	r24, 0xF1	; 241
  a8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  TCCR1B = _BV(WGM12) | _BV(CS10);
  ac:	89 e0       	ldi	r24, 0x09	; 9
  ae:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  // ustaw pin OC1A (PB1) jako wyjście
  DDRB |= _BV(PB1) | _BV(PB2);
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	86 60       	ori	r24, 0x06	; 6
  b6:	84 b9       	out	0x04, r24	; 4
  b8:	08 95       	ret

000000ba <delay>:
      //_delay_ms(50);
    }
  }
}

void delay(uint8_t time){
  ba:	07 c0       	rjmp	.+14     	; 0xca <delay+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	ef e9       	ldi	r30, 0x9F	; 159
  be:	ff e0       	ldi	r31, 0x0F	; 15
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <delay+0x6>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <delay+0xc>
  c6:	00 00       	nop
  c8:	81 50       	subi	r24, 0x01	; 1
  while(time-- > 0){
  ca:	81 11       	cpse	r24, r1
  cc:	f7 cf       	rjmp	.-18     	; 0xbc <delay+0x2>
  ce:	08 95       	ret

000000d0 <random>:
    _delay_ms(1);
  };
}
// Funkcja random z implementacji klasy java.util.Random
uint8_t random(uint64_t seed){
  return (((uint64_t)seed * 0x5DEECE66DL) + 0xBL);
  d0:	8d e6       	ldi	r24, 0x6D	; 109
  d2:	28 9f       	mul	r18, r24
  d4:	80 2d       	mov	r24, r0
  d6:	11 24       	eor	r1, r1
}
  d8:	85 5f       	subi	r24, 0xF5	; 245
  da:	08 95       	ret

000000dc <toggle>:

void toggle(uint8_t leds, uint8_t partial, uint8_t brightnes_scaling, uint8_t value){
  dc:	cf 92       	push	r12
  de:	df 92       	push	r13
  e0:	ef 92       	push	r14
  e2:	ff 92       	push	r15
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	58 2f       	mov	r21, r24
  ee:	c6 2f       	mov	r28, r22
  f0:	d4 2f       	mov	r29, r20
  f2:	08 2f       	mov	r16, r24
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	a8 ee       	ldi	r26, 0xE8	; 232
  f8:	b3 e0       	ldi	r27, 0x03	; 3
  fa:	0e 94 5f 03 	call	0x6be	; 0x6be <__umulhisi3>
  fe:	6b 01       	movw	r12, r22
 100:	7c 01       	movw	r14, r24

  // Flaga skalowania jasności
  uint8_t scaling = 255;
  for(uint8_t j=0; j < 3; j++){
    if(((leds >> j) & 0x1) == 1){
 102:	50 ff       	sbrs	r21, 0
 104:	1d c0       	rjmp	.+58     	; 0x140 <toggle+0x64>
      scaling = (partial == 0) ? brightnes_scaling : 255;
 106:	cc 23       	and	r28, r28
 108:	09 f4       	brne	.+2      	; 0x10c <toggle+0x30>
 10a:	52 c0       	rjmp	.+164    	; 0x1b0 <toggle+0xd4>
 10c:	6f ef       	ldi	r22, 0xFF	; 255
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	90 e0       	ldi	r25, 0x00	; 0
      partial = (partial == 0) ? 1 : 0;
 114:	21 e0       	ldi	r18, 0x01	; 1
 116:	c1 11       	cpse	r28, r1
 118:	20 e0       	ldi	r18, 0x00	; 0
 11a:	c2 2f       	mov	r28, r18
      uint8_t cover = (((uint32_t)value * 1000 * scaling) >> 8 ) / 1000;
      switch(j){
        case 0:
          OCR1A = cover;
 11c:	a7 01       	movw	r20, r14
 11e:	96 01       	movw	r18, r12
 120:	0e 94 2d 03 	call	0x65a	; 0x65a <__mulsi3>
 124:	67 2f       	mov	r22, r23
 126:	78 2f       	mov	r23, r24
 128:	89 2f       	mov	r24, r25
 12a:	99 27       	eor	r25, r25
 12c:	28 ee       	ldi	r18, 0xE8	; 232
 12e:	33 e0       	ldi	r19, 0x03	; 3
 130:	40 e0       	ldi	r20, 0x00	; 0
 132:	50 e0       	ldi	r21, 0x00	; 0
 134:	0e 94 3d 03 	call	0x67a	; 0x67a <__udivmodsi4>
 138:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 13c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
void toggle(uint8_t leds, uint8_t partial, uint8_t brightnes_scaling, uint8_t value){

  // Flaga skalowania jasności
  uint8_t scaling = 255;
  for(uint8_t j=0; j < 3; j++){
    if(((leds >> j) & 0x1) == 1){
 140:	01 ff       	sbrs	r16, 1
 142:	17 c0       	rjmp	.+46     	; 0x172 <toggle+0x96>
      scaling = (partial == 0) ? brightnes_scaling : 255;
 144:	cc 23       	and	r28, r28
 146:	c9 f1       	breq	.+114    	; 0x1ba <toggle+0xde>
      partial = (partial == 0) ? 1 : 0;
      uint8_t cover = (((uint32_t)value * 1000 * scaling) >> 8 ) / 1000;
 148:	af ef       	ldi	r26, 0xFF	; 255
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	a7 01       	movw	r20, r14
 14e:	96 01       	movw	r18, r12
 150:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__muluhisi3>
 154:	67 2f       	mov	r22, r23
 156:	78 2f       	mov	r23, r24
 158:	89 2f       	mov	r24, r25
 15a:	99 27       	eor	r25, r25
 15c:	28 ee       	ldi	r18, 0xE8	; 232
 15e:	33 e0       	ldi	r19, 0x03	; 3
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	50 e0       	ldi	r21, 0x00	; 0
 164:	0e 94 3d 03 	call	0x67a	; 0x67a <__udivmodsi4>
  // Flaga skalowania jasności
  uint8_t scaling = 255;
  for(uint8_t j=0; j < 3; j++){
    if(((leds >> j) & 0x1) == 1){
      scaling = (partial == 0) ? brightnes_scaling : 255;
      partial = (partial == 0) ? 1 : 0;
 168:	c0 e0       	ldi	r28, 0x00	; 0
      switch(j){
        case 0:
          OCR1A = cover;
          break;
        case 1:
          OCR1B = cover;
 16a:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 16e:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
void toggle(uint8_t leds, uint8_t partial, uint8_t brightnes_scaling, uint8_t value){

  // Flaga skalowania jasności
  uint8_t scaling = 255;
  for(uint8_t j=0; j < 3; j++){
    if(((leds >> j) & 0x1) == 1){
 172:	02 ff       	sbrs	r16, 2
 174:	14 c0       	rjmp	.+40     	; 0x19e <toggle+0xc2>
      scaling = (partial == 0) ? brightnes_scaling : 255;
 176:	cc 23       	and	r28, r28
 178:	91 f1       	breq	.+100    	; 0x1de <toggle+0x102>
      partial = (partial == 0) ? 1 : 0;
      uint8_t cover = (((uint32_t)value * 1000 * scaling) >> 8 ) / 1000;
 17a:	af ef       	ldi	r26, 0xFF	; 255
 17c:	b0 e0       	ldi	r27, 0x00	; 0
 17e:	a7 01       	movw	r20, r14
 180:	96 01       	movw	r18, r12
 182:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__muluhisi3>
 186:	67 2f       	mov	r22, r23
 188:	78 2f       	mov	r23, r24
 18a:	89 2f       	mov	r24, r25
 18c:	99 27       	eor	r25, r25
 18e:	28 ee       	ldi	r18, 0xE8	; 232
 190:	33 e0       	ldi	r19, 0x03	; 3
 192:	40 e0       	ldi	r20, 0x00	; 0
 194:	50 e0       	ldi	r21, 0x00	; 0
 196:	0e 94 3d 03 	call	0x67a	; 0x67a <__udivmodsi4>
          break;
        case 1:
          OCR1B = cover;
          break;
        case 2:
          OCR2A = cover;
 19a:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
          break;
      }
    }
  }
}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	1f 91       	pop	r17
 1a4:	0f 91       	pop	r16
 1a6:	ff 90       	pop	r15
 1a8:	ef 90       	pop	r14
 1aa:	df 90       	pop	r13
 1ac:	cf 90       	pop	r12
 1ae:	08 95       	ret
 1b0:	64 2f       	mov	r22, r20
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	ad cf       	rjmp	.-166    	; 0x114 <toggle+0x38>
  uint8_t scaling = 255;
  for(uint8_t j=0; j < 3; j++){
    if(((leds >> j) & 0x1) == 1){
      scaling = (partial == 0) ? brightnes_scaling : 255;
      partial = (partial == 0) ? 1 : 0;
      uint8_t cover = (((uint32_t)value * 1000 * scaling) >> 8 ) / 1000;
 1ba:	ad 2f       	mov	r26, r29
 1bc:	b0 e0       	ldi	r27, 0x00	; 0
 1be:	a7 01       	movw	r20, r14
 1c0:	96 01       	movw	r18, r12
 1c2:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__muluhisi3>
 1c6:	67 2f       	mov	r22, r23
 1c8:	78 2f       	mov	r23, r24
 1ca:	89 2f       	mov	r24, r25
 1cc:	99 27       	eor	r25, r25
 1ce:	28 ee       	ldi	r18, 0xE8	; 232
 1d0:	33 e0       	ldi	r19, 0x03	; 3
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	50 e0       	ldi	r21, 0x00	; 0
 1d6:	0e 94 3d 03 	call	0x67a	; 0x67a <__udivmodsi4>
  // Flaga skalowania jasności
  uint8_t scaling = 255;
  for(uint8_t j=0; j < 3; j++){
    if(((leds >> j) & 0x1) == 1){
      scaling = (partial == 0) ? brightnes_scaling : 255;
      partial = (partial == 0) ? 1 : 0;
 1da:	c1 e0       	ldi	r28, 0x01	; 1
 1dc:	c6 cf       	rjmp	.-116    	; 0x16a <toggle+0x8e>
      uint8_t cover = (((uint32_t)value * 1000 * scaling) >> 8 ) / 1000;
 1de:	ad 2f       	mov	r26, r29
 1e0:	b0 e0       	ldi	r27, 0x00	; 0
 1e2:	cd cf       	rjmp	.-102    	; 0x17e <toggle+0xa2>

000001e4 <next_proper_seed>:
 1e4:	8f 92       	push	r8
 1e6:	9f 92       	push	r9
 1e8:	af 92       	push	r10
 1ea:	bf 92       	push	r11
 1ec:	cf 92       	push	r12
 1ee:	df 92       	push	r13
 1f0:	ef 92       	push	r14
 1f2:	ff 92       	push	r15
 1f4:	49 01       	movw	r8, r18
 1f6:	9d e6       	ldi	r25, 0x6D	; 109
 1f8:	89 9e       	mul	r8, r25
 1fa:	80 2d       	mov	r24, r0
 1fc:	11 24       	eor	r1, r1
 1fe:	85 5f       	subi	r24, 0xF5	; 245
 200:	88 2e       	mov	r8, r24
 202:	91 2c       	mov	r9, r1
 204:	a1 2c       	mov	r10, r1
 206:	b1 2c       	mov	r11, r1
 208:	c1 2c       	mov	r12, r1
 20a:	d1 2c       	mov	r13, r1
 20c:	76 01       	movw	r14, r12
 20e:	87 70       	andi	r24, 0x07	; 7
 210:	99 f3       	breq	.-26     	; 0x1f8 <next_proper_seed+0x14>
 212:	87 30       	cpi	r24, 0x07	; 7
 214:	89 f3       	breq	.-30     	; 0x1f8 <next_proper_seed+0x14>
 216:	84 30       	cpi	r24, 0x04	; 4
 218:	79 f3       	breq	.-34     	; 0x1f8 <next_proper_seed+0x14>
 21a:	81 50       	subi	r24, 0x01	; 1
 21c:	82 30       	cpi	r24, 0x02	; 2
 21e:	60 f3       	brcs	.-40     	; 0x1f8 <next_proper_seed+0x14>
 220:	94 01       	movw	r18, r8
 222:	a5 01       	movw	r20, r10
 224:	b6 01       	movw	r22, r12
 226:	c7 01       	movw	r24, r14
 228:	ff 90       	pop	r15
 22a:	ef 90       	pop	r14
 22c:	df 90       	pop	r13
 22e:	cf 90       	pop	r12
 230:	bf 90       	pop	r11
 232:	af 90       	pop	r10
 234:	9f 90       	pop	r9
 236:	8f 90       	pop	r8
 238:	08 95       	ret

0000023a <main>:
  // ustaw pin OC1A (PB1) jako wyjście
  DDRB |= _BV(PB1) | _BV(PB2);
}

int main()
{
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
 242:	cb 55       	subi	r28, 0x5B	; 91
 244:	d1 09       	sbc	r29, r1
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	de bf       	out	0x3e, r29	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	cd bf       	out	0x3d, r28	; 61
  // COM1A/B = 11 -- inverting mode
  // WGM1  = 0101 -- fast PWM top=0x00FF
  // CS1   = 001  -- prescaler 1
  // częstotliwość 16e6/256 = 62.5 kHz

  TCCR1A = _BV(COM1A1) | _BV(COM1A0) | _BV(COM1B1) | _BV(COM1B0) | _BV(WGM10);
 250:	81 ef       	ldi	r24, 0xF1	; 241
 252:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  TCCR1B = _BV(WGM12) | _BV(CS10);
 256:	89 e0       	ldi	r24, 0x09	; 9
 258:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  // ustaw pin OC1A (PB1) jako wyjście
  DDRB |= _BV(PB1) | _BV(PB2);
 25c:	84 b1       	in	r24, 0x04	; 4
 25e:	86 60       	ori	r24, 0x06	; 6
 260:	84 b9       	out	0x04, r24	; 4
  // COM2B = 11   -- inverting mode
  // WGM2  = 011  -- fast PWM top=0xFF
  // CS2   = 001  -- prescaler 1
  // częstotliwość 16e6/256 = 62.5 kHz

  TCCR2A = _BV(COM2A1) | _BV(COM2A0) | _BV(WGM21) | _BV(WGM20);
 262:	83 ec       	ldi	r24, 0xC3	; 195
 264:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
  TCCR2B = _BV(CS20);
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
  // ustaw pin OC2 (PB3) jako wyjście
  DDRB |= _BV(PB3);
 26e:	23 9a       	sbi	0x04, 3	; 4
  // Inicjalizacja liczników
  counter1_init(); // Blue, Green
  counter2_init(); // Red
  
  // Wypełnienie skorygowane funkcją wykładniczą
  uint8_t values[33] = {0, 0, 1, 3, 4, 5, 7, 9, 11, 13, 15, 18, 21, 25, 28, 33, 37, 43, 48, 55, 62, 71, 80, 90, 101, 114, 128, 144, 161, 181, 203, 227, 255};
 270:	81 e2       	ldi	r24, 0x21	; 33
 272:	e0 e0       	ldi	r30, 0x00	; 0
 274:	f1 e0       	ldi	r31, 0x01	; 1
 276:	de 01       	movw	r26, r28
 278:	92 96       	adiw	r26, 0x22	; 34
 27a:	01 90       	ld	r0, Z+
 27c:	0d 92       	st	X+, r0
 27e:	8a 95       	dec	r24
 280:	e1 f7       	brne	.-8      	; 0x27a <main+0x40>
  // Czasy sinusoidalne
  uint8_t times[33] = {40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 59, 61, 63, 64, 66, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 78, 79, 79, 80, 80, 80, 80};
 282:	9e 01       	movw	r18, r28
 284:	2f 5f       	subi	r18, 0xFF	; 255
 286:	3f 4f       	sbci	r19, 0xFF	; 255
 288:	25 96       	adiw	r28, 0x05	; 5
 28a:	3f af       	std	Y+63, r19	; 0x3f
 28c:	2e af       	std	Y+62, r18	; 0x3e
 28e:	25 97       	sbiw	r28, 0x05	; 5
 290:	81 e2       	ldi	r24, 0x21	; 33
 292:	d9 01       	movw	r26, r18
 294:	1d 92       	st	X+, r1
 296:	8a 95       	dec	r24
 298:	e9 f7       	brne	.-6      	; 0x294 <main+0x5a>
 29a:	88 e2       	ldi	r24, 0x28	; 40
 29c:	89 83       	std	Y+1, r24	; 0x01
 29e:	8a e2       	ldi	r24, 0x2A	; 42
 2a0:	8a 83       	std	Y+2, r24	; 0x02
 2a2:	8c e2       	ldi	r24, 0x2C	; 44
 2a4:	8b 83       	std	Y+3, r24	; 0x03
 2a6:	8e e2       	ldi	r24, 0x2E	; 46
 2a8:	8c 83       	std	Y+4, r24	; 0x04
 2aa:	80 e3       	ldi	r24, 0x30	; 48
 2ac:	8d 83       	std	Y+5, r24	; 0x05
 2ae:	82 e3       	ldi	r24, 0x32	; 50
 2b0:	8e 83       	std	Y+6, r24	; 0x06
 2b2:	84 e3       	ldi	r24, 0x34	; 52
 2b4:	8f 83       	std	Y+7, r24	; 0x07
 2b6:	86 e3       	ldi	r24, 0x36	; 54
 2b8:	88 87       	std	Y+8, r24	; 0x08
 2ba:	88 e3       	ldi	r24, 0x38	; 56
 2bc:	89 87       	std	Y+9, r24	; 0x09
 2be:	8a e3       	ldi	r24, 0x3A	; 58
 2c0:	8a 87       	std	Y+10, r24	; 0x0a
 2c2:	8b e3       	ldi	r24, 0x3B	; 59
 2c4:	8b 87       	std	Y+11, r24	; 0x0b
 2c6:	8d e3       	ldi	r24, 0x3D	; 61
 2c8:	8c 87       	std	Y+12, r24	; 0x0c
 2ca:	8f e3       	ldi	r24, 0x3F	; 63
 2cc:	8d 87       	std	Y+13, r24	; 0x0d
 2ce:	80 e4       	ldi	r24, 0x40	; 64
 2d0:	8e 87       	std	Y+14, r24	; 0x0e
 2d2:	82 e4       	ldi	r24, 0x42	; 66
 2d4:	8f 87       	std	Y+15, r24	; 0x0f
 2d6:	84 e4       	ldi	r24, 0x44	; 68
 2d8:	88 8b       	std	Y+16, r24	; 0x10
 2da:	85 e4       	ldi	r24, 0x45	; 69
 2dc:	89 8b       	std	Y+17, r24	; 0x11
 2de:	86 e4       	ldi	r24, 0x46	; 70
 2e0:	8a 8b       	std	Y+18, r24	; 0x12
 2e2:	88 e4       	ldi	r24, 0x48	; 72
 2e4:	8b 8b       	std	Y+19, r24	; 0x13
 2e6:	89 e4       	ldi	r24, 0x49	; 73
 2e8:	8c 8b       	std	Y+20, r24	; 0x14
 2ea:	8a e4       	ldi	r24, 0x4A	; 74
 2ec:	8d 8b       	std	Y+21, r24	; 0x15
 2ee:	8b e4       	ldi	r24, 0x4B	; 75
 2f0:	8e 8b       	std	Y+22, r24	; 0x16
 2f2:	8c e4       	ldi	r24, 0x4C	; 76
 2f4:	8f 8b       	std	Y+23, r24	; 0x17
 2f6:	8d e4       	ldi	r24, 0x4D	; 77
 2f8:	88 8f       	std	Y+24, r24	; 0x18
 2fa:	8e e4       	ldi	r24, 0x4E	; 78
 2fc:	89 8f       	std	Y+25, r24	; 0x19
 2fe:	8a 8f       	std	Y+26, r24	; 0x1a
 300:	8f e4       	ldi	r24, 0x4F	; 79
 302:	8b 8f       	std	Y+27, r24	; 0x1b
 304:	8c 8f       	std	Y+28, r24	; 0x1c
 306:	80 e5       	ldi	r24, 0x50	; 80
 308:	8d 8f       	std	Y+29, r24	; 0x1d
 30a:	8e 8f       	std	Y+30, r24	; 0x1e
 30c:	8f 8f       	std	Y+31, r24	; 0x1f
 30e:	88 a3       	std	Y+32, r24	; 0x20
  
  uint8_t i = 0;
  uint8_t leds = 0; // 00000RGB - zawsze tylko 2 wartości wysokie 
  uint8_t partial = 0; // Określa który led nie będzie świecił pełną jasnością
  uint64_t seed = 1;
 310:	88 24       	eor	r8, r8
 312:	83 94       	inc	r8
 314:	fe 01       	movw	r30, r28
 316:	b3 96       	adiw	r30, 0x23	; 35
 318:	27 96       	adiw	r28, 0x07	; 7
 31a:	ff af       	std	Y+63, r31	; 0x3f
 31c:	ee af       	std	Y+62, r30	; 0x3e
 31e:	27 97       	sbiw	r28, 0x07	; 7
    _delay_ms(1);
  };
}
// Funkcja random z implementacji klasy java.util.Random
uint8_t random(uint64_t seed){
  return (((uint64_t)seed * 0x5DEECE66DL) + 0xBL);
 320:	0d e6       	ldi	r16, 0x6D	; 109
 322:	20 2e       	mov	r2, r16
 324:	22 e2       	ldi	r18, 0x22	; 34
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	2c 0f       	add	r18, r28
 32a:	3d 1f       	adc	r19, r29
 32c:	20 5e       	subi	r18, 0xE0	; 224
 32e:	3f 4f       	sbci	r19, 0xFF	; 255
 330:	68 96       	adiw	r28, 0x18	; 24
 332:	3f af       	std	Y+63, r19	; 0x3f
 334:	2e af       	std	Y+62, r18	; 0x3e
 336:	68 97       	sbiw	r28, 0x18	; 24
      scaling = (partial == 0) ? brightnes_scaling : 255;
      partial = (partial == 0) ? 1 : 0;
      uint8_t cover = (((uint32_t)value * 1000 * scaling) >> 8 ) / 1000;
      switch(j){
        case 0:
          OCR1A = cover;
 338:	88 ee       	ldi	r24, 0xE8	; 232
 33a:	48 2e       	mov	r4, r24
 33c:	83 e0       	ldi	r24, 0x03	; 3
 33e:	58 2e       	mov	r5, r24
 340:	61 2c       	mov	r6, r1
 342:	71 2c       	mov	r7, r1
    _delay_ms(1);
  };
}
// Funkcja random z implementacji klasy java.util.Random
uint8_t random(uint64_t seed){
  return (((uint64_t)seed * 0x5DEECE66DL) + 0xBL);
 344:	82 9c       	mul	r8, r2
 346:	80 2d       	mov	r24, r0
 348:	11 24       	eor	r1, r1
 34a:	85 5f       	subi	r24, 0xF5	; 245
}

uint64_t next_proper_seed(uint64_t seed){
  uint8_t leds = 0;
  do {
      seed = random(seed);
 34c:	88 2e       	mov	r8, r24
      leds = seed & 0x07; 
 34e:	28 2f       	mov	r18, r24
 350:	27 70       	andi	r18, 0x07	; 7
  } while(leds == 0 || leds == 7 || leds == 4 || leds == 1 || leds == 2);
 352:	c1 f3       	breq	.-16     	; 0x344 <main+0x10a>
 354:	27 30       	cpi	r18, 0x07	; 7
 356:	b1 f3       	breq	.-20     	; 0x344 <main+0x10a>
 358:	24 30       	cpi	r18, 0x04	; 4
 35a:	a1 f3       	breq	.-24     	; 0x344 <main+0x10a>
 35c:	9f ef       	ldi	r25, 0xFF	; 255
 35e:	92 0f       	add	r25, r18
 360:	92 30       	cpi	r25, 0x02	; 2
 362:	80 f3       	brcs	.-32     	; 0x344 <main+0x10a>
  uint64_t seed = 1;
  uint8_t brightnes_scaling = 0; // skalowanie jasności świecenia jednego koloru
  while(1) {
    seed = next_proper_seed(seed);
    leds = seed & 0x7;
    partial = seed & 0x1;
 364:	38 2f       	mov	r19, r24
 366:	31 70       	andi	r19, 0x01	; 1
 368:	60 96       	adiw	r28, 0x10	; 16
 36a:	3f af       	std	Y+63, r19	; 0x3f
 36c:	60 97       	sbiw	r28, 0x10	; 16
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	21 fb       	bst	r18, 1
 372:	44 27       	eor	r20, r20
 374:	40 f9       	bld	r20, 0
 376:	2e 96       	adiw	r28, 0x0e	; 14
 378:	4f af       	std	Y+63, r20	; 0x3f
 37a:	2e 97       	sbiw	r28, 0x0e	; 14
 37c:	2f 96       	adiw	r28, 0x0f	; 15
 37e:	1f ae       	std	Y+63, r1	; 0x3f
 380:	2f 97       	sbiw	r28, 0x0f	; 15
 382:	d9 01       	movw	r26, r18
 384:	b5 95       	asr	r27
 386:	a7 95       	ror	r26
 388:	b5 95       	asr	r27
 38a:	a7 95       	ror	r26
 38c:	62 96       	adiw	r28, 0x12	; 18
 38e:	bf af       	std	Y+63, r27	; 0x3f
 390:	ae af       	std	Y+62, r26	; 0x3e
 392:	62 97       	sbiw	r28, 0x12	; 18
  uint8_t scaling = 255;
  for(uint8_t j=0; j < 3; j++){
    if(((leds >> j) & 0x1) == 1){
      scaling = (partial == 0) ? brightnes_scaling : 255;
      partial = (partial == 0) ? 1 : 0;
      uint8_t cover = (((uint32_t)value * 1000 * scaling) >> 8 ) / 1000;
 394:	28 2f       	mov	r18, r24
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	40 e0       	ldi	r20, 0x00	; 0
 39a:	50 e0       	ldi	r21, 0x00	; 0
 39c:	66 96       	adiw	r28, 0x16	; 22
 39e:	2c af       	std	Y+60, r18	; 0x3c
 3a0:	3d af       	std	Y+61, r19	; 0x3d
 3a2:	4e af       	std	Y+62, r20	; 0x3e
 3a4:	5f af       	std	Y+63, r21	; 0x3f
 3a6:	66 97       	sbiw	r28, 0x16	; 22
 3a8:	a8 ee       	ldi	r26, 0xE8	; 232
 3aa:	b3 e0       	ldi	r27, 0x03	; 3
 3ac:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__muluhisi3>
 3b0:	6c 96       	adiw	r28, 0x1c	; 28
 3b2:	6c af       	std	Y+60, r22	; 0x3c
 3b4:	7d af       	std	Y+61, r23	; 0x3d
 3b6:	8e af       	std	Y+62, r24	; 0x3e
 3b8:	9f af       	std	Y+63, r25	; 0x3f
 3ba:	6c 97       	sbiw	r28, 0x1c	; 28
 3bc:	8e 01       	movw	r16, r28
 3be:	0e 5d       	subi	r16, 0xDE	; 222
 3c0:	1f 4f       	sbci	r17, 0xFF	; 255
 3c2:	ae 01       	movw	r20, r28
 3c4:	4f 5f       	subi	r20, 0xFF	; 255
 3c6:	5f 4f       	sbci	r21, 0xFF	; 255
 3c8:	29 96       	adiw	r28, 0x09	; 9
 3ca:	5f af       	std	Y+63, r21	; 0x3f
 3cc:	4e af       	std	Y+62, r20	; 0x3e
 3ce:	29 97       	sbiw	r28, 0x09	; 9
    partial = seed & 0x1;
    brightnes_scaling = seed & 0xFF;

    i = 0;
    while(i < 32){
      toggle(leds, partial, brightnes_scaling, values[i]);
 3d0:	d8 01       	movw	r26, r16
 3d2:	3d 90       	ld	r3, X+
 3d4:	8d 01       	movw	r16, r26
void toggle(uint8_t leds, uint8_t partial, uint8_t brightnes_scaling, uint8_t value){

  // Flaga skalowania jasności
  uint8_t scaling = 255;
  for(uint8_t j=0; j < 3; j++){
    if(((leds >> j) & 0x1) == 1){
 3d6:	60 96       	adiw	r28, 0x10	; 16
 3d8:	bf ad       	ldd	r27, Y+63	; 0x3f
 3da:	60 97       	sbiw	r28, 0x10	; 16
 3dc:	bb 23       	and	r27, r27
 3de:	a1 f0       	breq	.+40     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
      scaling = (partial == 0) ? brightnes_scaling : 255;
      partial = (partial == 0) ? 1 : 0;
      uint8_t cover = (((uint32_t)value * 1000 * scaling) >> 8 ) / 1000;
      switch(j){
        case 0:
          OCR1A = cover;
 3e0:	a3 2d       	mov	r26, r3
 3e2:	b0 e0       	ldi	r27, 0x00	; 0
 3e4:	28 e1       	ldi	r18, 0x18	; 24
 3e6:	34 ee       	ldi	r19, 0xE4	; 228
 3e8:	43 e0       	ldi	r20, 0x03	; 3
 3ea:	50 e0       	ldi	r21, 0x00	; 0
 3ec:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__muluhisi3>
 3f0:	67 2f       	mov	r22, r23
 3f2:	78 2f       	mov	r23, r24
 3f4:	89 2f       	mov	r24, r25
 3f6:	99 27       	eor	r25, r25
 3f8:	a3 01       	movw	r20, r6
 3fa:	92 01       	movw	r18, r4
 3fc:	0e 94 3d 03 	call	0x67a	; 0x67a <__udivmodsi4>
 400:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 404:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
void toggle(uint8_t leds, uint8_t partial, uint8_t brightnes_scaling, uint8_t value){

  // Flaga skalowania jasności
  uint8_t scaling = 255;
  for(uint8_t j=0; j < 3; j++){
    if(((leds >> j) & 0x1) == 1){
 408:	2f 96       	adiw	r28, 0x0f	; 15
 40a:	ee ad       	ldd	r30, Y+62	; 0x3e
 40c:	ff ad       	ldd	r31, Y+63	; 0x3f
 40e:	2f 97       	sbiw	r28, 0x0f	; 15
 410:	ef 2b       	or	r30, r31
 412:	09 f0       	breq	.+2      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 414:	c8 c0       	rjmp	.+400    	; 0x5a6 <__EEPROM_REGION_LENGTH__+0x1a6>
 416:	62 96       	adiw	r28, 0x12	; 18
 418:	8e ad       	ldd	r24, Y+62	; 0x3e
 41a:	9f ad       	ldd	r25, Y+63	; 0x3f
 41c:	62 97       	sbiw	r28, 0x12	; 18
 41e:	89 2b       	or	r24, r25
 420:	71 f1       	breq	.+92     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 422:	23 2d       	mov	r18, r3
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	40 e0       	ldi	r20, 0x00	; 0
 428:	50 e0       	ldi	r21, 0x00	; 0
 42a:	2d 96       	adiw	r28, 0x0d	; 13
 42c:	2c af       	std	Y+60, r18	; 0x3c
 42e:	3d af       	std	Y+61, r19	; 0x3d
 430:	4e af       	std	Y+62, r20	; 0x3e
 432:	5f af       	std	Y+63, r21	; 0x3f
 434:	2d 97       	sbiw	r28, 0x0d	; 13
 436:	63 96       	adiw	r28, 0x13	; 19
 438:	2f ad       	ldd	r18, Y+63	; 0x3f
 43a:	63 97       	sbiw	r28, 0x13	; 19
 43c:	64 96       	adiw	r28, 0x14	; 20
 43e:	3f ad       	ldd	r19, Y+63	; 0x3f
 440:	64 97       	sbiw	r28, 0x14	; 20
 442:	65 96       	adiw	r28, 0x15	; 21
 444:	4f ad       	ldd	r20, Y+63	; 0x3f
 446:	65 97       	sbiw	r28, 0x15	; 21
 448:	66 96       	adiw	r28, 0x16	; 22
 44a:	5f ad       	ldd	r21, Y+63	; 0x3f
 44c:	66 97       	sbiw	r28, 0x16	; 22
      scaling = (partial == 0) ? brightnes_scaling : 255;
      partial = (partial == 0) ? 1 : 0;
      uint8_t cover = (((uint32_t)value * 1000 * scaling) >> 8 ) / 1000;
 44e:	2d 96       	adiw	r28, 0x0d	; 13
 450:	6c ad       	ldd	r22, Y+60	; 0x3c
 452:	7d ad       	ldd	r23, Y+61	; 0x3d
 454:	8e ad       	ldd	r24, Y+62	; 0x3e
 456:	9f ad       	ldd	r25, Y+63	; 0x3f
 458:	2d 97       	sbiw	r28, 0x0d	; 13
 45a:	0e 94 2d 03 	call	0x65a	; 0x65a <__mulsi3>
 45e:	9b 01       	movw	r18, r22
 460:	ac 01       	movw	r20, r24
 462:	a8 ee       	ldi	r26, 0xE8	; 232
 464:	b3 e0       	ldi	r27, 0x03	; 3
 466:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__muluhisi3>
 46a:	67 2f       	mov	r22, r23
 46c:	78 2f       	mov	r23, r24
 46e:	89 2f       	mov	r24, r25
 470:	99 27       	eor	r25, r25
 472:	a3 01       	movw	r20, r6
 474:	92 01       	movw	r18, r4
 476:	0e 94 3d 03 	call	0x67a	; 0x67a <__udivmodsi4>
          break;
        case 1:
          OCR1B = cover;
          break;
        case 2:
          OCR2A = cover;
 47a:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    brightnes_scaling = seed & 0xFF;

    i = 0;
    while(i < 32){
      toggle(leds, partial, brightnes_scaling, values[i]);
      delay(times[i++]);
 47e:	29 96       	adiw	r28, 0x09	; 9
 480:	ae ad       	ldd	r26, Y+62	; 0x3e
 482:	bf ad       	ldd	r27, Y+63	; 0x3f
 484:	29 97       	sbiw	r28, 0x09	; 9
 486:	8d 91       	ld	r24, X+
 488:	29 96       	adiw	r28, 0x09	; 9
 48a:	bf af       	std	Y+63, r27	; 0x3f
 48c:	ae af       	std	Y+62, r26	; 0x3e
 48e:	29 97       	sbiw	r28, 0x09	; 9
    }
  }
}

void delay(uint8_t time){
  while(time-- > 0){
 490:	88 23       	and	r24, r24
 492:	41 f0       	breq	.+16     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 494:	af e9       	ldi	r26, 0x9F	; 159
 496:	bf e0       	ldi	r27, 0x0F	; 15
 498:	11 97       	sbiw	r26, 0x01	; 1
 49a:	f1 f7       	brne	.-4      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 49e:	00 00       	nop
 4a0:	81 50       	subi	r24, 0x01	; 1
 4a2:	c1 f7       	brne	.-16     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
    leds = seed & 0x7;
    partial = seed & 0x1;
    brightnes_scaling = seed & 0xFF;

    i = 0;
    while(i < 32){
 4a4:	68 96       	adiw	r28, 0x18	; 24
 4a6:	ee ad       	ldd	r30, Y+62	; 0x3e
 4a8:	ff ad       	ldd	r31, Y+63	; 0x3f
 4aa:	68 97       	sbiw	r28, 0x18	; 24
 4ac:	0e 17       	cp	r16, r30
 4ae:	1f 07       	cpc	r17, r31
 4b0:	09 f0       	breq	.+2      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4b2:	8e cf       	rjmp	.-228    	; 0x3d0 <main+0x196>
 4b4:	02 e2       	ldi	r16, 0x22	; 34
 4b6:	10 e0       	ldi	r17, 0x00	; 0
 4b8:	0c 0f       	add	r16, r28
 4ba:	1d 1f       	adc	r17, r29
 4bc:	0f 5d       	subi	r16, 0xDF	; 223
 4be:	1f 4f       	sbci	r17, 0xFF	; 255
 4c0:	fe 01       	movw	r30, r28
 4c2:	b2 96       	adiw	r30, 0x22	; 34
 4c4:	29 96       	adiw	r28, 0x09	; 9
 4c6:	ff af       	std	Y+63, r31	; 0x3f
 4c8:	ee af       	std	Y+62, r30	; 0x3e
 4ca:	29 97       	sbiw	r28, 0x09	; 9
      toggle(leds, partial, brightnes_scaling, values[i]);
      delay(times[i++]);
      //_delay_ms(50);
    }
    while(i > 0){
      toggle(leds, partial, brightnes_scaling, values[i]);
 4cc:	d8 01       	movw	r26, r16
 4ce:	3e 90       	ld	r3, -X
 4d0:	8d 01       	movw	r16, r26
void toggle(uint8_t leds, uint8_t partial, uint8_t brightnes_scaling, uint8_t value){

  // Flaga skalowania jasności
  uint8_t scaling = 255;
  for(uint8_t j=0; j < 3; j++){
    if(((leds >> j) & 0x1) == 1){
 4d2:	60 96       	adiw	r28, 0x10	; 16
 4d4:	bf ad       	ldd	r27, Y+63	; 0x3f
 4d6:	60 97       	sbiw	r28, 0x10	; 16
 4d8:	bb 23       	and	r27, r27
 4da:	a1 f0       	breq	.+40     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
      scaling = (partial == 0) ? brightnes_scaling : 255;
      partial = (partial == 0) ? 1 : 0;
      uint8_t cover = (((uint32_t)value * 1000 * scaling) >> 8 ) / 1000;
      switch(j){
        case 0:
          OCR1A = cover;
 4dc:	a3 2d       	mov	r26, r3
 4de:	b0 e0       	ldi	r27, 0x00	; 0
 4e0:	28 e1       	ldi	r18, 0x18	; 24
 4e2:	34 ee       	ldi	r19, 0xE4	; 228
 4e4:	43 e0       	ldi	r20, 0x03	; 3
 4e6:	50 e0       	ldi	r21, 0x00	; 0
 4e8:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__muluhisi3>
 4ec:	67 2f       	mov	r22, r23
 4ee:	78 2f       	mov	r23, r24
 4f0:	89 2f       	mov	r24, r25
 4f2:	99 27       	eor	r25, r25
 4f4:	a3 01       	movw	r20, r6
 4f6:	92 01       	movw	r18, r4
 4f8:	0e 94 3d 03 	call	0x67a	; 0x67a <__udivmodsi4>
 4fc:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 500:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
void toggle(uint8_t leds, uint8_t partial, uint8_t brightnes_scaling, uint8_t value){

  // Flaga skalowania jasności
  uint8_t scaling = 255;
  for(uint8_t j=0; j < 3; j++){
    if(((leds >> j) & 0x1) == 1){
 504:	2f 96       	adiw	r28, 0x0f	; 15
 506:	2e ad       	ldd	r18, Y+62	; 0x3e
 508:	3f ad       	ldd	r19, Y+63	; 0x3f
 50a:	2f 97       	sbiw	r28, 0x0f	; 15
 50c:	23 2b       	or	r18, r19
 50e:	09 f0       	breq	.+2      	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
 510:	74 c0       	rjmp	.+232    	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
 512:	62 96       	adiw	r28, 0x12	; 18
 514:	8e ad       	ldd	r24, Y+62	; 0x3e
 516:	9f ad       	ldd	r25, Y+63	; 0x3f
 518:	62 97       	sbiw	r28, 0x12	; 18
 51a:	89 2b       	or	r24, r25
 51c:	41 f1       	breq	.+80     	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
 51e:	23 2d       	mov	r18, r3
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	40 e0       	ldi	r20, 0x00	; 0
 524:	50 e0       	ldi	r21, 0x00	; 0
 526:	2d 96       	adiw	r28, 0x0d	; 13
 528:	2c af       	std	Y+60, r18	; 0x3c
 52a:	3d af       	std	Y+61, r19	; 0x3d
 52c:	4e af       	std	Y+62, r20	; 0x3e
 52e:	5f af       	std	Y+63, r21	; 0x3f
 530:	2d 97       	sbiw	r28, 0x0d	; 13
 532:	63 96       	adiw	r28, 0x13	; 19
 534:	6f ad       	ldd	r22, Y+63	; 0x3f
 536:	63 97       	sbiw	r28, 0x13	; 19
 538:	64 96       	adiw	r28, 0x14	; 20
 53a:	7f ad       	ldd	r23, Y+63	; 0x3f
 53c:	64 97       	sbiw	r28, 0x14	; 20
 53e:	65 96       	adiw	r28, 0x15	; 21
 540:	8f ad       	ldd	r24, Y+63	; 0x3f
 542:	65 97       	sbiw	r28, 0x15	; 21
 544:	66 96       	adiw	r28, 0x16	; 22
 546:	9f ad       	ldd	r25, Y+63	; 0x3f
 548:	66 97       	sbiw	r28, 0x16	; 22
      scaling = (partial == 0) ? brightnes_scaling : 255;
      partial = (partial == 0) ? 1 : 0;
      uint8_t cover = (((uint32_t)value * 1000 * scaling) >> 8 ) / 1000;
 54a:	0e 94 2d 03 	call	0x65a	; 0x65a <__mulsi3>
 54e:	9b 01       	movw	r18, r22
 550:	ac 01       	movw	r20, r24
 552:	a8 ee       	ldi	r26, 0xE8	; 232
 554:	b3 e0       	ldi	r27, 0x03	; 3
 556:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__muluhisi3>
 55a:	67 2f       	mov	r22, r23
 55c:	78 2f       	mov	r23, r24
 55e:	89 2f       	mov	r24, r25
 560:	99 27       	eor	r25, r25
 562:	a3 01       	movw	r20, r6
 564:	92 01       	movw	r18, r4
 566:	0e 94 3d 03 	call	0x67a	; 0x67a <__udivmodsi4>
          break;
        case 1:
          OCR1B = cover;
          break;
        case 2:
          OCR2A = cover;
 56a:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
      delay(times[i++]);
      //_delay_ms(50);
    }
    while(i > 0){
      toggle(leds, partial, brightnes_scaling, values[i]);
      delay(times[i--]);
 56e:	29 96       	adiw	r28, 0x09	; 9
 570:	ae ad       	ldd	r26, Y+62	; 0x3e
 572:	bf ad       	ldd	r27, Y+63	; 0x3f
 574:	29 97       	sbiw	r28, 0x09	; 9
 576:	8e 91       	ld	r24, -X
 578:	29 96       	adiw	r28, 0x09	; 9
 57a:	bf af       	std	Y+63, r27	; 0x3f
 57c:	ae af       	std	Y+62, r26	; 0x3e
 57e:	29 97       	sbiw	r28, 0x09	; 9
    }
  }
}

void delay(uint8_t time){
  while(time-- > 0){
 580:	88 23       	and	r24, r24
 582:	41 f0       	breq	.+16     	; 0x594 <__EEPROM_REGION_LENGTH__+0x194>
 584:	af e9       	ldi	r26, 0x9F	; 159
 586:	bf e0       	ldi	r27, 0x0F	; 15
 588:	11 97       	sbiw	r26, 0x01	; 1
 58a:	f1 f7       	brne	.-4      	; 0x588 <__EEPROM_REGION_LENGTH__+0x188>
 58c:	00 c0       	rjmp	.+0      	; 0x58e <__EEPROM_REGION_LENGTH__+0x18e>
 58e:	00 00       	nop
 590:	81 50       	subi	r24, 0x01	; 1
 592:	c1 f7       	brne	.-16     	; 0x584 <__EEPROM_REGION_LENGTH__+0x184>
    while(i < 32){
      toggle(leds, partial, brightnes_scaling, values[i]);
      delay(times[i++]);
      //_delay_ms(50);
    }
    while(i > 0){
 594:	27 96       	adiw	r28, 0x07	; 7
 596:	ee ad       	ldd	r30, Y+62	; 0x3e
 598:	ff ad       	ldd	r31, Y+63	; 0x3f
 59a:	27 97       	sbiw	r28, 0x07	; 7
 59c:	0e 17       	cp	r16, r30
 59e:	1f 07       	cpc	r17, r31
 5a0:	09 f0       	breq	.+2      	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 5a2:	94 cf       	rjmp	.-216    	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 5a4:	cf ce       	rjmp	.-610    	; 0x344 <main+0x10a>
  uint8_t scaling = 255;
  for(uint8_t j=0; j < 3; j++){
    if(((leds >> j) & 0x1) == 1){
      scaling = (partial == 0) ? brightnes_scaling : 255;
      partial = (partial == 0) ? 1 : 0;
      uint8_t cover = (((uint32_t)value * 1000 * scaling) >> 8 ) / 1000;
 5a6:	23 2d       	mov	r18, r3
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	40 e0       	ldi	r20, 0x00	; 0
 5ac:	50 e0       	ldi	r21, 0x00	; 0
 5ae:	2d 96       	adiw	r28, 0x0d	; 13
 5b0:	2c af       	std	Y+60, r18	; 0x3c
 5b2:	3d af       	std	Y+61, r19	; 0x3d
 5b4:	4e af       	std	Y+62, r20	; 0x3e
 5b6:	5f af       	std	Y+63, r21	; 0x3f
 5b8:	2d 97       	sbiw	r28, 0x0d	; 13
      switch(j){
        case 0:
          OCR1A = cover;
          break;
        case 1:
          OCR1B = cover;
 5ba:	6c 96       	adiw	r28, 0x1c	; 28
 5bc:	6c ad       	ldd	r22, Y+60	; 0x3c
 5be:	7d ad       	ldd	r23, Y+61	; 0x3d
 5c0:	8e ad       	ldd	r24, Y+62	; 0x3e
 5c2:	9f ad       	ldd	r25, Y+63	; 0x3f
 5c4:	6c 97       	sbiw	r28, 0x1c	; 28
 5c6:	0e 94 2d 03 	call	0x65a	; 0x65a <__mulsi3>
 5ca:	67 2f       	mov	r22, r23
 5cc:	78 2f       	mov	r23, r24
 5ce:	89 2f       	mov	r24, r25
 5d0:	99 27       	eor	r25, r25
 5d2:	a3 01       	movw	r20, r6
 5d4:	92 01       	movw	r18, r4
 5d6:	0e 94 3d 03 	call	0x67a	; 0x67a <__udivmodsi4>
 5da:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 5de:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
void toggle(uint8_t leds, uint8_t partial, uint8_t brightnes_scaling, uint8_t value){

  // Flaga skalowania jasności
  uint8_t scaling = 255;
  for(uint8_t j=0; j < 3; j++){
    if(((leds >> j) & 0x1) == 1){
 5e2:	62 96       	adiw	r28, 0x12	; 18
 5e4:	4e ad       	ldd	r20, Y+62	; 0x3e
 5e6:	5f ad       	ldd	r21, Y+63	; 0x3f
 5e8:	62 97       	sbiw	r28, 0x12	; 18
 5ea:	45 2b       	or	r20, r21
 5ec:	09 f4       	brne	.+2      	; 0x5f0 <__EEPROM_REGION_LENGTH__+0x1f0>
 5ee:	47 cf       	rjmp	.-370    	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 5f0:	2f ef       	ldi	r18, 0xFF	; 255
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	40 e0       	ldi	r20, 0x00	; 0
 5f6:	50 e0       	ldi	r21, 0x00	; 0
 5f8:	2a cf       	rjmp	.-428    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
      scaling = (partial == 0) ? brightnes_scaling : 255;
      partial = (partial == 0) ? 1 : 0;
      uint8_t cover = (((uint32_t)value * 1000 * scaling) >> 8 ) / 1000;
 5fa:	23 2d       	mov	r18, r3
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	40 e0       	ldi	r20, 0x00	; 0
 600:	50 e0       	ldi	r21, 0x00	; 0
 602:	2d 96       	adiw	r28, 0x0d	; 13
 604:	2c af       	std	Y+60, r18	; 0x3c
 606:	3d af       	std	Y+61, r19	; 0x3d
 608:	4e af       	std	Y+62, r20	; 0x3e
 60a:	5f af       	std	Y+63, r21	; 0x3f
 60c:	2d 97       	sbiw	r28, 0x0d	; 13
      switch(j){
        case 0:
          OCR1A = cover;
          break;
        case 1:
          OCR1B = cover;
 60e:	6c 96       	adiw	r28, 0x1c	; 28
 610:	6c ad       	ldd	r22, Y+60	; 0x3c
 612:	7d ad       	ldd	r23, Y+61	; 0x3d
 614:	8e ad       	ldd	r24, Y+62	; 0x3e
 616:	9f ad       	ldd	r25, Y+63	; 0x3f
 618:	6c 97       	sbiw	r28, 0x1c	; 28
 61a:	0e 94 2d 03 	call	0x65a	; 0x65a <__mulsi3>
 61e:	67 2f       	mov	r22, r23
 620:	78 2f       	mov	r23, r24
 622:	89 2f       	mov	r24, r25
 624:	99 27       	eor	r25, r25
 626:	a3 01       	movw	r20, r6
 628:	92 01       	movw	r18, r4
 62a:	0e 94 3d 03 	call	0x67a	; 0x67a <__udivmodsi4>
 62e:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 632:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
void toggle(uint8_t leds, uint8_t partial, uint8_t brightnes_scaling, uint8_t value){

  // Flaga skalowania jasności
  uint8_t scaling = 255;
  for(uint8_t j=0; j < 3; j++){
    if(((leds >> j) & 0x1) == 1){
 636:	62 96       	adiw	r28, 0x12	; 18
 638:	4e ad       	ldd	r20, Y+62	; 0x3e
 63a:	5f ad       	ldd	r21, Y+63	; 0x3f
 63c:	62 97       	sbiw	r28, 0x12	; 18
 63e:	45 2b       	or	r20, r21
 640:	09 f4       	brne	.+2      	; 0x644 <__EEPROM_REGION_LENGTH__+0x244>
 642:	95 cf       	rjmp	.-214    	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
 644:	6f ef       	ldi	r22, 0xFF	; 255
 646:	70 e0       	ldi	r23, 0x00	; 0
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	2d 96       	adiw	r28, 0x0d	; 13
 64e:	2c ad       	ldd	r18, Y+60	; 0x3c
 650:	3d ad       	ldd	r19, Y+61	; 0x3d
 652:	4e ad       	ldd	r20, Y+62	; 0x3e
 654:	5f ad       	ldd	r21, Y+63	; 0x3f
 656:	2d 97       	sbiw	r28, 0x0d	; 13
 658:	78 cf       	rjmp	.-272    	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>

0000065a <__mulsi3>:
 65a:	db 01       	movw	r26, r22
 65c:	8f 93       	push	r24
 65e:	9f 93       	push	r25
 660:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__muluhisi3>
 664:	bf 91       	pop	r27
 666:	af 91       	pop	r26
 668:	a2 9f       	mul	r26, r18
 66a:	80 0d       	add	r24, r0
 66c:	91 1d       	adc	r25, r1
 66e:	a3 9f       	mul	r26, r19
 670:	90 0d       	add	r25, r0
 672:	b2 9f       	mul	r27, r18
 674:	90 0d       	add	r25, r0
 676:	11 24       	eor	r1, r1
 678:	08 95       	ret

0000067a <__udivmodsi4>:
 67a:	a1 e2       	ldi	r26, 0x21	; 33
 67c:	1a 2e       	mov	r1, r26
 67e:	aa 1b       	sub	r26, r26
 680:	bb 1b       	sub	r27, r27
 682:	fd 01       	movw	r30, r26
 684:	0d c0       	rjmp	.+26     	; 0x6a0 <__udivmodsi4_ep>

00000686 <__udivmodsi4_loop>:
 686:	aa 1f       	adc	r26, r26
 688:	bb 1f       	adc	r27, r27
 68a:	ee 1f       	adc	r30, r30
 68c:	ff 1f       	adc	r31, r31
 68e:	a2 17       	cp	r26, r18
 690:	b3 07       	cpc	r27, r19
 692:	e4 07       	cpc	r30, r20
 694:	f5 07       	cpc	r31, r21
 696:	20 f0       	brcs	.+8      	; 0x6a0 <__udivmodsi4_ep>
 698:	a2 1b       	sub	r26, r18
 69a:	b3 0b       	sbc	r27, r19
 69c:	e4 0b       	sbc	r30, r20
 69e:	f5 0b       	sbc	r31, r21

000006a0 <__udivmodsi4_ep>:
 6a0:	66 1f       	adc	r22, r22
 6a2:	77 1f       	adc	r23, r23
 6a4:	88 1f       	adc	r24, r24
 6a6:	99 1f       	adc	r25, r25
 6a8:	1a 94       	dec	r1
 6aa:	69 f7       	brne	.-38     	; 0x686 <__udivmodsi4_loop>
 6ac:	60 95       	com	r22
 6ae:	70 95       	com	r23
 6b0:	80 95       	com	r24
 6b2:	90 95       	com	r25
 6b4:	9b 01       	movw	r18, r22
 6b6:	ac 01       	movw	r20, r24
 6b8:	bd 01       	movw	r22, r26
 6ba:	cf 01       	movw	r24, r30
 6bc:	08 95       	ret

000006be <__umulhisi3>:
 6be:	a2 9f       	mul	r26, r18
 6c0:	b0 01       	movw	r22, r0
 6c2:	b3 9f       	mul	r27, r19
 6c4:	c0 01       	movw	r24, r0
 6c6:	a3 9f       	mul	r26, r19
 6c8:	70 0d       	add	r23, r0
 6ca:	81 1d       	adc	r24, r1
 6cc:	11 24       	eor	r1, r1
 6ce:	91 1d       	adc	r25, r1
 6d0:	b2 9f       	mul	r27, r18
 6d2:	70 0d       	add	r23, r0
 6d4:	81 1d       	adc	r24, r1
 6d6:	11 24       	eor	r1, r1
 6d8:	91 1d       	adc	r25, r1
 6da:	08 95       	ret

000006dc <__muluhisi3>:
 6dc:	0e 94 5f 03 	call	0x6be	; 0x6be <__umulhisi3>
 6e0:	a5 9f       	mul	r26, r21
 6e2:	90 0d       	add	r25, r0
 6e4:	b4 9f       	mul	r27, r20
 6e6:	90 0d       	add	r25, r0
 6e8:	a4 9f       	mul	r26, r20
 6ea:	80 0d       	add	r24, r0
 6ec:	91 1d       	adc	r25, r1
 6ee:	11 24       	eor	r1, r1
 6f0:	08 95       	ret

000006f2 <_exit>:
 6f2:	f8 94       	cli

000006f4 <__stop_program>:
 6f4:	ff cf       	rjmp	.-2      	; 0x6f4 <__stop_program>
