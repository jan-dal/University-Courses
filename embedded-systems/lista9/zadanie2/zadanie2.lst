
zadanie2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000be2  00000c76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000be2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080010e  0080010e  00000c84  2**0
                  ALLOC
  3 .stab         00001f80  00000000  00000000  00000c84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001002  00000000  00000000  00002c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003c06  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003c18  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00003c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  0000424c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000047ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00004808  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ee       	ldi	r30, 0xE2	; 226
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 32       	cpi	r26, 0x22	; 34
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cc 02 	call	0x598	; 0x598 <main>
  9e:	0c 94 ef 05 	jmp	0xbde	; 0xbde <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_receive>:
}

int uart_receive(FILE *stream)
{
  // czekaj aż znak dostępny
  while (!(UCSR0A & _BV(RXC0)));
  a6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  aa:	87 ff       	sbrs	r24, 7
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <uart_receive>
  return UDR0;
  ae:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	08 95       	ret

000000b6 <hd44780_transmit>:
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
}

int hd44780_transmit(char data, FILE *stream)
{
  LCD_WriteData(data);
  b6:	0e 94 30 01 	call	0x260	; 0x260 <LCD_WriteData>
  return 0;
}
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	08 95       	ret

000000c0 <uart_init>:

// inicjalizacja UART
void uart_init()
{
  // ustaw baudrate
  UBRR0 = UBRR_VALUE;
  c0:	87 e6       	ldi	r24, 0x67	; 103
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  c8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  // wyczyść rejestr UCSR0A
  UCSR0A = 0;
  cc:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  // włącz odbiornik i nadajnik
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
  d0:	88 e1       	ldi	r24, 0x18	; 24
  d2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  // ustaw format 8n1
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
  d6:	86 e0       	ldi	r24, 0x06	; 6
  d8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  dc:	08 95       	ret

000000de <LCD_LoadCGRAM>:
}

FILE hd44780_file;

void LCD_LoadCGRAM()
{
  de:	1f 93       	push	r17
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29

  LCD_WriteCommand(HD44780_CGRAM_SET);
  e4:	80 e4       	ldi	r24, 0x40	; 64
  e6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_WriteCommand>
  ea:	15 e0       	ldi	r17, 0x05	; 5
  uint8_t bar = 0x10;
  ec:	d0 e1       	ldi	r29, 0x10	; 16
}

FILE hd44780_file;

void LCD_LoadCGRAM()
{
  ee:	c7 e0       	ldi	r28, 0x07	; 7

  LCD_WriteCommand(HD44780_CGRAM_SET);
  uint8_t bar = 0x10;
  for(uint8_t i=0; i < 5; i++){
    for(uint8_t j=0; j < 7; j++){
      LCD_WriteData(bar);
  f0:	8d 2f       	mov	r24, r29
  f2:	0e 94 30 01 	call	0x260	; 0x260 <LCD_WriteData>
  f6:	c1 50       	subi	r28, 0x01	; 1
{

  LCD_WriteCommand(HD44780_CGRAM_SET);
  uint8_t bar = 0x10;
  for(uint8_t i=0; i < 5; i++){
    for(uint8_t j=0; j < 7; j++){
  f8:	d9 f7       	brne	.-10     	; 0xf0 <LCD_LoadCGRAM+0x12>
      LCD_WriteData(bar);
    }
    LCD_WriteData(0);
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	0e 94 30 01 	call	0x260	; 0x260 <LCD_WriteData>
    bar |= (bar >> 1);
 100:	8d 2f       	mov	r24, r29
 102:	86 95       	lsr	r24
 104:	d8 2b       	or	r29, r24
 106:	11 50       	subi	r17, 0x01	; 1
void LCD_LoadCGRAM()
{

  LCD_WriteCommand(HD44780_CGRAM_SET);
  uint8_t bar = 0x10;
  for(uint8_t i=0; i < 5; i++){
 108:	91 f7       	brne	.-28     	; 0xee <LCD_LoadCGRAM+0x10>
    }
    LCD_WriteData(0);
    bar |= (bar >> 1);
  }
  
  LCD_WriteCommand(HD44780_DDRAM_SET);
 10a:	80 e8       	ldi	r24, 0x80	; 128
}
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	1f 91       	pop	r17
    }
    LCD_WriteData(0);
    bar |= (bar >> 1);
  }
  
  LCD_WriteCommand(HD44780_DDRAM_SET);
 112:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <LCD_WriteCommand>

00000116 <_LCD_OutNibble>:
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
 116:	80 ff       	sbrs	r24, 0
 118:	0b c0       	rjmp	.+22     	; 0x130 <_LCD_OutNibble+0x1a>
	LCD_DB4_PORT |= LCD_DB4;
 11a:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
 11c:	81 ff       	sbrs	r24, 1
 11e:	0b c0       	rjmp	.+22     	; 0x136 <_LCD_OutNibble+0x20>
	LCD_DB5_PORT |= LCD_DB5;
 120:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
 122:	82 ff       	sbrs	r24, 2
 124:	0b c0       	rjmp	.+22     	; 0x13c <_LCD_OutNibble+0x26>
	LCD_DB6_PORT |= LCD_DB6;
 126:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
 128:	83 fd       	sbrc	r24, 3
 12a:	0b c0       	rjmp	.+22     	; 0x142 <_LCD_OutNibble+0x2c>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
 12c:	5b 98       	cbi	0x0b, 3	; 11
 12e:	08 95       	ret
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
 130:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
 132:	81 fd       	sbrc	r24, 1
 134:	f5 cf       	rjmp	.-22     	; 0x120 <_LCD_OutNibble+0xa>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
 136:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
 138:	82 fd       	sbrc	r24, 2
 13a:	f5 cf       	rjmp	.-22     	; 0x126 <_LCD_OutNibble+0x10>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
 13c:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
 13e:	83 ff       	sbrs	r24, 3
 140:	f5 cf       	rjmp	.-22     	; 0x12c <_LCD_OutNibble+0x16>
	LCD_DB7_PORT |= LCD_DB7;
 142:	5b 9a       	sbi	0x0b, 3	; 11
 144:	08 95       	ret

00000146 <_LCD_Write>:
// Funkcja zapisu bajtu do wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
 146:	5f 9a       	sbi	0x0b, 7	; 11
_LCD_OutNibble(dataToWrite >> 4);
 148:	98 2f       	mov	r25, r24
 14a:	92 95       	swap	r25
 14c:	9f 70       	andi	r25, 0x0F	; 15
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
 14e:	90 ff       	sbrs	r25, 0
 150:	20 c0       	rjmp	.+64     	; 0x192 <_LCD_Write+0x4c>
	LCD_DB4_PORT |= LCD_DB4;
 152:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
 154:	91 ff       	sbrs	r25, 1
 156:	20 c0       	rjmp	.+64     	; 0x198 <_LCD_Write+0x52>
	LCD_DB5_PORT |= LCD_DB5;
 158:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
 15a:	92 ff       	sbrs	r25, 2
 15c:	20 c0       	rjmp	.+64     	; 0x19e <_LCD_Write+0x58>
	LCD_DB6_PORT |= LCD_DB6;
 15e:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
 160:	98 70       	andi	r25, 0x08	; 8
 162:	01 f5       	brne	.+64     	; 0x1a4 <_LCD_Write+0x5e>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
 164:	5b 98       	cbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
 166:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
 168:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
 16a:	80 ff       	sbrs	r24, 0
 16c:	20 c0       	rjmp	.+64     	; 0x1ae <_LCD_Write+0x68>
	LCD_DB4_PORT |= LCD_DB4;
 16e:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
 170:	81 ff       	sbrs	r24, 1
 172:	20 c0       	rjmp	.+64     	; 0x1b4 <_LCD_Write+0x6e>
	LCD_DB5_PORT |= LCD_DB5;
 174:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
 176:	82 ff       	sbrs	r24, 2
 178:	20 c0       	rjmp	.+64     	; 0x1ba <_LCD_Write+0x74>
	LCD_DB6_PORT |= LCD_DB6;
 17a:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
 17c:	83 fd       	sbrc	r24, 3
 17e:	20 c0       	rjmp	.+64     	; 0x1c0 <_LCD_Write+0x7a>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
 180:	5b 98       	cbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
 182:	5f 98       	cbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	87 ec       	ldi	r24, 0xC7	; 199
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <_LCD_Write+0x42>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <_LCD_Write+0x48>
 18e:	00 00       	nop
 190:	08 95       	ret
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
 192:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
 194:	91 fd       	sbrc	r25, 1
 196:	e0 cf       	rjmp	.-64     	; 0x158 <_LCD_Write+0x12>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
 198:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
 19a:	92 fd       	sbrc	r25, 2
 19c:	e0 cf       	rjmp	.-64     	; 0x15e <_LCD_Write+0x18>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
 19e:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
 1a0:	98 70       	andi	r25, 0x08	; 8
 1a2:	01 f3       	breq	.-64     	; 0x164 <_LCD_Write+0x1e>
	LCD_DB7_PORT |= LCD_DB7;
 1a4:	5b 9a       	sbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
 1a6:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
 1a8:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
 1aa:	80 fd       	sbrc	r24, 0
 1ac:	e0 cf       	rjmp	.-64     	; 0x16e <_LCD_Write+0x28>
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
 1ae:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
 1b0:	81 fd       	sbrc	r24, 1
 1b2:	e0 cf       	rjmp	.-64     	; 0x174 <_LCD_Write+0x2e>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
 1b4:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
 1b6:	82 fd       	sbrc	r24, 2
 1b8:	e0 cf       	rjmp	.-64     	; 0x17a <_LCD_Write+0x34>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
 1ba:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
 1bc:	83 ff       	sbrs	r24, 3
 1be:	e0 cf       	rjmp	.-64     	; 0x180 <_LCD_Write+0x3a>
	LCD_DB7_PORT |= LCD_DB7;
 1c0:	5b 9a       	sbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
 1c2:	5f 98       	cbi	0x0b, 7	; 11
 1c4:	87 ec       	ldi	r24, 0xC7	; 199
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <_LCD_Write+0x82>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <_LCD_Write+0x88>
 1ce:	00 00       	nop
 1d0:	08 95       	ret

000001d2 <LCD_WriteCommand>:
// Funkcja zapisu rozkazu do wyświetlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
LCD_RS_PORT &= ~LCD_RS;
 1d2:	28 98       	cbi	0x05, 0	; 5
// Funkcja zapisu bajtu do wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
 1d4:	5f 9a       	sbi	0x0b, 7	; 11
_LCD_OutNibble(dataToWrite >> 4);
 1d6:	98 2f       	mov	r25, r24
 1d8:	92 95       	swap	r25
 1da:	9f 70       	andi	r25, 0x0F	; 15
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
 1dc:	90 ff       	sbrs	r25, 0
 1de:	20 c0       	rjmp	.+64     	; 0x220 <LCD_WriteCommand+0x4e>
	LCD_DB4_PORT |= LCD_DB4;
 1e0:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
 1e2:	91 ff       	sbrs	r25, 1
 1e4:	20 c0       	rjmp	.+64     	; 0x226 <LCD_WriteCommand+0x54>
	LCD_DB5_PORT |= LCD_DB5;
 1e6:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
 1e8:	92 ff       	sbrs	r25, 2
 1ea:	20 c0       	rjmp	.+64     	; 0x22c <LCD_WriteCommand+0x5a>
	LCD_DB6_PORT |= LCD_DB6;
 1ec:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
 1ee:	98 70       	andi	r25, 0x08	; 8
 1f0:	01 f5       	brne	.+64     	; 0x232 <LCD_WriteCommand+0x60>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
 1f2:	5b 98       	cbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
 1f4:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
 1f6:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
 1f8:	80 ff       	sbrs	r24, 0
 1fa:	20 c0       	rjmp	.+64     	; 0x23c <LCD_WriteCommand+0x6a>
	LCD_DB4_PORT |= LCD_DB4;
 1fc:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
 1fe:	81 ff       	sbrs	r24, 1
 200:	20 c0       	rjmp	.+64     	; 0x242 <LCD_WriteCommand+0x70>
	LCD_DB5_PORT |= LCD_DB5;
 202:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
 204:	82 ff       	sbrs	r24, 2
 206:	20 c0       	rjmp	.+64     	; 0x248 <LCD_WriteCommand+0x76>
	LCD_DB6_PORT |= LCD_DB6;
 208:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
 20a:	83 fd       	sbrc	r24, 3
 20c:	20 c0       	rjmp	.+64     	; 0x24e <LCD_WriteCommand+0x7c>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
 20e:	5b 98       	cbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
 210:	5f 98       	cbi	0x0b, 7	; 11
 212:	87 ec       	ldi	r24, 0xC7	; 199
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <LCD_WriteCommand+0x44>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <LCD_WriteCommand+0x4a>
 21c:	00 00       	nop
 21e:	08 95       	ret
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
 220:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
 222:	91 fd       	sbrc	r25, 1
 224:	e0 cf       	rjmp	.-64     	; 0x1e6 <LCD_WriteCommand+0x14>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
 226:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
 228:	92 fd       	sbrc	r25, 2
 22a:	e0 cf       	rjmp	.-64     	; 0x1ec <LCD_WriteCommand+0x1a>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
 22c:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
 22e:	98 70       	andi	r25, 0x08	; 8
 230:	01 f3       	breq	.-64     	; 0x1f2 <LCD_WriteCommand+0x20>
	LCD_DB7_PORT |= LCD_DB7;
 232:	5b 9a       	sbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
 234:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
 236:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
 238:	80 fd       	sbrc	r24, 0
 23a:	e0 cf       	rjmp	.-64     	; 0x1fc <LCD_WriteCommand+0x2a>
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
 23c:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
 23e:	81 fd       	sbrc	r24, 1
 240:	e0 cf       	rjmp	.-64     	; 0x202 <LCD_WriteCommand+0x30>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
 242:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
 244:	82 fd       	sbrc	r24, 2
 246:	e0 cf       	rjmp	.-64     	; 0x208 <LCD_WriteCommand+0x36>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
 248:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
 24a:	83 ff       	sbrs	r24, 3
 24c:	e0 cf       	rjmp	.-64     	; 0x20e <LCD_WriteCommand+0x3c>
	LCD_DB7_PORT |= LCD_DB7;
 24e:	5b 9a       	sbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
 250:	5f 98       	cbi	0x0b, 7	; 11
 252:	87 ec       	ldi	r24, 0xC7	; 199
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <LCD_WriteCommand+0x84>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <LCD_WriteCommand+0x8a>
 25c:	00 00       	nop
 25e:	08 95       	ret

00000260 <LCD_WriteData>:
// Funkcja zapisu danych do pamięci wyświetlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(unsigned char dataToWrite)
{
LCD_RS_PORT |= LCD_RS;
 260:	28 9a       	sbi	0x05, 0	; 5
// Funkcja zapisu bajtu do wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
 262:	5f 9a       	sbi	0x0b, 7	; 11
_LCD_OutNibble(dataToWrite >> 4);
 264:	98 2f       	mov	r25, r24
 266:	92 95       	swap	r25
 268:	9f 70       	andi	r25, 0x0F	; 15
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
 26a:	90 ff       	sbrs	r25, 0
 26c:	20 c0       	rjmp	.+64     	; 0x2ae <LCD_WriteData+0x4e>
	LCD_DB4_PORT |= LCD_DB4;
 26e:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
 270:	91 ff       	sbrs	r25, 1
 272:	20 c0       	rjmp	.+64     	; 0x2b4 <LCD_WriteData+0x54>
	LCD_DB5_PORT |= LCD_DB5;
 274:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
 276:	92 ff       	sbrs	r25, 2
 278:	20 c0       	rjmp	.+64     	; 0x2ba <LCD_WriteData+0x5a>
	LCD_DB6_PORT |= LCD_DB6;
 27a:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
 27c:	98 70       	andi	r25, 0x08	; 8
 27e:	01 f5       	brne	.+64     	; 0x2c0 <LCD_WriteData+0x60>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
 280:	5b 98       	cbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
 282:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
 284:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
 286:	80 ff       	sbrs	r24, 0
 288:	20 c0       	rjmp	.+64     	; 0x2ca <LCD_WriteData+0x6a>
	LCD_DB4_PORT |= LCD_DB4;
 28a:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
 28c:	81 ff       	sbrs	r24, 1
 28e:	20 c0       	rjmp	.+64     	; 0x2d0 <LCD_WriteData+0x70>
	LCD_DB5_PORT |= LCD_DB5;
 290:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
 292:	82 ff       	sbrs	r24, 2
 294:	20 c0       	rjmp	.+64     	; 0x2d6 <LCD_WriteData+0x76>
	LCD_DB6_PORT |= LCD_DB6;
 296:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
 298:	83 fd       	sbrc	r24, 3
 29a:	20 c0       	rjmp	.+64     	; 0x2dc <LCD_WriteData+0x7c>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
 29c:	5b 98       	cbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
 29e:	5f 98       	cbi	0x0b, 7	; 11
 2a0:	87 ec       	ldi	r24, 0xC7	; 199
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <LCD_WriteData+0x44>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <LCD_WriteData+0x4a>
 2aa:	00 00       	nop
 2ac:	08 95       	ret
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
 2ae:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
 2b0:	91 fd       	sbrc	r25, 1
 2b2:	e0 cf       	rjmp	.-64     	; 0x274 <LCD_WriteData+0x14>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
 2b4:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
 2b6:	92 fd       	sbrc	r25, 2
 2b8:	e0 cf       	rjmp	.-64     	; 0x27a <LCD_WriteData+0x1a>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
 2ba:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
 2bc:	98 70       	andi	r25, 0x08	; 8
 2be:	01 f3       	breq	.-64     	; 0x280 <LCD_WriteData+0x20>
	LCD_DB7_PORT |= LCD_DB7;
 2c0:	5b 9a       	sbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
 2c2:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
 2c4:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
 2c6:	80 fd       	sbrc	r24, 0
 2c8:	e0 cf       	rjmp	.-64     	; 0x28a <LCD_WriteData+0x2a>
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
 2ca:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
 2cc:	81 fd       	sbrc	r24, 1
 2ce:	e0 cf       	rjmp	.-64     	; 0x290 <LCD_WriteData+0x30>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
 2d0:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
 2d2:	82 fd       	sbrc	r24, 2
 2d4:	e0 cf       	rjmp	.-64     	; 0x296 <LCD_WriteData+0x36>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
 2d6:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
 2d8:	83 ff       	sbrs	r24, 3
 2da:	e0 cf       	rjmp	.-64     	; 0x29c <LCD_WriteData+0x3c>
	LCD_DB7_PORT |= LCD_DB7;
 2dc:	5b 9a       	sbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
 2de:	5f 98       	cbi	0x0b, 7	; 11
 2e0:	87 ec       	ldi	r24, 0xC7	; 199
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <LCD_WriteData+0x84>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <LCD_WriteData+0x8a>
 2ea:	00 00       	nop
 2ec:	08 95       	ret

000002ee <LCD_WriteText>:
//
// Funkcja wyświetlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
 2ee:	fc 01       	movw	r30, r24
while(*text)
 2f0:	90 81       	ld	r25, Z
 2f2:	99 23       	and	r25, r25
 2f4:	09 f4       	brne	.+2      	; 0x2f8 <LCD_WriteText+0xa>
 2f6:	44 c0       	rjmp	.+136    	; 0x380 <LCD_WriteText+0x92>
 2f8:	31 96       	adiw	r30, 0x01	; 1
 2fa:	22 c0       	rjmp	.+68     	; 0x340 <LCD_WriteText+0x52>
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
 2fc:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
 2fe:	21 ff       	sbrs	r18, 1
 300:	29 c0       	rjmp	.+82     	; 0x354 <LCD_WriteText+0x66>
	LCD_DB5_PORT |= LCD_DB5;
 302:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
 304:	22 ff       	sbrs	r18, 2
 306:	29 c0       	rjmp	.+82     	; 0x35a <LCD_WriteText+0x6c>
	LCD_DB6_PORT |= LCD_DB6;
 308:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
 30a:	28 70       	andi	r18, 0x08	; 8
 30c:	49 f5       	brne	.+82     	; 0x360 <LCD_WriteText+0x72>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
 30e:	5b 98       	cbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
 310:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
 312:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
 314:	90 ff       	sbrs	r25, 0
 316:	29 c0       	rjmp	.+82     	; 0x36a <LCD_WriteText+0x7c>
	LCD_DB4_PORT |= LCD_DB4;
 318:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
 31a:	91 ff       	sbrs	r25, 1
 31c:	29 c0       	rjmp	.+82     	; 0x370 <LCD_WriteText+0x82>
	LCD_DB5_PORT |= LCD_DB5;
 31e:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
 320:	92 ff       	sbrs	r25, 2
 322:	29 c0       	rjmp	.+82     	; 0x376 <LCD_WriteText+0x88>
	LCD_DB6_PORT |= LCD_DB6;
 324:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
 326:	93 fd       	sbrc	r25, 3
 328:	29 c0       	rjmp	.+82     	; 0x37c <LCD_WriteText+0x8e>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
 32a:	5b 98       	cbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
 32c:	5f 98       	cbi	0x0b, 7	; 11
 32e:	87 ec       	ldi	r24, 0xC7	; 199
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <LCD_WriteText+0x44>
 336:	00 c0       	rjmp	.+0      	; 0x338 <LCD_WriteText+0x4a>
 338:	00 00       	nop
// Funkcja wyświetlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
while(*text)
 33a:	91 91       	ld	r25, Z+
 33c:	99 23       	and	r25, r25
 33e:	01 f1       	breq	.+64     	; 0x380 <LCD_WriteText+0x92>
// Funkcja zapisu danych do pamięci wyświetlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(unsigned char dataToWrite)
{
LCD_RS_PORT |= LCD_RS;
 340:	28 9a       	sbi	0x05, 0	; 5
// Funkcja zapisu bajtu do wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
 342:	5f 9a       	sbi	0x0b, 7	; 11
_LCD_OutNibble(dataToWrite >> 4);
 344:	29 2f       	mov	r18, r25
 346:	22 95       	swap	r18
 348:	2f 70       	andi	r18, 0x0F	; 15
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
 34a:	20 fd       	sbrc	r18, 0
 34c:	d7 cf       	rjmp	.-82     	; 0x2fc <LCD_WriteText+0xe>
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
 34e:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
 350:	21 fd       	sbrc	r18, 1
 352:	d7 cf       	rjmp	.-82     	; 0x302 <LCD_WriteText+0x14>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
 354:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
 356:	22 fd       	sbrc	r18, 2
 358:	d7 cf       	rjmp	.-82     	; 0x308 <LCD_WriteText+0x1a>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
 35a:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
 35c:	28 70       	andi	r18, 0x08	; 8
 35e:	b9 f2       	breq	.-82     	; 0x30e <LCD_WriteText+0x20>
	LCD_DB7_PORT |= LCD_DB7;
 360:	5b 9a       	sbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
 362:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
 364:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
 366:	90 fd       	sbrc	r25, 0
 368:	d7 cf       	rjmp	.-82     	; 0x318 <LCD_WriteText+0x2a>
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
 36a:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
 36c:	91 fd       	sbrc	r25, 1
 36e:	d7 cf       	rjmp	.-82     	; 0x31e <LCD_WriteText+0x30>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
 370:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
 372:	92 fd       	sbrc	r25, 2
 374:	d7 cf       	rjmp	.-82     	; 0x324 <LCD_WriteText+0x36>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
 376:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
 378:	93 ff       	sbrs	r25, 3
 37a:	d7 cf       	rjmp	.-82     	; 0x32a <LCD_WriteText+0x3c>
	LCD_DB7_PORT |= LCD_DB7;
 37c:	5b 9a       	sbi	0x0b, 3	; 11
 37e:	d6 cf       	rjmp	.-84     	; 0x32c <LCD_WriteText+0x3e>
 380:	08 95       	ret

00000382 <LCD_GoTo>:
// Funkcja ustawienia współrzędnych ekranowych
//
//-------------------------------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
 382:	90 e4       	ldi	r25, 0x40	; 64
 384:	69 9f       	mul	r22, r25
 386:	80 0d       	add	r24, r0
 388:	11 24       	eor	r1, r1
 38a:	80 68       	ori	r24, 0x80	; 128
// Funkcja zapisu rozkazu do wyświetlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
LCD_RS_PORT &= ~LCD_RS;
 38c:	28 98       	cbi	0x05, 0	; 5
// Funkcja zapisu bajtu do wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
 38e:	5f 9a       	sbi	0x0b, 7	; 11
_LCD_OutNibble(dataToWrite >> 4);
 390:	98 2f       	mov	r25, r24
 392:	92 95       	swap	r25
 394:	9f 70       	andi	r25, 0x0F	; 15
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
 396:	90 ff       	sbrs	r25, 0
 398:	1e c0       	rjmp	.+60     	; 0x3d6 <LCD_GoTo+0x54>
	LCD_DB4_PORT |= LCD_DB4;
 39a:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
 39c:	91 ff       	sbrs	r25, 1
 39e:	1e c0       	rjmp	.+60     	; 0x3dc <LCD_GoTo+0x5a>
	LCD_DB5_PORT |= LCD_DB5;
 3a0:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
 3a2:	92 ff       	sbrs	r25, 2
 3a4:	1e c0       	rjmp	.+60     	; 0x3e2 <LCD_GoTo+0x60>
	LCD_DB6_PORT |= LCD_DB6;
 3a6:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
	LCD_DB7_PORT |= LCD_DB7;
 3a8:	5b 9a       	sbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
 3aa:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
 3ac:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
 3ae:	80 ff       	sbrs	r24, 0
 3b0:	1e c0       	rjmp	.+60     	; 0x3ee <LCD_GoTo+0x6c>
	LCD_DB4_PORT |= LCD_DB4;
 3b2:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
 3b4:	81 ff       	sbrs	r24, 1
 3b6:	1e c0       	rjmp	.+60     	; 0x3f4 <LCD_GoTo+0x72>
	LCD_DB5_PORT |= LCD_DB5;
 3b8:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
 3ba:	82 ff       	sbrs	r24, 2
 3bc:	1e c0       	rjmp	.+60     	; 0x3fa <LCD_GoTo+0x78>
	LCD_DB6_PORT |= LCD_DB6;
 3be:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
 3c0:	83 fd       	sbrc	r24, 3
 3c2:	1e c0       	rjmp	.+60     	; 0x400 <__EEPROM_REGION_LENGTH__>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
 3c4:	5b 98       	cbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
 3c6:	5f 98       	cbi	0x0b, 7	; 11
 3c8:	87 ec       	ldi	r24, 0xC7	; 199
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <LCD_GoTo+0x4a>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <LCD_GoTo+0x50>
 3d2:	00 00       	nop
 3d4:	08 95       	ret
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
 3d6:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
 3d8:	91 fd       	sbrc	r25, 1
 3da:	e2 cf       	rjmp	.-60     	; 0x3a0 <LCD_GoTo+0x1e>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
 3dc:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
 3de:	92 fd       	sbrc	r25, 2
 3e0:	e2 cf       	rjmp	.-60     	; 0x3a6 <LCD_GoTo+0x24>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
 3e2:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
	LCD_DB7_PORT |= LCD_DB7;
 3e4:	5b 9a       	sbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
 3e6:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
 3e8:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
 3ea:	80 fd       	sbrc	r24, 0
 3ec:	e2 cf       	rjmp	.-60     	; 0x3b2 <LCD_GoTo+0x30>
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
 3ee:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
 3f0:	81 fd       	sbrc	r24, 1
 3f2:	e2 cf       	rjmp	.-60     	; 0x3b8 <LCD_GoTo+0x36>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
 3f4:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
 3f6:	82 fd       	sbrc	r24, 2
 3f8:	e2 cf       	rjmp	.-60     	; 0x3be <LCD_GoTo+0x3c>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
 3fa:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
 3fc:	83 ff       	sbrs	r24, 3
 3fe:	e2 cf       	rjmp	.-60     	; 0x3c4 <LCD_GoTo+0x42>
	LCD_DB7_PORT |= LCD_DB7;
 400:	5b 9a       	sbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
 402:	5f 98       	cbi	0x0b, 7	; 11
 404:	87 ec       	ldi	r24, 0xC7	; 199
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	01 97       	sbiw	r24, 0x01	; 1
 40a:	f1 f7       	brne	.-4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40e:	00 00       	nop
 410:	08 95       	ret

00000412 <LCD_Clear>:
// Funkcja zapisu rozkazu do wyświetlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
LCD_RS_PORT &= ~LCD_RS;
 412:	28 98       	cbi	0x05, 0	; 5
// Funkcja zapisu bajtu do wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
 414:	5f 9a       	sbi	0x0b, 7	; 11
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
 416:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
 418:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
 41a:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
 41c:	5b 98       	cbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
 41e:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
 420:	5f 9a       	sbi	0x0b, 7	; 11
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
 422:	5e 9a       	sbi	0x0b, 6	; 11
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
 424:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
 426:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
 428:	5b 98       	cbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
 42a:	5f 98       	cbi	0x0b, 7	; 11
 42c:	87 ec       	ldi	r24, 0xC7	; 199
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <LCD_Clear+0x1e>
 434:	00 c0       	rjmp	.+0      	; 0x436 <LCD_Clear+0x24>
 436:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 438:	8f e3       	ldi	r24, 0x3F	; 63
 43a:	9f e1       	ldi	r25, 0x1F	; 31
 43c:	01 97       	sbiw	r24, 0x01	; 1
 43e:	f1 f7       	brne	.-4      	; 0x43c <LCD_Clear+0x2a>
 440:	00 c0       	rjmp	.+0      	; 0x442 <LCD_Clear+0x30>
 442:	00 00       	nop
 444:	08 95       	ret

00000446 <LCD_Home>:
// Funkcja zapisu rozkazu do wyświetlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
LCD_RS_PORT &= ~LCD_RS;
 446:	28 98       	cbi	0x05, 0	; 5
// Funkcja zapisu bajtu do wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
 448:	5f 9a       	sbi	0x0b, 7	; 11
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
 44a:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
 44c:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
 44e:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
 450:	5b 98       	cbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
 452:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
 454:	5f 9a       	sbi	0x0b, 7	; 11
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
 456:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
	LCD_DB5_PORT |= LCD_DB5;
 458:	5d 9a       	sbi	0x0b, 5	; 11
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
 45a:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
 45c:	5b 98       	cbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
 45e:	5f 98       	cbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 460:	87 ec       	ldi	r24, 0xC7	; 199
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <LCD_Home+0x1e>
 468:	00 c0       	rjmp	.+0      	; 0x46a <LCD_Home+0x24>
 46a:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 46c:	8f e3       	ldi	r24, 0x3F	; 63
 46e:	9f e1       	ldi	r25, 0x1F	; 31
 470:	01 97       	sbiw	r24, 0x01	; 1
 472:	f1 f7       	brne	.-4      	; 0x470 <LCD_Home+0x2a>
 474:	00 c0       	rjmp	.+0      	; 0x476 <LCD_Home+0x30>
 476:	00 00       	nop
 478:	08 95       	ret

0000047a <LCD_Initialize>:
 47a:	56 9a       	sbi	0x0a, 6	; 10
 47c:	55 9a       	sbi	0x0a, 5	; 10
 47e:	54 9a       	sbi	0x0a, 4	; 10
 480:	53 9a       	sbi	0x0a, 3	; 10
 482:	57 9a       	sbi	0x0a, 7	; 10
 484:	20 9a       	sbi	0x04, 0	; 4
 486:	8f e5       	ldi	r24, 0x5F	; 95
 488:	9a ee       	ldi	r25, 0xEA	; 234
 48a:	01 97       	sbiw	r24, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <LCD_Initialize+0x10>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <LCD_Initialize+0x16>
 490:	00 00       	nop
 492:	28 98       	cbi	0x05, 0	; 5
 494:	5f 98       	cbi	0x0b, 7	; 11
 496:	83 e0       	ldi	r24, 0x03	; 3
 498:	5f 9a       	sbi	0x0b, 7	; 11
 49a:	5e 9a       	sbi	0x0b, 6	; 11
 49c:	5d 9a       	sbi	0x0b, 5	; 11
 49e:	5c 98       	cbi	0x0b, 4	; 11
 4a0:	5b 98       	cbi	0x0b, 3	; 11
 4a2:	5f 98       	cbi	0x0b, 7	; 11
 4a4:	ef e1       	ldi	r30, 0x1F	; 31
 4a6:	fe e4       	ldi	r31, 0x4E	; 78
 4a8:	31 97       	sbiw	r30, 0x01	; 1
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <LCD_Initialize+0x2e>
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <LCD_Initialize+0x34>
 4ae:	00 00       	nop
 4b0:	81 50       	subi	r24, 0x01	; 1
 4b2:	91 f7       	brne	.-28     	; 0x498 <LCD_Initialize+0x1e>
 4b4:	5f 9a       	sbi	0x0b, 7	; 11
 4b6:	5e 98       	cbi	0x0b, 6	; 11
 4b8:	5d 9a       	sbi	0x0b, 5	; 11
 4ba:	5c 98       	cbi	0x0b, 4	; 11
 4bc:	5b 98       	cbi	0x0b, 3	; 11
 4be:	5f 98       	cbi	0x0b, 7	; 11
 4c0:	8f e9       	ldi	r24, 0x9F	; 159
 4c2:	9f e0       	ldi	r25, 0x0F	; 15
 4c4:	01 97       	sbiw	r24, 0x01	; 1
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <LCD_Initialize+0x4a>
 4c8:	00 c0       	rjmp	.+0      	; 0x4ca <LCD_Initialize+0x50>
 4ca:	00 00       	nop
 4cc:	28 98       	cbi	0x05, 0	; 5
 4ce:	5f 9a       	sbi	0x0b, 7	; 11
 4d0:	5e 98       	cbi	0x0b, 6	; 11
 4d2:	5d 9a       	sbi	0x0b, 5	; 11
 4d4:	5c 98       	cbi	0x0b, 4	; 11
 4d6:	5b 98       	cbi	0x0b, 3	; 11
 4d8:	5f 98       	cbi	0x0b, 7	; 11
 4da:	5f 9a       	sbi	0x0b, 7	; 11
 4dc:	5e 98       	cbi	0x0b, 6	; 11
 4de:	5d 98       	cbi	0x0b, 5	; 11
 4e0:	5c 98       	cbi	0x0b, 4	; 11
 4e2:	5b 9a       	sbi	0x0b, 3	; 11
 4e4:	5f 98       	cbi	0x0b, 7	; 11
 4e6:	e7 ec       	ldi	r30, 0xC7	; 199
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	31 97       	sbiw	r30, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <LCD_Initialize+0x70>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <LCD_Initialize+0x76>
 4f0:	00 00       	nop
 4f2:	28 98       	cbi	0x05, 0	; 5
 4f4:	5f 9a       	sbi	0x0b, 7	; 11
 4f6:	5e 98       	cbi	0x0b, 6	; 11
 4f8:	5d 98       	cbi	0x0b, 5	; 11
 4fa:	5c 98       	cbi	0x0b, 4	; 11
 4fc:	5b 98       	cbi	0x0b, 3	; 11
 4fe:	5f 98       	cbi	0x0b, 7	; 11
 500:	5f 9a       	sbi	0x0b, 7	; 11
 502:	5e 98       	cbi	0x0b, 6	; 11
 504:	5d 98       	cbi	0x0b, 5	; 11
 506:	5c 98       	cbi	0x0b, 4	; 11
 508:	5b 9a       	sbi	0x0b, 3	; 11
 50a:	5f 98       	cbi	0x0b, 7	; 11
 50c:	87 ec       	ldi	r24, 0xC7	; 199
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	01 97       	sbiw	r24, 0x01	; 1
 512:	f1 f7       	brne	.-4      	; 0x510 <LCD_Initialize+0x96>
 514:	00 c0       	rjmp	.+0      	; 0x516 <LCD_Initialize+0x9c>
 516:	00 00       	nop
 518:	28 98       	cbi	0x05, 0	; 5
 51a:	5f 9a       	sbi	0x0b, 7	; 11
 51c:	5e 98       	cbi	0x0b, 6	; 11
 51e:	5d 98       	cbi	0x0b, 5	; 11
 520:	5c 98       	cbi	0x0b, 4	; 11
 522:	5b 98       	cbi	0x0b, 3	; 11
 524:	5f 98       	cbi	0x0b, 7	; 11
 526:	5f 9a       	sbi	0x0b, 7	; 11
 528:	5e 9a       	sbi	0x0b, 6	; 11
 52a:	5d 98       	cbi	0x0b, 5	; 11
 52c:	5c 98       	cbi	0x0b, 4	; 11
 52e:	5b 98       	cbi	0x0b, 3	; 11
 530:	5f 98       	cbi	0x0b, 7	; 11
 532:	e7 ec       	ldi	r30, 0xC7	; 199
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	31 97       	sbiw	r30, 0x01	; 1
 538:	f1 f7       	brne	.-4      	; 0x536 <LCD_Initialize+0xbc>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <LCD_Initialize+0xc2>
 53c:	00 00       	nop
 53e:	8f e3       	ldi	r24, 0x3F	; 63
 540:	9f e1       	ldi	r25, 0x1F	; 31
 542:	01 97       	sbiw	r24, 0x01	; 1
 544:	f1 f7       	brne	.-4      	; 0x542 <LCD_Initialize+0xc8>
 546:	00 c0       	rjmp	.+0      	; 0x548 <LCD_Initialize+0xce>
 548:	00 00       	nop
 54a:	28 98       	cbi	0x05, 0	; 5
 54c:	5f 9a       	sbi	0x0b, 7	; 11
 54e:	5e 98       	cbi	0x0b, 6	; 11
 550:	5d 98       	cbi	0x0b, 5	; 11
 552:	5c 98       	cbi	0x0b, 4	; 11
 554:	5b 98       	cbi	0x0b, 3	; 11
 556:	5f 98       	cbi	0x0b, 7	; 11
 558:	5f 9a       	sbi	0x0b, 7	; 11
 55a:	5e 98       	cbi	0x0b, 6	; 11
 55c:	5d 9a       	sbi	0x0b, 5	; 11
 55e:	5c 9a       	sbi	0x0b, 4	; 11
 560:	5b 98       	cbi	0x0b, 3	; 11
 562:	5f 98       	cbi	0x0b, 7	; 11
 564:	e7 ec       	ldi	r30, 0xC7	; 199
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	31 97       	sbiw	r30, 0x01	; 1
 56a:	f1 f7       	brne	.-4      	; 0x568 <LCD_Initialize+0xee>
 56c:	00 c0       	rjmp	.+0      	; 0x56e <LCD_Initialize+0xf4>
 56e:	00 00       	nop
 570:	28 98       	cbi	0x05, 0	; 5
 572:	5f 9a       	sbi	0x0b, 7	; 11
 574:	5e 98       	cbi	0x0b, 6	; 11
 576:	5d 98       	cbi	0x0b, 5	; 11
 578:	5c 98       	cbi	0x0b, 4	; 11
 57a:	5b 98       	cbi	0x0b, 3	; 11
 57c:	5f 98       	cbi	0x0b, 7	; 11
 57e:	5f 9a       	sbi	0x0b, 7	; 11
 580:	5e 98       	cbi	0x0b, 6	; 11
 582:	5d 98       	cbi	0x0b, 5	; 11
 584:	5c 9a       	sbi	0x0b, 4	; 11
 586:	5b 9a       	sbi	0x0b, 3	; 11
 588:	5f 98       	cbi	0x0b, 7	; 11
 58a:	87 ec       	ldi	r24, 0xC7	; 199
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	01 97       	sbiw	r24, 0x01	; 1
 590:	f1 f7       	brne	.-4      	; 0x58e <LCD_Initialize+0x114>
 592:	00 c0       	rjmp	.+0      	; 0x594 <LCD_Initialize+0x11a>
 594:	00 00       	nop
 596:	08 95       	ret

00000598 <main>:

// inicjalizacja UART
void uart_init()
{
  // ustaw baudrate
  UBRR0 = UBRR_VALUE;
 598:	87 e6       	ldi	r24, 0x67	; 103
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 5a0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  // wyczyść rejestr UCSR0A
  UCSR0A = 0;
 5a4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  // włącz odbiornik i nadajnik
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
 5a8:	88 e1       	ldi	r24, 0x18	; 24
 5aa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  // ustaw format 8n1
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
 5ae:	86 e0       	ldi	r24, 0x06	; 6
 5b0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>

int main()
{
  uart_init();
  // skonfiguruj wyświetlacz
  LCD_Initialize();
 5b4:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_Initialize>
  LCD_LoadCGRAM();
 5b8:	0e 94 6f 00 	call	0xde	; 0xde <LCD_LoadCGRAM>
  LCD_Clear();
 5bc:	0e 94 09 02 	call	0x412	; 0x412 <LCD_Clear>
  // skonfiguruj strumienie wyjściowe
  fdev_setup_stream(&hd44780_file, hd44780_transmit, uart_receive, _FDEV_SETUP_RW);
 5c0:	8e e0       	ldi	r24, 0x0E	; 14
 5c2:	91 e0       	ldi	r25, 0x01	; 1
 5c4:	2b e5       	ldi	r18, 0x5B	; 91
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <__data_end+0x9>
 5cc:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <__data_end+0x8>
 5d0:	23 e5       	ldi	r18, 0x53	; 83
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <__data_end+0xb>
 5d8:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <__data_end+0xa>
 5dc:	23 e0       	ldi	r18, 0x03	; 3
 5de:	20 93 11 01 	sts	0x0111, r18	; 0x800111 <__data_end+0x3>
 5e2:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__data_end+0xd>
 5e6:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end+0xc>
  stdout = stderr = &hd44780_file;
 5ea:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__iob+0x5>
 5ee:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__iob+0x4>
 5f2:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__iob+0x3>
 5f6:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__iob+0x2>
  
  printf("Hello world!");
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	91 e0       	ldi	r25, 0x01	; 1
 5fe:	9f 93       	push	r25
 600:	8f 93       	push	r24
 602:	0e 94 11 03 	call	0x622	; 0x622 <printf>
 606:	0f 90       	pop	r0
 608:	0f 90       	pop	r0

  while(1) {
    for(uint8_t i=0; i < 5; i++){
 60a:	c0 e0       	ldi	r28, 0x00	; 0
      LCD_GoTo(i, 1);
 60c:	61 e0       	ldi	r22, 0x01	; 1
 60e:	8c 2f       	mov	r24, r28
 610:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_GoTo>
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
}

int hd44780_transmit(char data, FILE *stream)
{
  LCD_WriteData(data);
 614:	8c 2f       	mov	r24, r28
 616:	0e 94 30 01 	call	0x260	; 0x260 <LCD_WriteData>
  stdout = stderr = &hd44780_file;
  
  printf("Hello world!");

  while(1) {
    for(uint8_t i=0; i < 5; i++){
 61a:	cf 5f       	subi	r28, 0xFF	; 255
 61c:	c5 30       	cpi	r28, 0x05	; 5
 61e:	b1 f7       	brne	.-20     	; 0x60c <main+0x74>
 620:	f4 cf       	rjmp	.-24     	; 0x60a <main+0x72>

00000622 <printf>:
 622:	a0 e0       	ldi	r26, 0x00	; 0
 624:	b0 e0       	ldi	r27, 0x00	; 0
 626:	e7 e1       	ldi	r30, 0x17	; 23
 628:	f3 e0       	ldi	r31, 0x03	; 3
 62a:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <__prologue_saves__+0x20>
 62e:	ae 01       	movw	r20, r28
 630:	4b 5f       	subi	r20, 0xFB	; 251
 632:	5f 4f       	sbci	r21, 0xFF	; 255
 634:	fa 01       	movw	r30, r20
 636:	61 91       	ld	r22, Z+
 638:	71 91       	ld	r23, Z+
 63a:	af 01       	movw	r20, r30
 63c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__iob+0x2>
 640:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__iob+0x3>
 644:	0e 94 27 03 	call	0x64e	; 0x64e <vfprintf>
 648:	e2 e0       	ldi	r30, 0x02	; 2
 64a:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__epilogue_restores__+0x20>

0000064e <vfprintf>:
 64e:	ab e0       	ldi	r26, 0x0B	; 11
 650:	b0 e0       	ldi	r27, 0x00	; 0
 652:	ed e2       	ldi	r30, 0x2D	; 45
 654:	f3 e0       	ldi	r31, 0x03	; 3
 656:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__prologue_saves__>
 65a:	6c 01       	movw	r12, r24
 65c:	7b 01       	movw	r14, r22
 65e:	8a 01       	movw	r16, r20
 660:	fc 01       	movw	r30, r24
 662:	17 82       	std	Z+7, r1	; 0x07
 664:	16 82       	std	Z+6, r1	; 0x06
 666:	83 81       	ldd	r24, Z+3	; 0x03
 668:	81 ff       	sbrs	r24, 1
 66a:	cc c1       	rjmp	.+920    	; 0xa04 <__stack+0x105>
 66c:	ce 01       	movw	r24, r28
 66e:	01 96       	adiw	r24, 0x01	; 1
 670:	3c 01       	movw	r6, r24
 672:	f6 01       	movw	r30, r12
 674:	93 81       	ldd	r25, Z+3	; 0x03
 676:	f7 01       	movw	r30, r14
 678:	93 fd       	sbrc	r25, 3
 67a:	85 91       	lpm	r24, Z+
 67c:	93 ff       	sbrs	r25, 3
 67e:	81 91       	ld	r24, Z+
 680:	7f 01       	movw	r14, r30
 682:	88 23       	and	r24, r24
 684:	09 f4       	brne	.+2      	; 0x688 <vfprintf+0x3a>
 686:	ba c1       	rjmp	.+884    	; 0x9fc <__stack+0xfd>
 688:	85 32       	cpi	r24, 0x25	; 37
 68a:	39 f4       	brne	.+14     	; 0x69a <vfprintf+0x4c>
 68c:	93 fd       	sbrc	r25, 3
 68e:	85 91       	lpm	r24, Z+
 690:	93 ff       	sbrs	r25, 3
 692:	81 91       	ld	r24, Z+
 694:	7f 01       	movw	r14, r30
 696:	85 32       	cpi	r24, 0x25	; 37
 698:	29 f4       	brne	.+10     	; 0x6a4 <vfprintf+0x56>
 69a:	b6 01       	movw	r22, r12
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <fputc>
 6a2:	e7 cf       	rjmp	.-50     	; 0x672 <vfprintf+0x24>
 6a4:	91 2c       	mov	r9, r1
 6a6:	21 2c       	mov	r2, r1
 6a8:	31 2c       	mov	r3, r1
 6aa:	ff e1       	ldi	r31, 0x1F	; 31
 6ac:	f3 15       	cp	r31, r3
 6ae:	d8 f0       	brcs	.+54     	; 0x6e6 <vfprintf+0x98>
 6b0:	8b 32       	cpi	r24, 0x2B	; 43
 6b2:	79 f0       	breq	.+30     	; 0x6d2 <vfprintf+0x84>
 6b4:	38 f4       	brcc	.+14     	; 0x6c4 <vfprintf+0x76>
 6b6:	80 32       	cpi	r24, 0x20	; 32
 6b8:	79 f0       	breq	.+30     	; 0x6d8 <vfprintf+0x8a>
 6ba:	83 32       	cpi	r24, 0x23	; 35
 6bc:	a1 f4       	brne	.+40     	; 0x6e6 <vfprintf+0x98>
 6be:	23 2d       	mov	r18, r3
 6c0:	20 61       	ori	r18, 0x10	; 16
 6c2:	1d c0       	rjmp	.+58     	; 0x6fe <vfprintf+0xb0>
 6c4:	8d 32       	cpi	r24, 0x2D	; 45
 6c6:	61 f0       	breq	.+24     	; 0x6e0 <vfprintf+0x92>
 6c8:	80 33       	cpi	r24, 0x30	; 48
 6ca:	69 f4       	brne	.+26     	; 0x6e6 <vfprintf+0x98>
 6cc:	23 2d       	mov	r18, r3
 6ce:	21 60       	ori	r18, 0x01	; 1
 6d0:	16 c0       	rjmp	.+44     	; 0x6fe <vfprintf+0xb0>
 6d2:	83 2d       	mov	r24, r3
 6d4:	82 60       	ori	r24, 0x02	; 2
 6d6:	38 2e       	mov	r3, r24
 6d8:	e3 2d       	mov	r30, r3
 6da:	e4 60       	ori	r30, 0x04	; 4
 6dc:	3e 2e       	mov	r3, r30
 6de:	2a c0       	rjmp	.+84     	; 0x734 <vfprintf+0xe6>
 6e0:	f3 2d       	mov	r31, r3
 6e2:	f8 60       	ori	r31, 0x08	; 8
 6e4:	1d c0       	rjmp	.+58     	; 0x720 <vfprintf+0xd2>
 6e6:	37 fc       	sbrc	r3, 7
 6e8:	2d c0       	rjmp	.+90     	; 0x744 <vfprintf+0xf6>
 6ea:	20 ed       	ldi	r18, 0xD0	; 208
 6ec:	28 0f       	add	r18, r24
 6ee:	2a 30       	cpi	r18, 0x0A	; 10
 6f0:	40 f0       	brcs	.+16     	; 0x702 <vfprintf+0xb4>
 6f2:	8e 32       	cpi	r24, 0x2E	; 46
 6f4:	b9 f4       	brne	.+46     	; 0x724 <vfprintf+0xd6>
 6f6:	36 fc       	sbrc	r3, 6
 6f8:	81 c1       	rjmp	.+770    	; 0x9fc <__stack+0xfd>
 6fa:	23 2d       	mov	r18, r3
 6fc:	20 64       	ori	r18, 0x40	; 64
 6fe:	32 2e       	mov	r3, r18
 700:	19 c0       	rjmp	.+50     	; 0x734 <vfprintf+0xe6>
 702:	36 fe       	sbrs	r3, 6
 704:	06 c0       	rjmp	.+12     	; 0x712 <vfprintf+0xc4>
 706:	8a e0       	ldi	r24, 0x0A	; 10
 708:	98 9e       	mul	r9, r24
 70a:	20 0d       	add	r18, r0
 70c:	11 24       	eor	r1, r1
 70e:	92 2e       	mov	r9, r18
 710:	11 c0       	rjmp	.+34     	; 0x734 <vfprintf+0xe6>
 712:	ea e0       	ldi	r30, 0x0A	; 10
 714:	2e 9e       	mul	r2, r30
 716:	20 0d       	add	r18, r0
 718:	11 24       	eor	r1, r1
 71a:	22 2e       	mov	r2, r18
 71c:	f3 2d       	mov	r31, r3
 71e:	f0 62       	ori	r31, 0x20	; 32
 720:	3f 2e       	mov	r3, r31
 722:	08 c0       	rjmp	.+16     	; 0x734 <vfprintf+0xe6>
 724:	8c 36       	cpi	r24, 0x6C	; 108
 726:	21 f4       	brne	.+8      	; 0x730 <vfprintf+0xe2>
 728:	83 2d       	mov	r24, r3
 72a:	80 68       	ori	r24, 0x80	; 128
 72c:	38 2e       	mov	r3, r24
 72e:	02 c0       	rjmp	.+4      	; 0x734 <vfprintf+0xe6>
 730:	88 36       	cpi	r24, 0x68	; 104
 732:	41 f4       	brne	.+16     	; 0x744 <vfprintf+0xf6>
 734:	f7 01       	movw	r30, r14
 736:	93 fd       	sbrc	r25, 3
 738:	85 91       	lpm	r24, Z+
 73a:	93 ff       	sbrs	r25, 3
 73c:	81 91       	ld	r24, Z+
 73e:	7f 01       	movw	r14, r30
 740:	81 11       	cpse	r24, r1
 742:	b3 cf       	rjmp	.-154    	; 0x6aa <vfprintf+0x5c>
 744:	98 2f       	mov	r25, r24
 746:	9f 7d       	andi	r25, 0xDF	; 223
 748:	95 54       	subi	r25, 0x45	; 69
 74a:	93 30       	cpi	r25, 0x03	; 3
 74c:	28 f4       	brcc	.+10     	; 0x758 <vfprintf+0x10a>
 74e:	0c 5f       	subi	r16, 0xFC	; 252
 750:	1f 4f       	sbci	r17, 0xFF	; 255
 752:	9f e3       	ldi	r25, 0x3F	; 63
 754:	99 83       	std	Y+1, r25	; 0x01
 756:	0d c0       	rjmp	.+26     	; 0x772 <vfprintf+0x124>
 758:	83 36       	cpi	r24, 0x63	; 99
 75a:	31 f0       	breq	.+12     	; 0x768 <vfprintf+0x11a>
 75c:	83 37       	cpi	r24, 0x73	; 115
 75e:	71 f0       	breq	.+28     	; 0x77c <vfprintf+0x12e>
 760:	83 35       	cpi	r24, 0x53	; 83
 762:	09 f0       	breq	.+2      	; 0x766 <vfprintf+0x118>
 764:	59 c0       	rjmp	.+178    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 766:	21 c0       	rjmp	.+66     	; 0x7aa <vfprintf+0x15c>
 768:	f8 01       	movw	r30, r16
 76a:	80 81       	ld	r24, Z
 76c:	89 83       	std	Y+1, r24	; 0x01
 76e:	0e 5f       	subi	r16, 0xFE	; 254
 770:	1f 4f       	sbci	r17, 0xFF	; 255
 772:	88 24       	eor	r8, r8
 774:	83 94       	inc	r8
 776:	91 2c       	mov	r9, r1
 778:	53 01       	movw	r10, r6
 77a:	13 c0       	rjmp	.+38     	; 0x7a2 <vfprintf+0x154>
 77c:	28 01       	movw	r4, r16
 77e:	f2 e0       	ldi	r31, 0x02	; 2
 780:	4f 0e       	add	r4, r31
 782:	51 1c       	adc	r5, r1
 784:	f8 01       	movw	r30, r16
 786:	a0 80       	ld	r10, Z
 788:	b1 80       	ldd	r11, Z+1	; 0x01
 78a:	36 fe       	sbrs	r3, 6
 78c:	03 c0       	rjmp	.+6      	; 0x794 <vfprintf+0x146>
 78e:	69 2d       	mov	r22, r9
 790:	70 e0       	ldi	r23, 0x00	; 0
 792:	02 c0       	rjmp	.+4      	; 0x798 <vfprintf+0x14a>
 794:	6f ef       	ldi	r22, 0xFF	; 255
 796:	7f ef       	ldi	r23, 0xFF	; 255
 798:	c5 01       	movw	r24, r10
 79a:	0e 94 13 05 	call	0xa26	; 0xa26 <strnlen>
 79e:	4c 01       	movw	r8, r24
 7a0:	82 01       	movw	r16, r4
 7a2:	f3 2d       	mov	r31, r3
 7a4:	ff 77       	andi	r31, 0x7F	; 127
 7a6:	3f 2e       	mov	r3, r31
 7a8:	16 c0       	rjmp	.+44     	; 0x7d6 <vfprintf+0x188>
 7aa:	28 01       	movw	r4, r16
 7ac:	22 e0       	ldi	r18, 0x02	; 2
 7ae:	42 0e       	add	r4, r18
 7b0:	51 1c       	adc	r5, r1
 7b2:	f8 01       	movw	r30, r16
 7b4:	a0 80       	ld	r10, Z
 7b6:	b1 80       	ldd	r11, Z+1	; 0x01
 7b8:	36 fe       	sbrs	r3, 6
 7ba:	03 c0       	rjmp	.+6      	; 0x7c2 <vfprintf+0x174>
 7bc:	69 2d       	mov	r22, r9
 7be:	70 e0       	ldi	r23, 0x00	; 0
 7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <vfprintf+0x178>
 7c2:	6f ef       	ldi	r22, 0xFF	; 255
 7c4:	7f ef       	ldi	r23, 0xFF	; 255
 7c6:	c5 01       	movw	r24, r10
 7c8:	0e 94 08 05 	call	0xa10	; 0xa10 <strnlen_P>
 7cc:	4c 01       	movw	r8, r24
 7ce:	f3 2d       	mov	r31, r3
 7d0:	f0 68       	ori	r31, 0x80	; 128
 7d2:	3f 2e       	mov	r3, r31
 7d4:	82 01       	movw	r16, r4
 7d6:	33 fc       	sbrc	r3, 3
 7d8:	1b c0       	rjmp	.+54     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7da:	82 2d       	mov	r24, r2
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	88 16       	cp	r8, r24
 7e0:	99 06       	cpc	r9, r25
 7e2:	b0 f4       	brcc	.+44     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7e4:	b6 01       	movw	r22, r12
 7e6:	80 e2       	ldi	r24, 0x20	; 32
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	0e 94 1e 05 	call	0xa3c	; 0xa3c <fputc>
 7ee:	2a 94       	dec	r2
 7f0:	f4 cf       	rjmp	.-24     	; 0x7da <vfprintf+0x18c>
 7f2:	f5 01       	movw	r30, r10
 7f4:	37 fc       	sbrc	r3, 7
 7f6:	85 91       	lpm	r24, Z+
 7f8:	37 fe       	sbrs	r3, 7
 7fa:	81 91       	ld	r24, Z+
 7fc:	5f 01       	movw	r10, r30
 7fe:	b6 01       	movw	r22, r12
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	0e 94 1e 05 	call	0xa3c	; 0xa3c <fputc>
 806:	21 10       	cpse	r2, r1
 808:	2a 94       	dec	r2
 80a:	21 e0       	ldi	r18, 0x01	; 1
 80c:	82 1a       	sub	r8, r18
 80e:	91 08       	sbc	r9, r1
 810:	81 14       	cp	r8, r1
 812:	91 04       	cpc	r9, r1
 814:	71 f7       	brne	.-36     	; 0x7f2 <vfprintf+0x1a4>
 816:	e8 c0       	rjmp	.+464    	; 0x9e8 <__stack+0xe9>
 818:	84 36       	cpi	r24, 0x64	; 100
 81a:	11 f0       	breq	.+4      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 81c:	89 36       	cpi	r24, 0x69	; 105
 81e:	41 f5       	brne	.+80     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 820:	f8 01       	movw	r30, r16
 822:	37 fe       	sbrs	r3, 7
 824:	07 c0       	rjmp	.+14     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 826:	60 81       	ld	r22, Z
 828:	71 81       	ldd	r23, Z+1	; 0x01
 82a:	82 81       	ldd	r24, Z+2	; 0x02
 82c:	93 81       	ldd	r25, Z+3	; 0x03
 82e:	0c 5f       	subi	r16, 0xFC	; 252
 830:	1f 4f       	sbci	r17, 0xFF	; 255
 832:	08 c0       	rjmp	.+16     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 834:	60 81       	ld	r22, Z
 836:	71 81       	ldd	r23, Z+1	; 0x01
 838:	07 2e       	mov	r0, r23
 83a:	00 0c       	add	r0, r0
 83c:	88 0b       	sbc	r24, r24
 83e:	99 0b       	sbc	r25, r25
 840:	0e 5f       	subi	r16, 0xFE	; 254
 842:	1f 4f       	sbci	r17, 0xFF	; 255
 844:	f3 2d       	mov	r31, r3
 846:	ff 76       	andi	r31, 0x6F	; 111
 848:	3f 2e       	mov	r3, r31
 84a:	97 ff       	sbrs	r25, 7
 84c:	09 c0       	rjmp	.+18     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 84e:	90 95       	com	r25
 850:	80 95       	com	r24
 852:	70 95       	com	r23
 854:	61 95       	neg	r22
 856:	7f 4f       	sbci	r23, 0xFF	; 255
 858:	8f 4f       	sbci	r24, 0xFF	; 255
 85a:	9f 4f       	sbci	r25, 0xFF	; 255
 85c:	f0 68       	ori	r31, 0x80	; 128
 85e:	3f 2e       	mov	r3, r31
 860:	2a e0       	ldi	r18, 0x0A	; 10
 862:	30 e0       	ldi	r19, 0x00	; 0
 864:	a3 01       	movw	r20, r6
 866:	0e 94 5a 05 	call	0xab4	; 0xab4 <__ultoa_invert>
 86a:	88 2e       	mov	r8, r24
 86c:	86 18       	sub	r8, r6
 86e:	45 c0       	rjmp	.+138    	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
 870:	85 37       	cpi	r24, 0x75	; 117
 872:	31 f4       	brne	.+12     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 874:	23 2d       	mov	r18, r3
 876:	2f 7e       	andi	r18, 0xEF	; 239
 878:	b2 2e       	mov	r11, r18
 87a:	2a e0       	ldi	r18, 0x0A	; 10
 87c:	30 e0       	ldi	r19, 0x00	; 0
 87e:	25 c0       	rjmp	.+74     	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 880:	93 2d       	mov	r25, r3
 882:	99 7f       	andi	r25, 0xF9	; 249
 884:	b9 2e       	mov	r11, r25
 886:	8f 36       	cpi	r24, 0x6F	; 111
 888:	c1 f0       	breq	.+48     	; 0x8ba <__DATA_REGION_LENGTH__+0xba>
 88a:	18 f4       	brcc	.+6      	; 0x892 <__DATA_REGION_LENGTH__+0x92>
 88c:	88 35       	cpi	r24, 0x58	; 88
 88e:	79 f0       	breq	.+30     	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
 890:	b5 c0       	rjmp	.+362    	; 0x9fc <__stack+0xfd>
 892:	80 37       	cpi	r24, 0x70	; 112
 894:	19 f0       	breq	.+6      	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
 896:	88 37       	cpi	r24, 0x78	; 120
 898:	21 f0       	breq	.+8      	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 89a:	b0 c0       	rjmp	.+352    	; 0x9fc <__stack+0xfd>
 89c:	e9 2f       	mov	r30, r25
 89e:	e0 61       	ori	r30, 0x10	; 16
 8a0:	be 2e       	mov	r11, r30
 8a2:	b4 fe       	sbrs	r11, 4
 8a4:	0d c0       	rjmp	.+26     	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 8a6:	fb 2d       	mov	r31, r11
 8a8:	f4 60       	ori	r31, 0x04	; 4
 8aa:	bf 2e       	mov	r11, r31
 8ac:	09 c0       	rjmp	.+18     	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 8ae:	34 fe       	sbrs	r3, 4
 8b0:	0a c0       	rjmp	.+20     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
 8b2:	29 2f       	mov	r18, r25
 8b4:	26 60       	ori	r18, 0x06	; 6
 8b6:	b2 2e       	mov	r11, r18
 8b8:	06 c0       	rjmp	.+12     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
 8ba:	28 e0       	ldi	r18, 0x08	; 8
 8bc:	30 e0       	ldi	r19, 0x00	; 0
 8be:	05 c0       	rjmp	.+10     	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 8c0:	20 e1       	ldi	r18, 0x10	; 16
 8c2:	30 e0       	ldi	r19, 0x00	; 0
 8c4:	02 c0       	rjmp	.+4      	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 8c6:	20 e1       	ldi	r18, 0x10	; 16
 8c8:	32 e0       	ldi	r19, 0x02	; 2
 8ca:	f8 01       	movw	r30, r16
 8cc:	b7 fe       	sbrs	r11, 7
 8ce:	07 c0       	rjmp	.+14     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 8d0:	60 81       	ld	r22, Z
 8d2:	71 81       	ldd	r23, Z+1	; 0x01
 8d4:	82 81       	ldd	r24, Z+2	; 0x02
 8d6:	93 81       	ldd	r25, Z+3	; 0x03
 8d8:	0c 5f       	subi	r16, 0xFC	; 252
 8da:	1f 4f       	sbci	r17, 0xFF	; 255
 8dc:	06 c0       	rjmp	.+12     	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
 8de:	60 81       	ld	r22, Z
 8e0:	71 81       	ldd	r23, Z+1	; 0x01
 8e2:	80 e0       	ldi	r24, 0x00	; 0
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	0e 5f       	subi	r16, 0xFE	; 254
 8e8:	1f 4f       	sbci	r17, 0xFF	; 255
 8ea:	a3 01       	movw	r20, r6
 8ec:	0e 94 5a 05 	call	0xab4	; 0xab4 <__ultoa_invert>
 8f0:	88 2e       	mov	r8, r24
 8f2:	86 18       	sub	r8, r6
 8f4:	fb 2d       	mov	r31, r11
 8f6:	ff 77       	andi	r31, 0x7F	; 127
 8f8:	3f 2e       	mov	r3, r31
 8fa:	36 fe       	sbrs	r3, 6
 8fc:	0d c0       	rjmp	.+26     	; 0x918 <__stack+0x19>
 8fe:	23 2d       	mov	r18, r3
 900:	2e 7f       	andi	r18, 0xFE	; 254
 902:	a2 2e       	mov	r10, r18
 904:	89 14       	cp	r8, r9
 906:	58 f4       	brcc	.+22     	; 0x91e <__stack+0x1f>
 908:	34 fe       	sbrs	r3, 4
 90a:	0b c0       	rjmp	.+22     	; 0x922 <__stack+0x23>
 90c:	32 fc       	sbrc	r3, 2
 90e:	09 c0       	rjmp	.+18     	; 0x922 <__stack+0x23>
 910:	83 2d       	mov	r24, r3
 912:	8e 7e       	andi	r24, 0xEE	; 238
 914:	a8 2e       	mov	r10, r24
 916:	05 c0       	rjmp	.+10     	; 0x922 <__stack+0x23>
 918:	b8 2c       	mov	r11, r8
 91a:	a3 2c       	mov	r10, r3
 91c:	03 c0       	rjmp	.+6      	; 0x924 <__stack+0x25>
 91e:	b8 2c       	mov	r11, r8
 920:	01 c0       	rjmp	.+2      	; 0x924 <__stack+0x25>
 922:	b9 2c       	mov	r11, r9
 924:	a4 fe       	sbrs	r10, 4
 926:	0f c0       	rjmp	.+30     	; 0x946 <__stack+0x47>
 928:	fe 01       	movw	r30, r28
 92a:	e8 0d       	add	r30, r8
 92c:	f1 1d       	adc	r31, r1
 92e:	80 81       	ld	r24, Z
 930:	80 33       	cpi	r24, 0x30	; 48
 932:	21 f4       	brne	.+8      	; 0x93c <__stack+0x3d>
 934:	9a 2d       	mov	r25, r10
 936:	99 7e       	andi	r25, 0xE9	; 233
 938:	a9 2e       	mov	r10, r25
 93a:	09 c0       	rjmp	.+18     	; 0x94e <__stack+0x4f>
 93c:	a2 fe       	sbrs	r10, 2
 93e:	06 c0       	rjmp	.+12     	; 0x94c <__stack+0x4d>
 940:	b3 94       	inc	r11
 942:	b3 94       	inc	r11
 944:	04 c0       	rjmp	.+8      	; 0x94e <__stack+0x4f>
 946:	8a 2d       	mov	r24, r10
 948:	86 78       	andi	r24, 0x86	; 134
 94a:	09 f0       	breq	.+2      	; 0x94e <__stack+0x4f>
 94c:	b3 94       	inc	r11
 94e:	a3 fc       	sbrc	r10, 3
 950:	11 c0       	rjmp	.+34     	; 0x974 <__stack+0x75>
 952:	a0 fe       	sbrs	r10, 0
 954:	06 c0       	rjmp	.+12     	; 0x962 <__stack+0x63>
 956:	b2 14       	cp	r11, r2
 958:	88 f4       	brcc	.+34     	; 0x97c <__stack+0x7d>
 95a:	28 0c       	add	r2, r8
 95c:	92 2c       	mov	r9, r2
 95e:	9b 18       	sub	r9, r11
 960:	0e c0       	rjmp	.+28     	; 0x97e <__stack+0x7f>
 962:	b2 14       	cp	r11, r2
 964:	60 f4       	brcc	.+24     	; 0x97e <__stack+0x7f>
 966:	b6 01       	movw	r22, r12
 968:	80 e2       	ldi	r24, 0x20	; 32
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <fputc>
 970:	b3 94       	inc	r11
 972:	f7 cf       	rjmp	.-18     	; 0x962 <__stack+0x63>
 974:	b2 14       	cp	r11, r2
 976:	18 f4       	brcc	.+6      	; 0x97e <__stack+0x7f>
 978:	2b 18       	sub	r2, r11
 97a:	02 c0       	rjmp	.+4      	; 0x980 <__stack+0x81>
 97c:	98 2c       	mov	r9, r8
 97e:	21 2c       	mov	r2, r1
 980:	a4 fe       	sbrs	r10, 4
 982:	10 c0       	rjmp	.+32     	; 0x9a4 <__stack+0xa5>
 984:	b6 01       	movw	r22, r12
 986:	80 e3       	ldi	r24, 0x30	; 48
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <fputc>
 98e:	a2 fe       	sbrs	r10, 2
 990:	17 c0       	rjmp	.+46     	; 0x9c0 <__stack+0xc1>
 992:	a1 fc       	sbrc	r10, 1
 994:	03 c0       	rjmp	.+6      	; 0x99c <__stack+0x9d>
 996:	88 e7       	ldi	r24, 0x78	; 120
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	02 c0       	rjmp	.+4      	; 0x9a0 <__stack+0xa1>
 99c:	88 e5       	ldi	r24, 0x58	; 88
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	b6 01       	movw	r22, r12
 9a2:	0c c0       	rjmp	.+24     	; 0x9bc <__stack+0xbd>
 9a4:	8a 2d       	mov	r24, r10
 9a6:	86 78       	andi	r24, 0x86	; 134
 9a8:	59 f0       	breq	.+22     	; 0x9c0 <__stack+0xc1>
 9aa:	a1 fe       	sbrs	r10, 1
 9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <__stack+0xb3>
 9ae:	8b e2       	ldi	r24, 0x2B	; 43
 9b0:	01 c0       	rjmp	.+2      	; 0x9b4 <__stack+0xb5>
 9b2:	80 e2       	ldi	r24, 0x20	; 32
 9b4:	a7 fc       	sbrc	r10, 7
 9b6:	8d e2       	ldi	r24, 0x2D	; 45
 9b8:	b6 01       	movw	r22, r12
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	0e 94 1e 05 	call	0xa3c	; 0xa3c <fputc>
 9c0:	89 14       	cp	r8, r9
 9c2:	38 f4       	brcc	.+14     	; 0x9d2 <__stack+0xd3>
 9c4:	b6 01       	movw	r22, r12
 9c6:	80 e3       	ldi	r24, 0x30	; 48
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	0e 94 1e 05 	call	0xa3c	; 0xa3c <fputc>
 9ce:	9a 94       	dec	r9
 9d0:	f7 cf       	rjmp	.-18     	; 0x9c0 <__stack+0xc1>
 9d2:	8a 94       	dec	r8
 9d4:	f3 01       	movw	r30, r6
 9d6:	e8 0d       	add	r30, r8
 9d8:	f1 1d       	adc	r31, r1
 9da:	80 81       	ld	r24, Z
 9dc:	b6 01       	movw	r22, r12
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	0e 94 1e 05 	call	0xa3c	; 0xa3c <fputc>
 9e4:	81 10       	cpse	r8, r1
 9e6:	f5 cf       	rjmp	.-22     	; 0x9d2 <__stack+0xd3>
 9e8:	22 20       	and	r2, r2
 9ea:	09 f4       	brne	.+2      	; 0x9ee <__stack+0xef>
 9ec:	42 ce       	rjmp	.-892    	; 0x672 <vfprintf+0x24>
 9ee:	b6 01       	movw	r22, r12
 9f0:	80 e2       	ldi	r24, 0x20	; 32
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <fputc>
 9f8:	2a 94       	dec	r2
 9fa:	f6 cf       	rjmp	.-20     	; 0x9e8 <__stack+0xe9>
 9fc:	f6 01       	movw	r30, r12
 9fe:	86 81       	ldd	r24, Z+6	; 0x06
 a00:	97 81       	ldd	r25, Z+7	; 0x07
 a02:	02 c0       	rjmp	.+4      	; 0xa08 <__stack+0x109>
 a04:	8f ef       	ldi	r24, 0xFF	; 255
 a06:	9f ef       	ldi	r25, 0xFF	; 255
 a08:	2b 96       	adiw	r28, 0x0b	; 11
 a0a:	e2 e1       	ldi	r30, 0x12	; 18
 a0c:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <__epilogue_restores__>

00000a10 <strnlen_P>:
 a10:	fc 01       	movw	r30, r24
 a12:	05 90       	lpm	r0, Z+
 a14:	61 50       	subi	r22, 0x01	; 1
 a16:	70 40       	sbci	r23, 0x00	; 0
 a18:	01 10       	cpse	r0, r1
 a1a:	d8 f7       	brcc	.-10     	; 0xa12 <strnlen_P+0x2>
 a1c:	80 95       	com	r24
 a1e:	90 95       	com	r25
 a20:	8e 0f       	add	r24, r30
 a22:	9f 1f       	adc	r25, r31
 a24:	08 95       	ret

00000a26 <strnlen>:
 a26:	fc 01       	movw	r30, r24
 a28:	61 50       	subi	r22, 0x01	; 1
 a2a:	70 40       	sbci	r23, 0x00	; 0
 a2c:	01 90       	ld	r0, Z+
 a2e:	01 10       	cpse	r0, r1
 a30:	d8 f7       	brcc	.-10     	; 0xa28 <strnlen+0x2>
 a32:	80 95       	com	r24
 a34:	90 95       	com	r25
 a36:	8e 0f       	add	r24, r30
 a38:	9f 1f       	adc	r25, r31
 a3a:	08 95       	ret

00000a3c <fputc>:
 a3c:	0f 93       	push	r16
 a3e:	1f 93       	push	r17
 a40:	cf 93       	push	r28
 a42:	df 93       	push	r29
 a44:	fb 01       	movw	r30, r22
 a46:	23 81       	ldd	r18, Z+3	; 0x03
 a48:	21 fd       	sbrc	r18, 1
 a4a:	03 c0       	rjmp	.+6      	; 0xa52 <fputc+0x16>
 a4c:	8f ef       	ldi	r24, 0xFF	; 255
 a4e:	9f ef       	ldi	r25, 0xFF	; 255
 a50:	2c c0       	rjmp	.+88     	; 0xaaa <fputc+0x6e>
 a52:	22 ff       	sbrs	r18, 2
 a54:	16 c0       	rjmp	.+44     	; 0xa82 <fputc+0x46>
 a56:	46 81       	ldd	r20, Z+6	; 0x06
 a58:	57 81       	ldd	r21, Z+7	; 0x07
 a5a:	24 81       	ldd	r18, Z+4	; 0x04
 a5c:	35 81       	ldd	r19, Z+5	; 0x05
 a5e:	42 17       	cp	r20, r18
 a60:	53 07       	cpc	r21, r19
 a62:	44 f4       	brge	.+16     	; 0xa74 <fputc+0x38>
 a64:	a0 81       	ld	r26, Z
 a66:	b1 81       	ldd	r27, Z+1	; 0x01
 a68:	9d 01       	movw	r18, r26
 a6a:	2f 5f       	subi	r18, 0xFF	; 255
 a6c:	3f 4f       	sbci	r19, 0xFF	; 255
 a6e:	31 83       	std	Z+1, r19	; 0x01
 a70:	20 83       	st	Z, r18
 a72:	8c 93       	st	X, r24
 a74:	26 81       	ldd	r18, Z+6	; 0x06
 a76:	37 81       	ldd	r19, Z+7	; 0x07
 a78:	2f 5f       	subi	r18, 0xFF	; 255
 a7a:	3f 4f       	sbci	r19, 0xFF	; 255
 a7c:	37 83       	std	Z+7, r19	; 0x07
 a7e:	26 83       	std	Z+6, r18	; 0x06
 a80:	14 c0       	rjmp	.+40     	; 0xaaa <fputc+0x6e>
 a82:	8b 01       	movw	r16, r22
 a84:	ec 01       	movw	r28, r24
 a86:	fb 01       	movw	r30, r22
 a88:	00 84       	ldd	r0, Z+8	; 0x08
 a8a:	f1 85       	ldd	r31, Z+9	; 0x09
 a8c:	e0 2d       	mov	r30, r0
 a8e:	09 95       	icall
 a90:	89 2b       	or	r24, r25
 a92:	e1 f6       	brne	.-72     	; 0xa4c <fputc+0x10>
 a94:	d8 01       	movw	r26, r16
 a96:	16 96       	adiw	r26, 0x06	; 6
 a98:	8d 91       	ld	r24, X+
 a9a:	9c 91       	ld	r25, X
 a9c:	17 97       	sbiw	r26, 0x07	; 7
 a9e:	01 96       	adiw	r24, 0x01	; 1
 aa0:	17 96       	adiw	r26, 0x07	; 7
 aa2:	9c 93       	st	X, r25
 aa4:	8e 93       	st	-X, r24
 aa6:	16 97       	sbiw	r26, 0x06	; 6
 aa8:	ce 01       	movw	r24, r28
 aaa:	df 91       	pop	r29
 aac:	cf 91       	pop	r28
 aae:	1f 91       	pop	r17
 ab0:	0f 91       	pop	r16
 ab2:	08 95       	ret

00000ab4 <__ultoa_invert>:
 ab4:	fa 01       	movw	r30, r20
 ab6:	aa 27       	eor	r26, r26
 ab8:	28 30       	cpi	r18, 0x08	; 8
 aba:	51 f1       	breq	.+84     	; 0xb10 <__ultoa_invert+0x5c>
 abc:	20 31       	cpi	r18, 0x10	; 16
 abe:	81 f1       	breq	.+96     	; 0xb20 <__ultoa_invert+0x6c>
 ac0:	e8 94       	clt
 ac2:	6f 93       	push	r22
 ac4:	6e 7f       	andi	r22, 0xFE	; 254
 ac6:	6e 5f       	subi	r22, 0xFE	; 254
 ac8:	7f 4f       	sbci	r23, 0xFF	; 255
 aca:	8f 4f       	sbci	r24, 0xFF	; 255
 acc:	9f 4f       	sbci	r25, 0xFF	; 255
 ace:	af 4f       	sbci	r26, 0xFF	; 255
 ad0:	b1 e0       	ldi	r27, 0x01	; 1
 ad2:	3e d0       	rcall	.+124    	; 0xb50 <__ultoa_invert+0x9c>
 ad4:	b4 e0       	ldi	r27, 0x04	; 4
 ad6:	3c d0       	rcall	.+120    	; 0xb50 <__ultoa_invert+0x9c>
 ad8:	67 0f       	add	r22, r23
 ada:	78 1f       	adc	r23, r24
 adc:	89 1f       	adc	r24, r25
 ade:	9a 1f       	adc	r25, r26
 ae0:	a1 1d       	adc	r26, r1
 ae2:	68 0f       	add	r22, r24
 ae4:	79 1f       	adc	r23, r25
 ae6:	8a 1f       	adc	r24, r26
 ae8:	91 1d       	adc	r25, r1
 aea:	a1 1d       	adc	r26, r1
 aec:	6a 0f       	add	r22, r26
 aee:	71 1d       	adc	r23, r1
 af0:	81 1d       	adc	r24, r1
 af2:	91 1d       	adc	r25, r1
 af4:	a1 1d       	adc	r26, r1
 af6:	20 d0       	rcall	.+64     	; 0xb38 <__ultoa_invert+0x84>
 af8:	09 f4       	brne	.+2      	; 0xafc <__ultoa_invert+0x48>
 afa:	68 94       	set
 afc:	3f 91       	pop	r19
 afe:	2a e0       	ldi	r18, 0x0A	; 10
 b00:	26 9f       	mul	r18, r22
 b02:	11 24       	eor	r1, r1
 b04:	30 19       	sub	r19, r0
 b06:	30 5d       	subi	r19, 0xD0	; 208
 b08:	31 93       	st	Z+, r19
 b0a:	de f6       	brtc	.-74     	; 0xac2 <__ultoa_invert+0xe>
 b0c:	cf 01       	movw	r24, r30
 b0e:	08 95       	ret
 b10:	46 2f       	mov	r20, r22
 b12:	47 70       	andi	r20, 0x07	; 7
 b14:	40 5d       	subi	r20, 0xD0	; 208
 b16:	41 93       	st	Z+, r20
 b18:	b3 e0       	ldi	r27, 0x03	; 3
 b1a:	0f d0       	rcall	.+30     	; 0xb3a <__ultoa_invert+0x86>
 b1c:	c9 f7       	brne	.-14     	; 0xb10 <__ultoa_invert+0x5c>
 b1e:	f6 cf       	rjmp	.-20     	; 0xb0c <__ultoa_invert+0x58>
 b20:	46 2f       	mov	r20, r22
 b22:	4f 70       	andi	r20, 0x0F	; 15
 b24:	40 5d       	subi	r20, 0xD0	; 208
 b26:	4a 33       	cpi	r20, 0x3A	; 58
 b28:	18 f0       	brcs	.+6      	; 0xb30 <__ultoa_invert+0x7c>
 b2a:	49 5d       	subi	r20, 0xD9	; 217
 b2c:	31 fd       	sbrc	r19, 1
 b2e:	40 52       	subi	r20, 0x20	; 32
 b30:	41 93       	st	Z+, r20
 b32:	02 d0       	rcall	.+4      	; 0xb38 <__ultoa_invert+0x84>
 b34:	a9 f7       	brne	.-22     	; 0xb20 <__ultoa_invert+0x6c>
 b36:	ea cf       	rjmp	.-44     	; 0xb0c <__ultoa_invert+0x58>
 b38:	b4 e0       	ldi	r27, 0x04	; 4
 b3a:	a6 95       	lsr	r26
 b3c:	97 95       	ror	r25
 b3e:	87 95       	ror	r24
 b40:	77 95       	ror	r23
 b42:	67 95       	ror	r22
 b44:	ba 95       	dec	r27
 b46:	c9 f7       	brne	.-14     	; 0xb3a <__ultoa_invert+0x86>
 b48:	00 97       	sbiw	r24, 0x00	; 0
 b4a:	61 05       	cpc	r22, r1
 b4c:	71 05       	cpc	r23, r1
 b4e:	08 95       	ret
 b50:	9b 01       	movw	r18, r22
 b52:	ac 01       	movw	r20, r24
 b54:	0a 2e       	mov	r0, r26
 b56:	06 94       	lsr	r0
 b58:	57 95       	ror	r21
 b5a:	47 95       	ror	r20
 b5c:	37 95       	ror	r19
 b5e:	27 95       	ror	r18
 b60:	ba 95       	dec	r27
 b62:	c9 f7       	brne	.-14     	; 0xb56 <__ultoa_invert+0xa2>
 b64:	62 0f       	add	r22, r18
 b66:	73 1f       	adc	r23, r19
 b68:	84 1f       	adc	r24, r20
 b6a:	95 1f       	adc	r25, r21
 b6c:	a0 1d       	adc	r26, r0
 b6e:	08 95       	ret

00000b70 <__prologue_saves__>:
 b70:	2f 92       	push	r2
 b72:	3f 92       	push	r3
 b74:	4f 92       	push	r4
 b76:	5f 92       	push	r5
 b78:	6f 92       	push	r6
 b7a:	7f 92       	push	r7
 b7c:	8f 92       	push	r8
 b7e:	9f 92       	push	r9
 b80:	af 92       	push	r10
 b82:	bf 92       	push	r11
 b84:	cf 92       	push	r12
 b86:	df 92       	push	r13
 b88:	ef 92       	push	r14
 b8a:	ff 92       	push	r15
 b8c:	0f 93       	push	r16
 b8e:	1f 93       	push	r17
 b90:	cf 93       	push	r28
 b92:	df 93       	push	r29
 b94:	cd b7       	in	r28, 0x3d	; 61
 b96:	de b7       	in	r29, 0x3e	; 62
 b98:	ca 1b       	sub	r28, r26
 b9a:	db 0b       	sbc	r29, r27
 b9c:	0f b6       	in	r0, 0x3f	; 63
 b9e:	f8 94       	cli
 ba0:	de bf       	out	0x3e, r29	; 62
 ba2:	0f be       	out	0x3f, r0	; 63
 ba4:	cd bf       	out	0x3d, r28	; 61
 ba6:	09 94       	ijmp

00000ba8 <__epilogue_restores__>:
 ba8:	2a 88       	ldd	r2, Y+18	; 0x12
 baa:	39 88       	ldd	r3, Y+17	; 0x11
 bac:	48 88       	ldd	r4, Y+16	; 0x10
 bae:	5f 84       	ldd	r5, Y+15	; 0x0f
 bb0:	6e 84       	ldd	r6, Y+14	; 0x0e
 bb2:	7d 84       	ldd	r7, Y+13	; 0x0d
 bb4:	8c 84       	ldd	r8, Y+12	; 0x0c
 bb6:	9b 84       	ldd	r9, Y+11	; 0x0b
 bb8:	aa 84       	ldd	r10, Y+10	; 0x0a
 bba:	b9 84       	ldd	r11, Y+9	; 0x09
 bbc:	c8 84       	ldd	r12, Y+8	; 0x08
 bbe:	df 80       	ldd	r13, Y+7	; 0x07
 bc0:	ee 80       	ldd	r14, Y+6	; 0x06
 bc2:	fd 80       	ldd	r15, Y+5	; 0x05
 bc4:	0c 81       	ldd	r16, Y+4	; 0x04
 bc6:	1b 81       	ldd	r17, Y+3	; 0x03
 bc8:	aa 81       	ldd	r26, Y+2	; 0x02
 bca:	b9 81       	ldd	r27, Y+1	; 0x01
 bcc:	ce 0f       	add	r28, r30
 bce:	d1 1d       	adc	r29, r1
 bd0:	0f b6       	in	r0, 0x3f	; 63
 bd2:	f8 94       	cli
 bd4:	de bf       	out	0x3e, r29	; 62
 bd6:	0f be       	out	0x3f, r0	; 63
 bd8:	cd bf       	out	0x3d, r28	; 61
 bda:	ed 01       	movw	r28, r26
 bdc:	08 95       	ret

00000bde <_exit>:
 bde:	f8 94       	cli

00000be0 <__stop_program>:
 be0:	ff cf       	rjmp	.-2      	; 0xbe0 <__stop_program>
