
zadanie1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000012e4  00001378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800112  00800112  0000138a  2**0
                  ALLOC
  3 .stab         000020a0  00000000  00000000  0000138c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001055  00000000  00000000  0000342c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004481  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004494  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  000044d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00004ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000506a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	63 64       	ori	r22, 0x43	; 67
      6a:	69 6e       	ori	r22, 0xE9	; 233
      6c:	6f 70       	andi	r22, 0x0F	; 15
      6e:	73 75       	andi	r23, 0x53	; 83
      70:	78 58       	subi	r23, 0x88	; 136
      72:	5b 00       	.word	0x005b	; ????

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf ef       	ldi	r28, 0xFF	; 255
      7a:	d8 e0       	ldi	r29, 0x08	; 8
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	11 e0       	ldi	r17, 0x01	; 1
      82:	a0 e0       	ldi	r26, 0x00	; 0
      84:	b1 e0       	ldi	r27, 0x01	; 1
      86:	e4 ee       	ldi	r30, 0xE4	; 228
      88:	f2 e1       	ldi	r31, 0x12	; 18
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	a2 31       	cpi	r26, 0x12	; 18
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	21 e0       	ldi	r18, 0x01	; 1
      98:	a2 e1       	ldi	r26, 0x12	; 18
      9a:	b1 e0       	ldi	r27, 0x01	; 1
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	a6 33       	cpi	r26, 0x36	; 54
      a2:	b2 07       	cpc	r27, r18
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
      a6:	0e 94 df 02 	call	0x5be	; 0x5be <main>
      aa:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <_exit>

000000ae <__bad_interrupt>:
      ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <uart_receive>:
}

int uart_receive(FILE *stream)
{
  // czekaj aż znak dostępny
  while (!(UCSR0A & _BV(RXC0)));
      b2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
      b6:	87 ff       	sbrs	r24, 7
      b8:	fc cf       	rjmp	.-8      	; 0xb2 <uart_receive>
  return UDR0;
      ba:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	08 95       	ret

000000c2 <hd44780_transmit>:
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
}

int hd44780_transmit(char data, FILE *stream)
{
  LCD_WriteData(data);
      c2:	0e 94 43 01 	call	0x286	; 0x286 <LCD_WriteData>
  return 0;
}
      c6:	80 e0       	ldi	r24, 0x00	; 0
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	08 95       	ret

000000cc <uart_init>:

// inicjalizacja UART
void uart_init()
{
  // ustaw baudrate
  UBRR0 = UBRR_VALUE;
      cc:	87 e6       	ldi	r24, 0x67	; 103
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
      d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  // wyczyść rejestr UCSR0A
  UCSR0A = 0;
      d8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  // włącz odbiornik i nadajnik
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
      dc:	88 e1       	ldi	r24, 0x18	; 24
      de:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  // ustaw format 8n1
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
      e2:	86 e0       	ldi	r24, 0x06	; 6
      e4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
      e8:	08 95       	ret

000000ea <LCD_ClearLine>:
}

FILE hd44780_file;
static char znaki[16];

void LCD_ClearLine(uint8_t line){
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
      ee:	d8 2f       	mov	r29, r24
  for(uint8_t i=0; i < 16; i++){
      f0:	c0 e0       	ldi	r28, 0x00	; 0
    LCD_GoTo(i, line);
      f2:	6d 2f       	mov	r22, r29
      f4:	8c 2f       	mov	r24, r28
      f6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_GoTo>
    LCD_WriteData(0x20);
      fa:	80 e2       	ldi	r24, 0x20	; 32
      fc:	0e 94 43 01 	call	0x286	; 0x286 <LCD_WriteData>

FILE hd44780_file;
static char znaki[16];

void LCD_ClearLine(uint8_t line){
  for(uint8_t i=0; i < 16; i++){
     100:	cf 5f       	subi	r28, 0xFF	; 255
     102:	c0 31       	cpi	r28, 0x10	; 16
     104:	b1 f7       	brne	.-20     	; 0xf2 <LCD_ClearLine+0x8>
    LCD_GoTo(i, line);
    LCD_WriteData(0x20);
  }
}
     106:	df 91       	pop	r29
     108:	cf 91       	pop	r28
     10a:	08 95       	ret

0000010c <newLine>:

void newLine()
{
     10c:	0f 93       	push	r16
     10e:	1f 93       	push	r17
     110:	cf 93       	push	r28
  LCD_Clear();
     112:	0e 94 1c 02 	call	0x438	; 0x438 <LCD_Clear>
     116:	02 e1       	ldi	r16, 0x12	; 18
     118:	11 e0       	ldi	r17, 0x01	; 1
  for(uint8_t i=0; i < 16; i++){
     11a:	c0 e0       	ldi	r28, 0x00	; 0
    LCD_GoTo(i, 0);
     11c:	60 e0       	ldi	r22, 0x00	; 0
     11e:	8c 2f       	mov	r24, r28
     120:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_GoTo>
    LCD_WriteData(znaki[i]);
     124:	f8 01       	movw	r30, r16
     126:	81 91       	ld	r24, Z+
     128:	8f 01       	movw	r16, r30
     12a:	0e 94 43 01 	call	0x286	; 0x286 <LCD_WriteData>
}

void newLine()
{
  LCD_Clear();
  for(uint8_t i=0; i < 16; i++){
     12e:	cf 5f       	subi	r28, 0xFF	; 255
     130:	c0 31       	cpi	r28, 0x10	; 16
     132:	a1 f7       	brne	.-24     	; 0x11c <newLine+0x10>
    LCD_GoTo(i, 0);
    LCD_WriteData(znaki[i]);
  }
}
     134:	cf 91       	pop	r28
     136:	1f 91       	pop	r17
     138:	0f 91       	pop	r16
     13a:	08 95       	ret

0000013c <_LCD_OutNibble>:
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     13c:	80 ff       	sbrs	r24, 0
     13e:	0b c0       	rjmp	.+22     	; 0x156 <_LCD_OutNibble+0x1a>
	LCD_DB4_PORT |= LCD_DB4;
     140:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
     142:	81 ff       	sbrs	r24, 1
     144:	0b c0       	rjmp	.+22     	; 0x15c <_LCD_OutNibble+0x20>
	LCD_DB5_PORT |= LCD_DB5;
     146:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
     148:	82 ff       	sbrs	r24, 2
     14a:	0b c0       	rjmp	.+22     	; 0x162 <_LCD_OutNibble+0x26>
	LCD_DB6_PORT |= LCD_DB6;
     14c:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
     14e:	83 fd       	sbrc	r24, 3
     150:	0b c0       	rjmp	.+22     	; 0x168 <_LCD_OutNibble+0x2c>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     152:	5b 98       	cbi	0x0b, 3	; 11
     154:	08 95       	ret
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     156:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
     158:	81 fd       	sbrc	r24, 1
     15a:	f5 cf       	rjmp	.-22     	; 0x146 <_LCD_OutNibble+0xa>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     15c:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
     15e:	82 fd       	sbrc	r24, 2
     160:	f5 cf       	rjmp	.-22     	; 0x14c <_LCD_OutNibble+0x10>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     162:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
     164:	83 ff       	sbrs	r24, 3
     166:	f5 cf       	rjmp	.-22     	; 0x152 <_LCD_OutNibble+0x16>
	LCD_DB7_PORT |= LCD_DB7;
     168:	5b 9a       	sbi	0x0b, 3	; 11
     16a:	08 95       	ret

0000016c <_LCD_Write>:
// Funkcja zapisu bajtu do wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
     16c:	5f 9a       	sbi	0x0b, 7	; 11
_LCD_OutNibble(dataToWrite >> 4);
     16e:	98 2f       	mov	r25, r24
     170:	92 95       	swap	r25
     172:	9f 70       	andi	r25, 0x0F	; 15
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     174:	90 ff       	sbrs	r25, 0
     176:	20 c0       	rjmp	.+64     	; 0x1b8 <_LCD_Write+0x4c>
	LCD_DB4_PORT |= LCD_DB4;
     178:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
     17a:	91 ff       	sbrs	r25, 1
     17c:	20 c0       	rjmp	.+64     	; 0x1be <_LCD_Write+0x52>
	LCD_DB5_PORT |= LCD_DB5;
     17e:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
     180:	92 ff       	sbrs	r25, 2
     182:	20 c0       	rjmp	.+64     	; 0x1c4 <_LCD_Write+0x58>
	LCD_DB6_PORT |= LCD_DB6;
     184:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
     186:	98 70       	andi	r25, 0x08	; 8
     188:	01 f5       	brne	.+64     	; 0x1ca <_LCD_Write+0x5e>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     18a:	5b 98       	cbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
     18c:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
     18e:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     190:	80 ff       	sbrs	r24, 0
     192:	20 c0       	rjmp	.+64     	; 0x1d4 <_LCD_Write+0x68>
	LCD_DB4_PORT |= LCD_DB4;
     194:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
     196:	81 ff       	sbrs	r24, 1
     198:	20 c0       	rjmp	.+64     	; 0x1da <_LCD_Write+0x6e>
	LCD_DB5_PORT |= LCD_DB5;
     19a:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
     19c:	82 ff       	sbrs	r24, 2
     19e:	20 c0       	rjmp	.+64     	; 0x1e0 <_LCD_Write+0x74>
	LCD_DB6_PORT |= LCD_DB6;
     1a0:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
     1a2:	83 fd       	sbrc	r24, 3
     1a4:	20 c0       	rjmp	.+64     	; 0x1e6 <_LCD_Write+0x7a>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     1a6:	5b 98       	cbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
     1a8:	5f 98       	cbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1aa:	87 ec       	ldi	r24, 0xC7	; 199
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	01 97       	sbiw	r24, 0x01	; 1
     1b0:	f1 f7       	brne	.-4      	; 0x1ae <_LCD_Write+0x42>
     1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <_LCD_Write+0x48>
     1b4:	00 00       	nop
     1b6:	08 95       	ret
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     1b8:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
     1ba:	91 fd       	sbrc	r25, 1
     1bc:	e0 cf       	rjmp	.-64     	; 0x17e <_LCD_Write+0x12>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     1be:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
     1c0:	92 fd       	sbrc	r25, 2
     1c2:	e0 cf       	rjmp	.-64     	; 0x184 <_LCD_Write+0x18>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     1c4:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
     1c6:	98 70       	andi	r25, 0x08	; 8
     1c8:	01 f3       	breq	.-64     	; 0x18a <_LCD_Write+0x1e>
	LCD_DB7_PORT |= LCD_DB7;
     1ca:	5b 9a       	sbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
     1cc:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
     1ce:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     1d0:	80 fd       	sbrc	r24, 0
     1d2:	e0 cf       	rjmp	.-64     	; 0x194 <_LCD_Write+0x28>
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     1d4:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
     1d6:	81 fd       	sbrc	r24, 1
     1d8:	e0 cf       	rjmp	.-64     	; 0x19a <_LCD_Write+0x2e>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     1da:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
     1dc:	82 fd       	sbrc	r24, 2
     1de:	e0 cf       	rjmp	.-64     	; 0x1a0 <_LCD_Write+0x34>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     1e0:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
     1e2:	83 ff       	sbrs	r24, 3
     1e4:	e0 cf       	rjmp	.-64     	; 0x1a6 <_LCD_Write+0x3a>
	LCD_DB7_PORT |= LCD_DB7;
     1e6:	5b 9a       	sbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
     1e8:	5f 98       	cbi	0x0b, 7	; 11
     1ea:	87 ec       	ldi	r24, 0xC7	; 199
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	01 97       	sbiw	r24, 0x01	; 1
     1f0:	f1 f7       	brne	.-4      	; 0x1ee <_LCD_Write+0x82>
     1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <_LCD_Write+0x88>
     1f4:	00 00       	nop
     1f6:	08 95       	ret

000001f8 <LCD_WriteCommand>:
// Funkcja zapisu rozkazu do wyświetlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
LCD_RS_PORT &= ~LCD_RS;
     1f8:	28 98       	cbi	0x05, 0	; 5
// Funkcja zapisu bajtu do wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
     1fa:	5f 9a       	sbi	0x0b, 7	; 11
_LCD_OutNibble(dataToWrite >> 4);
     1fc:	98 2f       	mov	r25, r24
     1fe:	92 95       	swap	r25
     200:	9f 70       	andi	r25, 0x0F	; 15
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     202:	90 ff       	sbrs	r25, 0
     204:	20 c0       	rjmp	.+64     	; 0x246 <LCD_WriteCommand+0x4e>
	LCD_DB4_PORT |= LCD_DB4;
     206:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
     208:	91 ff       	sbrs	r25, 1
     20a:	20 c0       	rjmp	.+64     	; 0x24c <LCD_WriteCommand+0x54>
	LCD_DB5_PORT |= LCD_DB5;
     20c:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
     20e:	92 ff       	sbrs	r25, 2
     210:	20 c0       	rjmp	.+64     	; 0x252 <LCD_WriteCommand+0x5a>
	LCD_DB6_PORT |= LCD_DB6;
     212:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
     214:	98 70       	andi	r25, 0x08	; 8
     216:	01 f5       	brne	.+64     	; 0x258 <LCD_WriteCommand+0x60>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     218:	5b 98       	cbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
     21a:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
     21c:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     21e:	80 ff       	sbrs	r24, 0
     220:	20 c0       	rjmp	.+64     	; 0x262 <LCD_WriteCommand+0x6a>
	LCD_DB4_PORT |= LCD_DB4;
     222:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
     224:	81 ff       	sbrs	r24, 1
     226:	20 c0       	rjmp	.+64     	; 0x268 <LCD_WriteCommand+0x70>
	LCD_DB5_PORT |= LCD_DB5;
     228:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
     22a:	82 ff       	sbrs	r24, 2
     22c:	20 c0       	rjmp	.+64     	; 0x26e <LCD_WriteCommand+0x76>
	LCD_DB6_PORT |= LCD_DB6;
     22e:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
     230:	83 fd       	sbrc	r24, 3
     232:	20 c0       	rjmp	.+64     	; 0x274 <LCD_WriteCommand+0x7c>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     234:	5b 98       	cbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
     236:	5f 98       	cbi	0x0b, 7	; 11
     238:	87 ec       	ldi	r24, 0xC7	; 199
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	01 97       	sbiw	r24, 0x01	; 1
     23e:	f1 f7       	brne	.-4      	; 0x23c <LCD_WriteCommand+0x44>
     240:	00 c0       	rjmp	.+0      	; 0x242 <LCD_WriteCommand+0x4a>
     242:	00 00       	nop
     244:	08 95       	ret
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     246:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
     248:	91 fd       	sbrc	r25, 1
     24a:	e0 cf       	rjmp	.-64     	; 0x20c <LCD_WriteCommand+0x14>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     24c:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
     24e:	92 fd       	sbrc	r25, 2
     250:	e0 cf       	rjmp	.-64     	; 0x212 <LCD_WriteCommand+0x1a>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     252:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
     254:	98 70       	andi	r25, 0x08	; 8
     256:	01 f3       	breq	.-64     	; 0x218 <LCD_WriteCommand+0x20>
	LCD_DB7_PORT |= LCD_DB7;
     258:	5b 9a       	sbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
     25a:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
     25c:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     25e:	80 fd       	sbrc	r24, 0
     260:	e0 cf       	rjmp	.-64     	; 0x222 <LCD_WriteCommand+0x2a>
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     262:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
     264:	81 fd       	sbrc	r24, 1
     266:	e0 cf       	rjmp	.-64     	; 0x228 <LCD_WriteCommand+0x30>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     268:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
     26a:	82 fd       	sbrc	r24, 2
     26c:	e0 cf       	rjmp	.-64     	; 0x22e <LCD_WriteCommand+0x36>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     26e:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
     270:	83 ff       	sbrs	r24, 3
     272:	e0 cf       	rjmp	.-64     	; 0x234 <LCD_WriteCommand+0x3c>
	LCD_DB7_PORT |= LCD_DB7;
     274:	5b 9a       	sbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
     276:	5f 98       	cbi	0x0b, 7	; 11
     278:	87 ec       	ldi	r24, 0xC7	; 199
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	f1 f7       	brne	.-4      	; 0x27c <LCD_WriteCommand+0x84>
     280:	00 c0       	rjmp	.+0      	; 0x282 <LCD_WriteCommand+0x8a>
     282:	00 00       	nop
     284:	08 95       	ret

00000286 <LCD_WriteData>:
// Funkcja zapisu danych do pamięci wyświetlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(unsigned char dataToWrite)
{
LCD_RS_PORT |= LCD_RS;
     286:	28 9a       	sbi	0x05, 0	; 5
// Funkcja zapisu bajtu do wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
     288:	5f 9a       	sbi	0x0b, 7	; 11
_LCD_OutNibble(dataToWrite >> 4);
     28a:	98 2f       	mov	r25, r24
     28c:	92 95       	swap	r25
     28e:	9f 70       	andi	r25, 0x0F	; 15
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     290:	90 ff       	sbrs	r25, 0
     292:	20 c0       	rjmp	.+64     	; 0x2d4 <LCD_WriteData+0x4e>
	LCD_DB4_PORT |= LCD_DB4;
     294:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
     296:	91 ff       	sbrs	r25, 1
     298:	20 c0       	rjmp	.+64     	; 0x2da <LCD_WriteData+0x54>
	LCD_DB5_PORT |= LCD_DB5;
     29a:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
     29c:	92 ff       	sbrs	r25, 2
     29e:	20 c0       	rjmp	.+64     	; 0x2e0 <LCD_WriteData+0x5a>
	LCD_DB6_PORT |= LCD_DB6;
     2a0:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
     2a2:	98 70       	andi	r25, 0x08	; 8
     2a4:	01 f5       	brne	.+64     	; 0x2e6 <LCD_WriteData+0x60>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     2a6:	5b 98       	cbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
     2a8:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
     2aa:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     2ac:	80 ff       	sbrs	r24, 0
     2ae:	20 c0       	rjmp	.+64     	; 0x2f0 <LCD_WriteData+0x6a>
	LCD_DB4_PORT |= LCD_DB4;
     2b0:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
     2b2:	81 ff       	sbrs	r24, 1
     2b4:	20 c0       	rjmp	.+64     	; 0x2f6 <LCD_WriteData+0x70>
	LCD_DB5_PORT |= LCD_DB5;
     2b6:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
     2b8:	82 ff       	sbrs	r24, 2
     2ba:	20 c0       	rjmp	.+64     	; 0x2fc <LCD_WriteData+0x76>
	LCD_DB6_PORT |= LCD_DB6;
     2bc:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
     2be:	83 fd       	sbrc	r24, 3
     2c0:	20 c0       	rjmp	.+64     	; 0x302 <LCD_WriteData+0x7c>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     2c2:	5b 98       	cbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
     2c4:	5f 98       	cbi	0x0b, 7	; 11
     2c6:	87 ec       	ldi	r24, 0xC7	; 199
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	01 97       	sbiw	r24, 0x01	; 1
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <LCD_WriteData+0x44>
     2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <LCD_WriteData+0x4a>
     2d0:	00 00       	nop
     2d2:	08 95       	ret
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     2d4:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
     2d6:	91 fd       	sbrc	r25, 1
     2d8:	e0 cf       	rjmp	.-64     	; 0x29a <LCD_WriteData+0x14>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     2da:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
     2dc:	92 fd       	sbrc	r25, 2
     2de:	e0 cf       	rjmp	.-64     	; 0x2a0 <LCD_WriteData+0x1a>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     2e0:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
     2e2:	98 70       	andi	r25, 0x08	; 8
     2e4:	01 f3       	breq	.-64     	; 0x2a6 <LCD_WriteData+0x20>
	LCD_DB7_PORT |= LCD_DB7;
     2e6:	5b 9a       	sbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
     2e8:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
     2ea:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     2ec:	80 fd       	sbrc	r24, 0
     2ee:	e0 cf       	rjmp	.-64     	; 0x2b0 <LCD_WriteData+0x2a>
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     2f0:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
     2f2:	81 fd       	sbrc	r24, 1
     2f4:	e0 cf       	rjmp	.-64     	; 0x2b6 <LCD_WriteData+0x30>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     2f6:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
     2f8:	82 fd       	sbrc	r24, 2
     2fa:	e0 cf       	rjmp	.-64     	; 0x2bc <LCD_WriteData+0x36>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     2fc:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
     2fe:	83 ff       	sbrs	r24, 3
     300:	e0 cf       	rjmp	.-64     	; 0x2c2 <LCD_WriteData+0x3c>
	LCD_DB7_PORT |= LCD_DB7;
     302:	5b 9a       	sbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
     304:	5f 98       	cbi	0x0b, 7	; 11
     306:	87 ec       	ldi	r24, 0xC7	; 199
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	01 97       	sbiw	r24, 0x01	; 1
     30c:	f1 f7       	brne	.-4      	; 0x30a <LCD_WriteData+0x84>
     30e:	00 c0       	rjmp	.+0      	; 0x310 <LCD_WriteData+0x8a>
     310:	00 00       	nop
     312:	08 95       	ret

00000314 <LCD_WriteText>:
//
// Funkcja wyświetlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
     314:	fc 01       	movw	r30, r24
while(*text)
     316:	90 81       	ld	r25, Z
     318:	99 23       	and	r25, r25
     31a:	09 f4       	brne	.+2      	; 0x31e <LCD_WriteText+0xa>
     31c:	44 c0       	rjmp	.+136    	; 0x3a6 <LCD_WriteText+0x92>
     31e:	31 96       	adiw	r30, 0x01	; 1
     320:	22 c0       	rjmp	.+68     	; 0x366 <LCD_WriteText+0x52>
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
     322:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
     324:	21 ff       	sbrs	r18, 1
     326:	29 c0       	rjmp	.+82     	; 0x37a <LCD_WriteText+0x66>
	LCD_DB5_PORT |= LCD_DB5;
     328:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
     32a:	22 ff       	sbrs	r18, 2
     32c:	29 c0       	rjmp	.+82     	; 0x380 <LCD_WriteText+0x6c>
	LCD_DB6_PORT |= LCD_DB6;
     32e:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
     330:	28 70       	andi	r18, 0x08	; 8
     332:	49 f5       	brne	.+82     	; 0x386 <LCD_WriteText+0x72>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     334:	5b 98       	cbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
     336:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
     338:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     33a:	90 ff       	sbrs	r25, 0
     33c:	29 c0       	rjmp	.+82     	; 0x390 <LCD_WriteText+0x7c>
	LCD_DB4_PORT |= LCD_DB4;
     33e:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
     340:	91 ff       	sbrs	r25, 1
     342:	29 c0       	rjmp	.+82     	; 0x396 <LCD_WriteText+0x82>
	LCD_DB5_PORT |= LCD_DB5;
     344:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
     346:	92 ff       	sbrs	r25, 2
     348:	29 c0       	rjmp	.+82     	; 0x39c <LCD_WriteText+0x88>
	LCD_DB6_PORT |= LCD_DB6;
     34a:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
     34c:	93 fd       	sbrc	r25, 3
     34e:	29 c0       	rjmp	.+82     	; 0x3a2 <LCD_WriteText+0x8e>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     350:	5b 98       	cbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
     352:	5f 98       	cbi	0x0b, 7	; 11
     354:	87 ec       	ldi	r24, 0xC7	; 199
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	01 97       	sbiw	r24, 0x01	; 1
     35a:	f1 f7       	brne	.-4      	; 0x358 <LCD_WriteText+0x44>
     35c:	00 c0       	rjmp	.+0      	; 0x35e <LCD_WriteText+0x4a>
     35e:	00 00       	nop
// Funkcja wyświetlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
while(*text)
     360:	91 91       	ld	r25, Z+
     362:	99 23       	and	r25, r25
     364:	01 f1       	breq	.+64     	; 0x3a6 <LCD_WriteText+0x92>
// Funkcja zapisu danych do pamięci wyświetlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(unsigned char dataToWrite)
{
LCD_RS_PORT |= LCD_RS;
     366:	28 9a       	sbi	0x05, 0	; 5
// Funkcja zapisu bajtu do wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
     368:	5f 9a       	sbi	0x0b, 7	; 11
_LCD_OutNibble(dataToWrite >> 4);
     36a:	29 2f       	mov	r18, r25
     36c:	22 95       	swap	r18
     36e:	2f 70       	andi	r18, 0x0F	; 15
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     370:	20 fd       	sbrc	r18, 0
     372:	d7 cf       	rjmp	.-82     	; 0x322 <LCD_WriteText+0xe>
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     374:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
     376:	21 fd       	sbrc	r18, 1
     378:	d7 cf       	rjmp	.-82     	; 0x328 <LCD_WriteText+0x14>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     37a:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
     37c:	22 fd       	sbrc	r18, 2
     37e:	d7 cf       	rjmp	.-82     	; 0x32e <LCD_WriteText+0x1a>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     380:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
     382:	28 70       	andi	r18, 0x08	; 8
     384:	b9 f2       	breq	.-82     	; 0x334 <LCD_WriteText+0x20>
	LCD_DB7_PORT |= LCD_DB7;
     386:	5b 9a       	sbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
     388:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
     38a:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     38c:	90 fd       	sbrc	r25, 0
     38e:	d7 cf       	rjmp	.-82     	; 0x33e <LCD_WriteText+0x2a>
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     390:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
     392:	91 fd       	sbrc	r25, 1
     394:	d7 cf       	rjmp	.-82     	; 0x344 <LCD_WriteText+0x30>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     396:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
     398:	92 fd       	sbrc	r25, 2
     39a:	d7 cf       	rjmp	.-82     	; 0x34a <LCD_WriteText+0x36>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     39c:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
     39e:	93 ff       	sbrs	r25, 3
     3a0:	d7 cf       	rjmp	.-82     	; 0x350 <LCD_WriteText+0x3c>
	LCD_DB7_PORT |= LCD_DB7;
     3a2:	5b 9a       	sbi	0x0b, 3	; 11
     3a4:	d6 cf       	rjmp	.-84     	; 0x352 <LCD_WriteText+0x3e>
     3a6:	08 95       	ret

000003a8 <LCD_GoTo>:
// Funkcja ustawienia współrzędnych ekranowych
//
//-------------------------------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
     3a8:	90 e4       	ldi	r25, 0x40	; 64
     3aa:	69 9f       	mul	r22, r25
     3ac:	80 0d       	add	r24, r0
     3ae:	11 24       	eor	r1, r1
     3b0:	80 68       	ori	r24, 0x80	; 128
// Funkcja zapisu rozkazu do wyświetlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
LCD_RS_PORT &= ~LCD_RS;
     3b2:	28 98       	cbi	0x05, 0	; 5
// Funkcja zapisu bajtu do wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
     3b4:	5f 9a       	sbi	0x0b, 7	; 11
_LCD_OutNibble(dataToWrite >> 4);
     3b6:	98 2f       	mov	r25, r24
     3b8:	92 95       	swap	r25
     3ba:	9f 70       	andi	r25, 0x0F	; 15
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     3bc:	90 ff       	sbrs	r25, 0
     3be:	1e c0       	rjmp	.+60     	; 0x3fc <LCD_GoTo+0x54>
	LCD_DB4_PORT |= LCD_DB4;
     3c0:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
     3c2:	91 ff       	sbrs	r25, 1
     3c4:	1e c0       	rjmp	.+60     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
	LCD_DB5_PORT |= LCD_DB5;
     3c6:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
     3c8:	92 ff       	sbrs	r25, 2
     3ca:	1e c0       	rjmp	.+60     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	LCD_DB6_PORT |= LCD_DB6;
     3cc:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
	LCD_DB7_PORT |= LCD_DB7;
     3ce:	5b 9a       	sbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
     3d0:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
     3d2:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     3d4:	80 ff       	sbrs	r24, 0
     3d6:	1e c0       	rjmp	.+60     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
	LCD_DB4_PORT |= LCD_DB4;
     3d8:	5e 9a       	sbi	0x0b, 6	; 11
else
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
     3da:	81 ff       	sbrs	r24, 1
     3dc:	1e c0       	rjmp	.+60     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
	LCD_DB5_PORT |= LCD_DB5;
     3de:	5d 9a       	sbi	0x0b, 5	; 11
else
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
     3e0:	82 ff       	sbrs	r24, 2
     3e2:	1e c0       	rjmp	.+60     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
	LCD_DB6_PORT |= LCD_DB6;
     3e4:	5c 9a       	sbi	0x0b, 4	; 11
else
	LCD_DB6_PORT  &= ~LCD_DB6;

if(nibbleToWrite & 0x08)
     3e6:	83 fd       	sbrc	r24, 3
     3e8:	1e c0       	rjmp	.+60     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     3ea:	5b 98       	cbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
     3ec:	5f 98       	cbi	0x0b, 7	; 11
     3ee:	87 ec       	ldi	r24, 0xC7	; 199
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	01 97       	sbiw	r24, 0x01	; 1
     3f4:	f1 f7       	brne	.-4      	; 0x3f2 <LCD_GoTo+0x4a>
     3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <LCD_GoTo+0x50>
     3f8:	00 00       	nop
     3fa:	08 95       	ret
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     3fc:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
     3fe:	91 fd       	sbrc	r25, 1
     400:	e2 cf       	rjmp	.-60     	; 0x3c6 <LCD_GoTo+0x1e>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     402:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
     404:	92 fd       	sbrc	r25, 2
     406:	e2 cf       	rjmp	.-60     	; 0x3cc <LCD_GoTo+0x24>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     408:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
	LCD_DB7_PORT |= LCD_DB7;
     40a:	5b 9a       	sbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
     40c:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
     40e:	5f 9a       	sbi	0x0b, 7	; 11
// Funkcja wystawiająca półbajt na magistralę danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
     410:	80 fd       	sbrc	r24, 0
     412:	e2 cf       	rjmp	.-60     	; 0x3d8 <LCD_GoTo+0x30>
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     414:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
     416:	81 fd       	sbrc	r24, 1
     418:	e2 cf       	rjmp	.-60     	; 0x3de <LCD_GoTo+0x36>
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     41a:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
     41c:	82 fd       	sbrc	r24, 2
     41e:	e2 cf       	rjmp	.-60     	; 0x3e4 <LCD_GoTo+0x3c>
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     420:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
     422:	83 ff       	sbrs	r24, 3
     424:	e2 cf       	rjmp	.-60     	; 0x3ea <LCD_GoTo+0x42>
	LCD_DB7_PORT |= LCD_DB7;
     426:	5b 9a       	sbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
     428:	5f 98       	cbi	0x0b, 7	; 11
     42a:	87 ec       	ldi	r24, 0xC7	; 199
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	f1 f7       	brne	.-4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     432:	00 c0       	rjmp	.+0      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     434:	00 00       	nop
     436:	08 95       	ret

00000438 <LCD_Clear>:
// Funkcja zapisu rozkazu do wyświetlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
LCD_RS_PORT &= ~LCD_RS;
     438:	28 98       	cbi	0x05, 0	; 5
// Funkcja zapisu bajtu do wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
     43a:	5f 9a       	sbi	0x0b, 7	; 11
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     43c:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     43e:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     440:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     442:	5b 98       	cbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
     444:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
     446:	5f 9a       	sbi	0x0b, 7	; 11
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
     448:	5e 9a       	sbi	0x0b, 6	; 11
	LCD_DB4_PORT  &= ~LCD_DB4;

if(nibbleToWrite & 0x02)
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     44a:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     44c:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     44e:	5b 98       	cbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
     450:	5f 98       	cbi	0x0b, 7	; 11
     452:	87 ec       	ldi	r24, 0xC7	; 199
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	01 97       	sbiw	r24, 0x01	; 1
     458:	f1 f7       	brne	.-4      	; 0x456 <LCD_Clear+0x1e>
     45a:	00 c0       	rjmp	.+0      	; 0x45c <LCD_Clear+0x24>
     45c:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     45e:	8f e3       	ldi	r24, 0x3F	; 63
     460:	9f e1       	ldi	r25, 0x1F	; 31
     462:	01 97       	sbiw	r24, 0x01	; 1
     464:	f1 f7       	brne	.-4      	; 0x462 <LCD_Clear+0x2a>
     466:	00 c0       	rjmp	.+0      	; 0x468 <LCD_Clear+0x30>
     468:	00 00       	nop
     46a:	08 95       	ret

0000046c <LCD_Home>:
// Funkcja zapisu rozkazu do wyświetlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
LCD_RS_PORT &= ~LCD_RS;
     46c:	28 98       	cbi	0x05, 0	; 5
// Funkcja zapisu bajtu do wyświetacza (bez rozróżnienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
     46e:	5f 9a       	sbi	0x0b, 7	; 11
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     470:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
	LCD_DB5_PORT |= LCD_DB5;
else
	LCD_DB5_PORT  &= ~LCD_DB5;
     472:	5d 98       	cbi	0x0b, 5	; 11

if(nibbleToWrite & 0x04)
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     474:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     476:	5b 98       	cbi	0x0b, 3	; 11
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
     478:	5f 98       	cbi	0x0b, 7	; 11
LCD_E_PORT |= LCD_E;
     47a:	5f 9a       	sbi	0x0b, 7	; 11
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
	LCD_DB4_PORT |= LCD_DB4;
else
	LCD_DB4_PORT  &= ~LCD_DB4;
     47c:	5e 98       	cbi	0x0b, 6	; 11

if(nibbleToWrite & 0x02)
	LCD_DB5_PORT |= LCD_DB5;
     47e:	5d 9a       	sbi	0x0b, 5	; 11
	LCD_DB5_PORT  &= ~LCD_DB5;

if(nibbleToWrite & 0x04)
	LCD_DB6_PORT |= LCD_DB6;
else
	LCD_DB6_PORT  &= ~LCD_DB6;
     480:	5c 98       	cbi	0x0b, 4	; 11

if(nibbleToWrite & 0x08)
	LCD_DB7_PORT |= LCD_DB7;
else
	LCD_DB7_PORT  &= ~LCD_DB7;
     482:	5b 98       	cbi	0x0b, 3	; 11
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite >> 4);
LCD_E_PORT &= ~LCD_E;
LCD_E_PORT |= LCD_E;
_LCD_OutNibble(dataToWrite);
LCD_E_PORT &= ~LCD_E;
     484:	5f 98       	cbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     486:	87 ec       	ldi	r24, 0xC7	; 199
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	01 97       	sbiw	r24, 0x01	; 1
     48c:	f1 f7       	brne	.-4      	; 0x48a <LCD_Home+0x1e>
     48e:	00 c0       	rjmp	.+0      	; 0x490 <LCD_Home+0x24>
     490:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     492:	8f e3       	ldi	r24, 0x3F	; 63
     494:	9f e1       	ldi	r25, 0x1F	; 31
     496:	01 97       	sbiw	r24, 0x01	; 1
     498:	f1 f7       	brne	.-4      	; 0x496 <LCD_Home+0x2a>
     49a:	00 c0       	rjmp	.+0      	; 0x49c <LCD_Home+0x30>
     49c:	00 00       	nop
     49e:	08 95       	ret

000004a0 <LCD_Initialize>:
     4a0:	56 9a       	sbi	0x0a, 6	; 10
     4a2:	55 9a       	sbi	0x0a, 5	; 10
     4a4:	54 9a       	sbi	0x0a, 4	; 10
     4a6:	53 9a       	sbi	0x0a, 3	; 10
     4a8:	57 9a       	sbi	0x0a, 7	; 10
     4aa:	20 9a       	sbi	0x04, 0	; 4
     4ac:	8f e5       	ldi	r24, 0x5F	; 95
     4ae:	9a ee       	ldi	r25, 0xEA	; 234
     4b0:	01 97       	sbiw	r24, 0x01	; 1
     4b2:	f1 f7       	brne	.-4      	; 0x4b0 <LCD_Initialize+0x10>
     4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <LCD_Initialize+0x16>
     4b6:	00 00       	nop
     4b8:	28 98       	cbi	0x05, 0	; 5
     4ba:	5f 98       	cbi	0x0b, 7	; 11
     4bc:	83 e0       	ldi	r24, 0x03	; 3
     4be:	5f 9a       	sbi	0x0b, 7	; 11
     4c0:	5e 9a       	sbi	0x0b, 6	; 11
     4c2:	5d 9a       	sbi	0x0b, 5	; 11
     4c4:	5c 98       	cbi	0x0b, 4	; 11
     4c6:	5b 98       	cbi	0x0b, 3	; 11
     4c8:	5f 98       	cbi	0x0b, 7	; 11
     4ca:	ef e1       	ldi	r30, 0x1F	; 31
     4cc:	fe e4       	ldi	r31, 0x4E	; 78
     4ce:	31 97       	sbiw	r30, 0x01	; 1
     4d0:	f1 f7       	brne	.-4      	; 0x4ce <LCD_Initialize+0x2e>
     4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <LCD_Initialize+0x34>
     4d4:	00 00       	nop
     4d6:	81 50       	subi	r24, 0x01	; 1
     4d8:	91 f7       	brne	.-28     	; 0x4be <LCD_Initialize+0x1e>
     4da:	5f 9a       	sbi	0x0b, 7	; 11
     4dc:	5e 98       	cbi	0x0b, 6	; 11
     4de:	5d 9a       	sbi	0x0b, 5	; 11
     4e0:	5c 98       	cbi	0x0b, 4	; 11
     4e2:	5b 98       	cbi	0x0b, 3	; 11
     4e4:	5f 98       	cbi	0x0b, 7	; 11
     4e6:	8f e9       	ldi	r24, 0x9F	; 159
     4e8:	9f e0       	ldi	r25, 0x0F	; 15
     4ea:	01 97       	sbiw	r24, 0x01	; 1
     4ec:	f1 f7       	brne	.-4      	; 0x4ea <LCD_Initialize+0x4a>
     4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <LCD_Initialize+0x50>
     4f0:	00 00       	nop
     4f2:	28 98       	cbi	0x05, 0	; 5
     4f4:	5f 9a       	sbi	0x0b, 7	; 11
     4f6:	5e 98       	cbi	0x0b, 6	; 11
     4f8:	5d 9a       	sbi	0x0b, 5	; 11
     4fa:	5c 98       	cbi	0x0b, 4	; 11
     4fc:	5b 98       	cbi	0x0b, 3	; 11
     4fe:	5f 98       	cbi	0x0b, 7	; 11
     500:	5f 9a       	sbi	0x0b, 7	; 11
     502:	5e 98       	cbi	0x0b, 6	; 11
     504:	5d 98       	cbi	0x0b, 5	; 11
     506:	5c 98       	cbi	0x0b, 4	; 11
     508:	5b 9a       	sbi	0x0b, 3	; 11
     50a:	5f 98       	cbi	0x0b, 7	; 11
     50c:	e7 ec       	ldi	r30, 0xC7	; 199
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	31 97       	sbiw	r30, 0x01	; 1
     512:	f1 f7       	brne	.-4      	; 0x510 <LCD_Initialize+0x70>
     514:	00 c0       	rjmp	.+0      	; 0x516 <LCD_Initialize+0x76>
     516:	00 00       	nop
     518:	28 98       	cbi	0x05, 0	; 5
     51a:	5f 9a       	sbi	0x0b, 7	; 11
     51c:	5e 98       	cbi	0x0b, 6	; 11
     51e:	5d 98       	cbi	0x0b, 5	; 11
     520:	5c 98       	cbi	0x0b, 4	; 11
     522:	5b 98       	cbi	0x0b, 3	; 11
     524:	5f 98       	cbi	0x0b, 7	; 11
     526:	5f 9a       	sbi	0x0b, 7	; 11
     528:	5e 98       	cbi	0x0b, 6	; 11
     52a:	5d 98       	cbi	0x0b, 5	; 11
     52c:	5c 98       	cbi	0x0b, 4	; 11
     52e:	5b 9a       	sbi	0x0b, 3	; 11
     530:	5f 98       	cbi	0x0b, 7	; 11
     532:	87 ec       	ldi	r24, 0xC7	; 199
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	01 97       	sbiw	r24, 0x01	; 1
     538:	f1 f7       	brne	.-4      	; 0x536 <LCD_Initialize+0x96>
     53a:	00 c0       	rjmp	.+0      	; 0x53c <LCD_Initialize+0x9c>
     53c:	00 00       	nop
     53e:	28 98       	cbi	0x05, 0	; 5
     540:	5f 9a       	sbi	0x0b, 7	; 11
     542:	5e 98       	cbi	0x0b, 6	; 11
     544:	5d 98       	cbi	0x0b, 5	; 11
     546:	5c 98       	cbi	0x0b, 4	; 11
     548:	5b 98       	cbi	0x0b, 3	; 11
     54a:	5f 98       	cbi	0x0b, 7	; 11
     54c:	5f 9a       	sbi	0x0b, 7	; 11
     54e:	5e 9a       	sbi	0x0b, 6	; 11
     550:	5d 98       	cbi	0x0b, 5	; 11
     552:	5c 98       	cbi	0x0b, 4	; 11
     554:	5b 98       	cbi	0x0b, 3	; 11
     556:	5f 98       	cbi	0x0b, 7	; 11
     558:	e7 ec       	ldi	r30, 0xC7	; 199
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	31 97       	sbiw	r30, 0x01	; 1
     55e:	f1 f7       	brne	.-4      	; 0x55c <LCD_Initialize+0xbc>
     560:	00 c0       	rjmp	.+0      	; 0x562 <LCD_Initialize+0xc2>
     562:	00 00       	nop
     564:	8f e3       	ldi	r24, 0x3F	; 63
     566:	9f e1       	ldi	r25, 0x1F	; 31
     568:	01 97       	sbiw	r24, 0x01	; 1
     56a:	f1 f7       	brne	.-4      	; 0x568 <LCD_Initialize+0xc8>
     56c:	00 c0       	rjmp	.+0      	; 0x56e <LCD_Initialize+0xce>
     56e:	00 00       	nop
     570:	28 98       	cbi	0x05, 0	; 5
     572:	5f 9a       	sbi	0x0b, 7	; 11
     574:	5e 98       	cbi	0x0b, 6	; 11
     576:	5d 98       	cbi	0x0b, 5	; 11
     578:	5c 98       	cbi	0x0b, 4	; 11
     57a:	5b 98       	cbi	0x0b, 3	; 11
     57c:	5f 98       	cbi	0x0b, 7	; 11
     57e:	5f 9a       	sbi	0x0b, 7	; 11
     580:	5e 98       	cbi	0x0b, 6	; 11
     582:	5d 9a       	sbi	0x0b, 5	; 11
     584:	5c 9a       	sbi	0x0b, 4	; 11
     586:	5b 98       	cbi	0x0b, 3	; 11
     588:	5f 98       	cbi	0x0b, 7	; 11
     58a:	e7 ec       	ldi	r30, 0xC7	; 199
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	31 97       	sbiw	r30, 0x01	; 1
     590:	f1 f7       	brne	.-4      	; 0x58e <LCD_Initialize+0xee>
     592:	00 c0       	rjmp	.+0      	; 0x594 <LCD_Initialize+0xf4>
     594:	00 00       	nop
     596:	28 98       	cbi	0x05, 0	; 5
     598:	5f 9a       	sbi	0x0b, 7	; 11
     59a:	5e 98       	cbi	0x0b, 6	; 11
     59c:	5d 98       	cbi	0x0b, 5	; 11
     59e:	5c 98       	cbi	0x0b, 4	; 11
     5a0:	5b 98       	cbi	0x0b, 3	; 11
     5a2:	5f 98       	cbi	0x0b, 7	; 11
     5a4:	5f 9a       	sbi	0x0b, 7	; 11
     5a6:	5e 98       	cbi	0x0b, 6	; 11
     5a8:	5d 98       	cbi	0x0b, 5	; 11
     5aa:	5c 9a       	sbi	0x0b, 4	; 11
     5ac:	5b 9a       	sbi	0x0b, 3	; 11
     5ae:	5f 98       	cbi	0x0b, 7	; 11
     5b0:	87 ec       	ldi	r24, 0xC7	; 199
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <LCD_Initialize+0x114>
     5b8:	00 c0       	rjmp	.+0      	; 0x5ba <LCD_Initialize+0x11a>
     5ba:	00 00       	nop
     5bc:	08 95       	ret

000005be <main>:

// inicjalizacja UART
void uart_init()
{
  // ustaw baudrate
  UBRR0 = UBRR_VALUE;
     5be:	87 e6       	ldi	r24, 0x67	; 103
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     5c6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  // wyczyść rejestr UCSR0A
  UCSR0A = 0;
     5ca:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  // włącz odbiornik i nadajnik
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
     5ce:	88 e1       	ldi	r24, 0x18	; 24
     5d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  // ustaw format 8n1
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
     5d4:	86 e0       	ldi	r24, 0x06	; 6
     5d6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>

int main()
{
  uart_init();
  // skonfiguruj wyświetlacz
  LCD_Initialize();
     5da:	0e 94 50 02 	call	0x4a0	; 0x4a0 <LCD_Initialize>
  LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_ON | HD44780_CURSOR_BLINK);
     5de:	8f e0       	ldi	r24, 0x0F	; 15
     5e0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_WriteCommand>
  LCD_Clear();
     5e4:	0e 94 1c 02 	call	0x438	; 0x438 <LCD_Clear>
  // skonfiguruj strumienie wyjściowe
  fdev_setup_stream(&hd44780_file, hd44780_transmit, uart_receive, _FDEV_SETUP_RW);
     5e8:	82 e2       	ldi	r24, 0x22	; 34
     5ea:	91 e0       	ldi	r25, 0x01	; 1
     5ec:	21 e6       	ldi	r18, 0x61	; 97
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	30 93 2b 01 	sts	0x012B, r19	; 0x80012b <hd44780_file+0x9>
     5f4:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <hd44780_file+0x8>
     5f8:	29 e5       	ldi	r18, 0x59	; 89
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	30 93 2d 01 	sts	0x012D, r19	; 0x80012d <hd44780_file+0xb>
     600:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <hd44780_file+0xa>
     604:	23 e0       	ldi	r18, 0x03	; 3
     606:	20 93 25 01 	sts	0x0125, r18	; 0x800125 <hd44780_file+0x3>
     60a:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <hd44780_file+0xd>
     60e:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <hd44780_file+0xc>
  stdin = stdout = stderr = &hd44780_file;
     612:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__iob+0x5>
     616:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__iob+0x4>
     61a:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <__iob+0x3>
     61e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__iob+0x2>
     622:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__iob+0x1>
     626:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__iob>
  // program testowy
  printf("Hello world!");
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	9f 93       	push	r25
     630:	8f 93       	push	r24
     632:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <printf>
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
  uint8_t index = 0;
     63a:	10 e0       	ldi	r17, 0x00	; 0
     63c:	c0 e0       	ldi	r28, 0x00	; 0
     63e:	d0 e0       	ldi	r29, 0x00	; 0
    if(index >= 16){
      newLine(index);
      index = 0;
    }
    LCD_GoTo(index, 1);
    scanf("%1c", &znaki[index]);
     640:	8d e0       	ldi	r24, 0x0D	; 13
     642:	e8 2e       	mov	r14, r24
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	f8 2e       	mov	r15, r24
  while(1) {
    if(index >= 16){
      newLine(index);
      index = 0;
    }
    LCD_GoTo(index, 1);
     648:	61 e0       	ldi	r22, 0x01	; 1
     64a:	81 2f       	mov	r24, r17
     64c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_GoTo>
    scanf("%1c", &znaki[index]);
     650:	ce 5e       	subi	r28, 0xEE	; 238
     652:	de 4f       	sbci	r29, 0xFE	; 254
     654:	df 93       	push	r29
     656:	cf 93       	push	r28
     658:	ff 92       	push	r15
     65a:	ef 92       	push	r14
     65c:	0e 94 77 03 	call	0x6ee	; 0x6ee <scanf>
    if(znaki[index] == '\r'){
     660:	88 81       	ld	r24, Y
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
     66a:	8d 30       	cpi	r24, 0x0D	; 13
     66c:	89 f0       	breq	.+34     	; 0x690 <main+0xd2>
      newLine();
      index = 0;
    } else {
      printf("%c", znaki[index]); 
     66e:	08 2e       	mov	r0, r24
     670:	00 0c       	add	r0, r0
     672:	99 0b       	sbc	r25, r25
     674:	0e 94 70 03 	call	0x6e0	; 0x6e0 <putchar>
      index++;
     678:	1f 5f       	subi	r17, 0xFF	; 255
     67a:	c1 2f       	mov	r28, r17
     67c:	d0 e0       	ldi	r29, 0x00	; 0
  stdin = stdout = stderr = &hd44780_file;
  // program testowy
  printf("Hello world!");
  uint8_t index = 0;
  while(1) {
    if(index >= 16){
     67e:	10 31       	cpi	r17, 0x10	; 16
     680:	19 f7       	brne	.-58     	; 0x648 <main+0x8a>
      newLine(index);
     682:	ce 01       	movw	r24, r28
     684:	0e 94 86 00 	call	0x10c	; 0x10c <newLine>
      index = 0;
     688:	10 e0       	ldi	r17, 0x00	; 0
     68a:	c0 e0       	ldi	r28, 0x00	; 0
     68c:	d0 e0       	ldi	r29, 0x00	; 0
     68e:	dc cf       	rjmp	.-72     	; 0x648 <main+0x8a>
  }
}

void newLine()
{
  LCD_Clear();
     690:	0e 94 1c 02 	call	0x438	; 0x438 <LCD_Clear>
     694:	02 e1       	ldi	r16, 0x12	; 18
     696:	11 e0       	ldi	r17, 0x01	; 1
  for(uint8_t i=0; i < 16; i++){
     698:	c0 e0       	ldi	r28, 0x00	; 0
    LCD_GoTo(i, 0);
     69a:	60 e0       	ldi	r22, 0x00	; 0
     69c:	8c 2f       	mov	r24, r28
     69e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCD_GoTo>
    LCD_WriteData(znaki[i]);
     6a2:	f8 01       	movw	r30, r16
     6a4:	81 91       	ld	r24, Z+
     6a6:	8f 01       	movw	r16, r30
     6a8:	0e 94 43 01 	call	0x286	; 0x286 <LCD_WriteData>
}

void newLine()
{
  LCD_Clear();
  for(uint8_t i=0; i < 16; i++){
     6ac:	cf 5f       	subi	r28, 0xFF	; 255
     6ae:	c0 31       	cpi	r28, 0x10	; 16
     6b0:	a1 f7       	brne	.-24     	; 0x69a <main+0xdc>
     6b2:	ea cf       	rjmp	.-44     	; 0x688 <main+0xca>

000006b4 <printf>:
     6b4:	a0 e0       	ldi	r26, 0x00	; 0
     6b6:	b0 e0       	ldi	r27, 0x00	; 0
     6b8:	e0 e6       	ldi	r30, 0x60	; 96
     6ba:	f3 e0       	ldi	r31, 0x03	; 3
     6bc:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__prologue_saves__+0x20>
     6c0:	ae 01       	movw	r20, r28
     6c2:	4b 5f       	subi	r20, 0xFB	; 251
     6c4:	5f 4f       	sbci	r21, 0xFF	; 255
     6c6:	fa 01       	movw	r30, r20
     6c8:	61 91       	ld	r22, Z+
     6ca:	71 91       	ld	r23, Z+
     6cc:	af 01       	movw	r20, r30
     6ce:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__iob+0x2>
     6d2:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <__iob+0x3>
     6d6:	0e 94 8d 03 	call	0x71a	; 0x71a <vfprintf>
     6da:	e2 e0       	ldi	r30, 0x02	; 2
     6dc:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__epilogue_restores__+0x20>

000006e0 <putchar>:
     6e0:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <__iob+0x2>
     6e4:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <__iob+0x3>
     6e8:	0e 94 83 08 	call	0x1106	; 0x1106 <fputc>
     6ec:	08 95       	ret

000006ee <scanf>:
     6ee:	a0 e0       	ldi	r26, 0x00	; 0
     6f0:	b0 e0       	ldi	r27, 0x00	; 0
     6f2:	ed e7       	ldi	r30, 0x7D	; 125
     6f4:	f3 e0       	ldi	r31, 0x03	; 3
     6f6:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__prologue_saves__+0x20>
     6fa:	ae 01       	movw	r20, r28
     6fc:	4b 5f       	subi	r20, 0xFB	; 251
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	fa 01       	movw	r30, r20
     702:	61 91       	ld	r22, Z+
     704:	71 91       	ld	r23, Z+
     706:	af 01       	movw	r20, r30
     708:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__iob>
     70c:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__iob+0x1>
     710:	0e 94 0a 07 	call	0xe14	; 0xe14 <vfscanf>
     714:	e2 e0       	ldi	r30, 0x02	; 2
     716:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__epilogue_restores__+0x20>

0000071a <vfprintf>:
     71a:	ab e0       	ldi	r26, 0x0B	; 11
     71c:	b0 e0       	ldi	r27, 0x00	; 0
     71e:	e3 e9       	ldi	r30, 0x93	; 147
     720:	f3 e0       	ldi	r31, 0x03	; 3
     722:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__prologue_saves__>
     726:	6c 01       	movw	r12, r24
     728:	7b 01       	movw	r14, r22
     72a:	8a 01       	movw	r16, r20
     72c:	fc 01       	movw	r30, r24
     72e:	17 82       	std	Z+7, r1	; 0x07
     730:	16 82       	std	Z+6, r1	; 0x06
     732:	83 81       	ldd	r24, Z+3	; 0x03
     734:	81 ff       	sbrs	r24, 1
     736:	cc c1       	rjmp	.+920    	; 0xad0 <__stack+0x1d1>
     738:	ce 01       	movw	r24, r28
     73a:	01 96       	adiw	r24, 0x01	; 1
     73c:	3c 01       	movw	r6, r24
     73e:	f6 01       	movw	r30, r12
     740:	93 81       	ldd	r25, Z+3	; 0x03
     742:	f7 01       	movw	r30, r14
     744:	93 fd       	sbrc	r25, 3
     746:	85 91       	lpm	r24, Z+
     748:	93 ff       	sbrs	r25, 3
     74a:	81 91       	ld	r24, Z+
     74c:	7f 01       	movw	r14, r30
     74e:	88 23       	and	r24, r24
     750:	09 f4       	brne	.+2      	; 0x754 <vfprintf+0x3a>
     752:	ba c1       	rjmp	.+884    	; 0xac8 <__stack+0x1c9>
     754:	85 32       	cpi	r24, 0x25	; 37
     756:	39 f4       	brne	.+14     	; 0x766 <vfprintf+0x4c>
     758:	93 fd       	sbrc	r25, 3
     75a:	85 91       	lpm	r24, Z+
     75c:	93 ff       	sbrs	r25, 3
     75e:	81 91       	ld	r24, Z+
     760:	7f 01       	movw	r14, r30
     762:	85 32       	cpi	r24, 0x25	; 37
     764:	29 f4       	brne	.+10     	; 0x770 <vfprintf+0x56>
     766:	b6 01       	movw	r22, r12
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	0e 94 83 08 	call	0x1106	; 0x1106 <fputc>
     76e:	e7 cf       	rjmp	.-50     	; 0x73e <vfprintf+0x24>
     770:	91 2c       	mov	r9, r1
     772:	21 2c       	mov	r2, r1
     774:	31 2c       	mov	r3, r1
     776:	ff e1       	ldi	r31, 0x1F	; 31
     778:	f3 15       	cp	r31, r3
     77a:	d8 f0       	brcs	.+54     	; 0x7b2 <vfprintf+0x98>
     77c:	8b 32       	cpi	r24, 0x2B	; 43
     77e:	79 f0       	breq	.+30     	; 0x79e <vfprintf+0x84>
     780:	38 f4       	brcc	.+14     	; 0x790 <vfprintf+0x76>
     782:	80 32       	cpi	r24, 0x20	; 32
     784:	79 f0       	breq	.+30     	; 0x7a4 <vfprintf+0x8a>
     786:	83 32       	cpi	r24, 0x23	; 35
     788:	a1 f4       	brne	.+40     	; 0x7b2 <vfprintf+0x98>
     78a:	23 2d       	mov	r18, r3
     78c:	20 61       	ori	r18, 0x10	; 16
     78e:	1d c0       	rjmp	.+58     	; 0x7ca <vfprintf+0xb0>
     790:	8d 32       	cpi	r24, 0x2D	; 45
     792:	61 f0       	breq	.+24     	; 0x7ac <vfprintf+0x92>
     794:	80 33       	cpi	r24, 0x30	; 48
     796:	69 f4       	brne	.+26     	; 0x7b2 <vfprintf+0x98>
     798:	23 2d       	mov	r18, r3
     79a:	21 60       	ori	r18, 0x01	; 1
     79c:	16 c0       	rjmp	.+44     	; 0x7ca <vfprintf+0xb0>
     79e:	83 2d       	mov	r24, r3
     7a0:	82 60       	ori	r24, 0x02	; 2
     7a2:	38 2e       	mov	r3, r24
     7a4:	e3 2d       	mov	r30, r3
     7a6:	e4 60       	ori	r30, 0x04	; 4
     7a8:	3e 2e       	mov	r3, r30
     7aa:	2a c0       	rjmp	.+84     	; 0x800 <__DATA_REGION_LENGTH__>
     7ac:	f3 2d       	mov	r31, r3
     7ae:	f8 60       	ori	r31, 0x08	; 8
     7b0:	1d c0       	rjmp	.+58     	; 0x7ec <vfprintf+0xd2>
     7b2:	37 fc       	sbrc	r3, 7
     7b4:	2d c0       	rjmp	.+90     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     7b6:	20 ed       	ldi	r18, 0xD0	; 208
     7b8:	28 0f       	add	r18, r24
     7ba:	2a 30       	cpi	r18, 0x0A	; 10
     7bc:	40 f0       	brcs	.+16     	; 0x7ce <vfprintf+0xb4>
     7be:	8e 32       	cpi	r24, 0x2E	; 46
     7c0:	b9 f4       	brne	.+46     	; 0x7f0 <vfprintf+0xd6>
     7c2:	36 fc       	sbrc	r3, 6
     7c4:	81 c1       	rjmp	.+770    	; 0xac8 <__stack+0x1c9>
     7c6:	23 2d       	mov	r18, r3
     7c8:	20 64       	ori	r18, 0x40	; 64
     7ca:	32 2e       	mov	r3, r18
     7cc:	19 c0       	rjmp	.+50     	; 0x800 <__DATA_REGION_LENGTH__>
     7ce:	36 fe       	sbrs	r3, 6
     7d0:	06 c0       	rjmp	.+12     	; 0x7de <vfprintf+0xc4>
     7d2:	8a e0       	ldi	r24, 0x0A	; 10
     7d4:	98 9e       	mul	r9, r24
     7d6:	20 0d       	add	r18, r0
     7d8:	11 24       	eor	r1, r1
     7da:	92 2e       	mov	r9, r18
     7dc:	11 c0       	rjmp	.+34     	; 0x800 <__DATA_REGION_LENGTH__>
     7de:	ea e0       	ldi	r30, 0x0A	; 10
     7e0:	2e 9e       	mul	r2, r30
     7e2:	20 0d       	add	r18, r0
     7e4:	11 24       	eor	r1, r1
     7e6:	22 2e       	mov	r2, r18
     7e8:	f3 2d       	mov	r31, r3
     7ea:	f0 62       	ori	r31, 0x20	; 32
     7ec:	3f 2e       	mov	r3, r31
     7ee:	08 c0       	rjmp	.+16     	; 0x800 <__DATA_REGION_LENGTH__>
     7f0:	8c 36       	cpi	r24, 0x6C	; 108
     7f2:	21 f4       	brne	.+8      	; 0x7fc <vfprintf+0xe2>
     7f4:	83 2d       	mov	r24, r3
     7f6:	80 68       	ori	r24, 0x80	; 128
     7f8:	38 2e       	mov	r3, r24
     7fa:	02 c0       	rjmp	.+4      	; 0x800 <__DATA_REGION_LENGTH__>
     7fc:	88 36       	cpi	r24, 0x68	; 104
     7fe:	41 f4       	brne	.+16     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     800:	f7 01       	movw	r30, r14
     802:	93 fd       	sbrc	r25, 3
     804:	85 91       	lpm	r24, Z+
     806:	93 ff       	sbrs	r25, 3
     808:	81 91       	ld	r24, Z+
     80a:	7f 01       	movw	r14, r30
     80c:	81 11       	cpse	r24, r1
     80e:	b3 cf       	rjmp	.-154    	; 0x776 <vfprintf+0x5c>
     810:	98 2f       	mov	r25, r24
     812:	9f 7d       	andi	r25, 0xDF	; 223
     814:	95 54       	subi	r25, 0x45	; 69
     816:	93 30       	cpi	r25, 0x03	; 3
     818:	28 f4       	brcc	.+10     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     81a:	0c 5f       	subi	r16, 0xFC	; 252
     81c:	1f 4f       	sbci	r17, 0xFF	; 255
     81e:	9f e3       	ldi	r25, 0x3F	; 63
     820:	99 83       	std	Y+1, r25	; 0x01
     822:	0d c0       	rjmp	.+26     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     824:	83 36       	cpi	r24, 0x63	; 99
     826:	31 f0       	breq	.+12     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     828:	83 37       	cpi	r24, 0x73	; 115
     82a:	71 f0       	breq	.+28     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     82c:	83 35       	cpi	r24, 0x53	; 83
     82e:	09 f0       	breq	.+2      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     830:	59 c0       	rjmp	.+178    	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
     832:	21 c0       	rjmp	.+66     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
     834:	f8 01       	movw	r30, r16
     836:	80 81       	ld	r24, Z
     838:	89 83       	std	Y+1, r24	; 0x01
     83a:	0e 5f       	subi	r16, 0xFE	; 254
     83c:	1f 4f       	sbci	r17, 0xFF	; 255
     83e:	88 24       	eor	r8, r8
     840:	83 94       	inc	r8
     842:	91 2c       	mov	r9, r1
     844:	53 01       	movw	r10, r6
     846:	13 c0       	rjmp	.+38     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
     848:	28 01       	movw	r4, r16
     84a:	f2 e0       	ldi	r31, 0x02	; 2
     84c:	4f 0e       	add	r4, r31
     84e:	51 1c       	adc	r5, r1
     850:	f8 01       	movw	r30, r16
     852:	a0 80       	ld	r10, Z
     854:	b1 80       	ldd	r11, Z+1	; 0x01
     856:	36 fe       	sbrs	r3, 6
     858:	03 c0       	rjmp	.+6      	; 0x860 <__DATA_REGION_LENGTH__+0x60>
     85a:	69 2d       	mov	r22, r9
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	02 c0       	rjmp	.+4      	; 0x864 <__DATA_REGION_LENGTH__+0x64>
     860:	6f ef       	ldi	r22, 0xFF	; 255
     862:	7f ef       	ldi	r23, 0xFF	; 255
     864:	c5 01       	movw	r24, r10
     866:	0e 94 3a 08 	call	0x1074	; 0x1074 <strnlen>
     86a:	4c 01       	movw	r8, r24
     86c:	82 01       	movw	r16, r4
     86e:	f3 2d       	mov	r31, r3
     870:	ff 77       	andi	r31, 0x7F	; 127
     872:	3f 2e       	mov	r3, r31
     874:	16 c0       	rjmp	.+44     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
     876:	28 01       	movw	r4, r16
     878:	22 e0       	ldi	r18, 0x02	; 2
     87a:	42 0e       	add	r4, r18
     87c:	51 1c       	adc	r5, r1
     87e:	f8 01       	movw	r30, r16
     880:	a0 80       	ld	r10, Z
     882:	b1 80       	ldd	r11, Z+1	; 0x01
     884:	36 fe       	sbrs	r3, 6
     886:	03 c0       	rjmp	.+6      	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
     888:	69 2d       	mov	r22, r9
     88a:	70 e0       	ldi	r23, 0x00	; 0
     88c:	02 c0       	rjmp	.+4      	; 0x892 <__DATA_REGION_LENGTH__+0x92>
     88e:	6f ef       	ldi	r22, 0xFF	; 255
     890:	7f ef       	ldi	r23, 0xFF	; 255
     892:	c5 01       	movw	r24, r10
     894:	0e 94 2f 08 	call	0x105e	; 0x105e <strnlen_P>
     898:	4c 01       	movw	r8, r24
     89a:	f3 2d       	mov	r31, r3
     89c:	f0 68       	ori	r31, 0x80	; 128
     89e:	3f 2e       	mov	r3, r31
     8a0:	82 01       	movw	r16, r4
     8a2:	33 fc       	sbrc	r3, 3
     8a4:	1b c0       	rjmp	.+54     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
     8a6:	82 2d       	mov	r24, r2
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	88 16       	cp	r8, r24
     8ac:	99 06       	cpc	r9, r25
     8ae:	b0 f4       	brcc	.+44     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
     8b0:	b6 01       	movw	r22, r12
     8b2:	80 e2       	ldi	r24, 0x20	; 32
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	0e 94 83 08 	call	0x1106	; 0x1106 <fputc>
     8ba:	2a 94       	dec	r2
     8bc:	f4 cf       	rjmp	.-24     	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
     8be:	f5 01       	movw	r30, r10
     8c0:	37 fc       	sbrc	r3, 7
     8c2:	85 91       	lpm	r24, Z+
     8c4:	37 fe       	sbrs	r3, 7
     8c6:	81 91       	ld	r24, Z+
     8c8:	5f 01       	movw	r10, r30
     8ca:	b6 01       	movw	r22, r12
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	0e 94 83 08 	call	0x1106	; 0x1106 <fputc>
     8d2:	21 10       	cpse	r2, r1
     8d4:	2a 94       	dec	r2
     8d6:	21 e0       	ldi	r18, 0x01	; 1
     8d8:	82 1a       	sub	r8, r18
     8da:	91 08       	sbc	r9, r1
     8dc:	81 14       	cp	r8, r1
     8de:	91 04       	cpc	r9, r1
     8e0:	71 f7       	brne	.-36     	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
     8e2:	e8 c0       	rjmp	.+464    	; 0xab4 <__stack+0x1b5>
     8e4:	84 36       	cpi	r24, 0x64	; 100
     8e6:	11 f0       	breq	.+4      	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
     8e8:	89 36       	cpi	r24, 0x69	; 105
     8ea:	41 f5       	brne	.+80     	; 0x93c <__stack+0x3d>
     8ec:	f8 01       	movw	r30, r16
     8ee:	37 fe       	sbrs	r3, 7
     8f0:	07 c0       	rjmp	.+14     	; 0x900 <__stack+0x1>
     8f2:	60 81       	ld	r22, Z
     8f4:	71 81       	ldd	r23, Z+1	; 0x01
     8f6:	82 81       	ldd	r24, Z+2	; 0x02
     8f8:	93 81       	ldd	r25, Z+3	; 0x03
     8fa:	0c 5f       	subi	r16, 0xFC	; 252
     8fc:	1f 4f       	sbci	r17, 0xFF	; 255
     8fe:	08 c0       	rjmp	.+16     	; 0x910 <__stack+0x11>
     900:	60 81       	ld	r22, Z
     902:	71 81       	ldd	r23, Z+1	; 0x01
     904:	07 2e       	mov	r0, r23
     906:	00 0c       	add	r0, r0
     908:	88 0b       	sbc	r24, r24
     90a:	99 0b       	sbc	r25, r25
     90c:	0e 5f       	subi	r16, 0xFE	; 254
     90e:	1f 4f       	sbci	r17, 0xFF	; 255
     910:	f3 2d       	mov	r31, r3
     912:	ff 76       	andi	r31, 0x6F	; 111
     914:	3f 2e       	mov	r3, r31
     916:	97 ff       	sbrs	r25, 7
     918:	09 c0       	rjmp	.+18     	; 0x92c <__stack+0x2d>
     91a:	90 95       	com	r25
     91c:	80 95       	com	r24
     91e:	70 95       	com	r23
     920:	61 95       	neg	r22
     922:	7f 4f       	sbci	r23, 0xFF	; 255
     924:	8f 4f       	sbci	r24, 0xFF	; 255
     926:	9f 4f       	sbci	r25, 0xFF	; 255
     928:	f0 68       	ori	r31, 0x80	; 128
     92a:	3f 2e       	mov	r3, r31
     92c:	2a e0       	ldi	r18, 0x0A	; 10
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	a3 01       	movw	r20, r6
     932:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__ultoa_invert>
     936:	88 2e       	mov	r8, r24
     938:	86 18       	sub	r8, r6
     93a:	45 c0       	rjmp	.+138    	; 0x9c6 <__stack+0xc7>
     93c:	85 37       	cpi	r24, 0x75	; 117
     93e:	31 f4       	brne	.+12     	; 0x94c <__stack+0x4d>
     940:	23 2d       	mov	r18, r3
     942:	2f 7e       	andi	r18, 0xEF	; 239
     944:	b2 2e       	mov	r11, r18
     946:	2a e0       	ldi	r18, 0x0A	; 10
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	25 c0       	rjmp	.+74     	; 0x996 <__stack+0x97>
     94c:	93 2d       	mov	r25, r3
     94e:	99 7f       	andi	r25, 0xF9	; 249
     950:	b9 2e       	mov	r11, r25
     952:	8f 36       	cpi	r24, 0x6F	; 111
     954:	c1 f0       	breq	.+48     	; 0x986 <__stack+0x87>
     956:	18 f4       	brcc	.+6      	; 0x95e <__stack+0x5f>
     958:	88 35       	cpi	r24, 0x58	; 88
     95a:	79 f0       	breq	.+30     	; 0x97a <__stack+0x7b>
     95c:	b5 c0       	rjmp	.+362    	; 0xac8 <__stack+0x1c9>
     95e:	80 37       	cpi	r24, 0x70	; 112
     960:	19 f0       	breq	.+6      	; 0x968 <__stack+0x69>
     962:	88 37       	cpi	r24, 0x78	; 120
     964:	21 f0       	breq	.+8      	; 0x96e <__stack+0x6f>
     966:	b0 c0       	rjmp	.+352    	; 0xac8 <__stack+0x1c9>
     968:	e9 2f       	mov	r30, r25
     96a:	e0 61       	ori	r30, 0x10	; 16
     96c:	be 2e       	mov	r11, r30
     96e:	b4 fe       	sbrs	r11, 4
     970:	0d c0       	rjmp	.+26     	; 0x98c <__stack+0x8d>
     972:	fb 2d       	mov	r31, r11
     974:	f4 60       	ori	r31, 0x04	; 4
     976:	bf 2e       	mov	r11, r31
     978:	09 c0       	rjmp	.+18     	; 0x98c <__stack+0x8d>
     97a:	34 fe       	sbrs	r3, 4
     97c:	0a c0       	rjmp	.+20     	; 0x992 <__stack+0x93>
     97e:	29 2f       	mov	r18, r25
     980:	26 60       	ori	r18, 0x06	; 6
     982:	b2 2e       	mov	r11, r18
     984:	06 c0       	rjmp	.+12     	; 0x992 <__stack+0x93>
     986:	28 e0       	ldi	r18, 0x08	; 8
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	05 c0       	rjmp	.+10     	; 0x996 <__stack+0x97>
     98c:	20 e1       	ldi	r18, 0x10	; 16
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	02 c0       	rjmp	.+4      	; 0x996 <__stack+0x97>
     992:	20 e1       	ldi	r18, 0x10	; 16
     994:	32 e0       	ldi	r19, 0x02	; 2
     996:	f8 01       	movw	r30, r16
     998:	b7 fe       	sbrs	r11, 7
     99a:	07 c0       	rjmp	.+14     	; 0x9aa <__stack+0xab>
     99c:	60 81       	ld	r22, Z
     99e:	71 81       	ldd	r23, Z+1	; 0x01
     9a0:	82 81       	ldd	r24, Z+2	; 0x02
     9a2:	93 81       	ldd	r25, Z+3	; 0x03
     9a4:	0c 5f       	subi	r16, 0xFC	; 252
     9a6:	1f 4f       	sbci	r17, 0xFF	; 255
     9a8:	06 c0       	rjmp	.+12     	; 0x9b6 <__stack+0xb7>
     9aa:	60 81       	ld	r22, Z
     9ac:	71 81       	ldd	r23, Z+1	; 0x01
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	0e 5f       	subi	r16, 0xFE	; 254
     9b4:	1f 4f       	sbci	r17, 0xFF	; 255
     9b6:	a3 01       	movw	r20, r6
     9b8:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__ultoa_invert>
     9bc:	88 2e       	mov	r8, r24
     9be:	86 18       	sub	r8, r6
     9c0:	fb 2d       	mov	r31, r11
     9c2:	ff 77       	andi	r31, 0x7F	; 127
     9c4:	3f 2e       	mov	r3, r31
     9c6:	36 fe       	sbrs	r3, 6
     9c8:	0d c0       	rjmp	.+26     	; 0x9e4 <__stack+0xe5>
     9ca:	23 2d       	mov	r18, r3
     9cc:	2e 7f       	andi	r18, 0xFE	; 254
     9ce:	a2 2e       	mov	r10, r18
     9d0:	89 14       	cp	r8, r9
     9d2:	58 f4       	brcc	.+22     	; 0x9ea <__stack+0xeb>
     9d4:	34 fe       	sbrs	r3, 4
     9d6:	0b c0       	rjmp	.+22     	; 0x9ee <__stack+0xef>
     9d8:	32 fc       	sbrc	r3, 2
     9da:	09 c0       	rjmp	.+18     	; 0x9ee <__stack+0xef>
     9dc:	83 2d       	mov	r24, r3
     9de:	8e 7e       	andi	r24, 0xEE	; 238
     9e0:	a8 2e       	mov	r10, r24
     9e2:	05 c0       	rjmp	.+10     	; 0x9ee <__stack+0xef>
     9e4:	b8 2c       	mov	r11, r8
     9e6:	a3 2c       	mov	r10, r3
     9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <__stack+0xf1>
     9ea:	b8 2c       	mov	r11, r8
     9ec:	01 c0       	rjmp	.+2      	; 0x9f0 <__stack+0xf1>
     9ee:	b9 2c       	mov	r11, r9
     9f0:	a4 fe       	sbrs	r10, 4
     9f2:	0f c0       	rjmp	.+30     	; 0xa12 <__stack+0x113>
     9f4:	fe 01       	movw	r30, r28
     9f6:	e8 0d       	add	r30, r8
     9f8:	f1 1d       	adc	r31, r1
     9fa:	80 81       	ld	r24, Z
     9fc:	80 33       	cpi	r24, 0x30	; 48
     9fe:	21 f4       	brne	.+8      	; 0xa08 <__stack+0x109>
     a00:	9a 2d       	mov	r25, r10
     a02:	99 7e       	andi	r25, 0xE9	; 233
     a04:	a9 2e       	mov	r10, r25
     a06:	09 c0       	rjmp	.+18     	; 0xa1a <__stack+0x11b>
     a08:	a2 fe       	sbrs	r10, 2
     a0a:	06 c0       	rjmp	.+12     	; 0xa18 <__stack+0x119>
     a0c:	b3 94       	inc	r11
     a0e:	b3 94       	inc	r11
     a10:	04 c0       	rjmp	.+8      	; 0xa1a <__stack+0x11b>
     a12:	8a 2d       	mov	r24, r10
     a14:	86 78       	andi	r24, 0x86	; 134
     a16:	09 f0       	breq	.+2      	; 0xa1a <__stack+0x11b>
     a18:	b3 94       	inc	r11
     a1a:	a3 fc       	sbrc	r10, 3
     a1c:	11 c0       	rjmp	.+34     	; 0xa40 <__stack+0x141>
     a1e:	a0 fe       	sbrs	r10, 0
     a20:	06 c0       	rjmp	.+12     	; 0xa2e <__stack+0x12f>
     a22:	b2 14       	cp	r11, r2
     a24:	88 f4       	brcc	.+34     	; 0xa48 <__stack+0x149>
     a26:	28 0c       	add	r2, r8
     a28:	92 2c       	mov	r9, r2
     a2a:	9b 18       	sub	r9, r11
     a2c:	0e c0       	rjmp	.+28     	; 0xa4a <__stack+0x14b>
     a2e:	b2 14       	cp	r11, r2
     a30:	60 f4       	brcc	.+24     	; 0xa4a <__stack+0x14b>
     a32:	b6 01       	movw	r22, r12
     a34:	80 e2       	ldi	r24, 0x20	; 32
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	0e 94 83 08 	call	0x1106	; 0x1106 <fputc>
     a3c:	b3 94       	inc	r11
     a3e:	f7 cf       	rjmp	.-18     	; 0xa2e <__stack+0x12f>
     a40:	b2 14       	cp	r11, r2
     a42:	18 f4       	brcc	.+6      	; 0xa4a <__stack+0x14b>
     a44:	2b 18       	sub	r2, r11
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <__stack+0x14d>
     a48:	98 2c       	mov	r9, r8
     a4a:	21 2c       	mov	r2, r1
     a4c:	a4 fe       	sbrs	r10, 4
     a4e:	10 c0       	rjmp	.+32     	; 0xa70 <__stack+0x171>
     a50:	b6 01       	movw	r22, r12
     a52:	80 e3       	ldi	r24, 0x30	; 48
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 83 08 	call	0x1106	; 0x1106 <fputc>
     a5a:	a2 fe       	sbrs	r10, 2
     a5c:	17 c0       	rjmp	.+46     	; 0xa8c <__stack+0x18d>
     a5e:	a1 fc       	sbrc	r10, 1
     a60:	03 c0       	rjmp	.+6      	; 0xa68 <__stack+0x169>
     a62:	88 e7       	ldi	r24, 0x78	; 120
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <__stack+0x16d>
     a68:	88 e5       	ldi	r24, 0x58	; 88
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	b6 01       	movw	r22, r12
     a6e:	0c c0       	rjmp	.+24     	; 0xa88 <__stack+0x189>
     a70:	8a 2d       	mov	r24, r10
     a72:	86 78       	andi	r24, 0x86	; 134
     a74:	59 f0       	breq	.+22     	; 0xa8c <__stack+0x18d>
     a76:	a1 fe       	sbrs	r10, 1
     a78:	02 c0       	rjmp	.+4      	; 0xa7e <__stack+0x17f>
     a7a:	8b e2       	ldi	r24, 0x2B	; 43
     a7c:	01 c0       	rjmp	.+2      	; 0xa80 <__stack+0x181>
     a7e:	80 e2       	ldi	r24, 0x20	; 32
     a80:	a7 fc       	sbrc	r10, 7
     a82:	8d e2       	ldi	r24, 0x2D	; 45
     a84:	b6 01       	movw	r22, r12
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	0e 94 83 08 	call	0x1106	; 0x1106 <fputc>
     a8c:	89 14       	cp	r8, r9
     a8e:	38 f4       	brcc	.+14     	; 0xa9e <__stack+0x19f>
     a90:	b6 01       	movw	r22, r12
     a92:	80 e3       	ldi	r24, 0x30	; 48
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	0e 94 83 08 	call	0x1106	; 0x1106 <fputc>
     a9a:	9a 94       	dec	r9
     a9c:	f7 cf       	rjmp	.-18     	; 0xa8c <__stack+0x18d>
     a9e:	8a 94       	dec	r8
     aa0:	f3 01       	movw	r30, r6
     aa2:	e8 0d       	add	r30, r8
     aa4:	f1 1d       	adc	r31, r1
     aa6:	80 81       	ld	r24, Z
     aa8:	b6 01       	movw	r22, r12
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	0e 94 83 08 	call	0x1106	; 0x1106 <fputc>
     ab0:	81 10       	cpse	r8, r1
     ab2:	f5 cf       	rjmp	.-22     	; 0xa9e <__stack+0x19f>
     ab4:	22 20       	and	r2, r2
     ab6:	09 f4       	brne	.+2      	; 0xaba <__stack+0x1bb>
     ab8:	42 ce       	rjmp	.-892    	; 0x73e <vfprintf+0x24>
     aba:	b6 01       	movw	r22, r12
     abc:	80 e2       	ldi	r24, 0x20	; 32
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	0e 94 83 08 	call	0x1106	; 0x1106 <fputc>
     ac4:	2a 94       	dec	r2
     ac6:	f6 cf       	rjmp	.-20     	; 0xab4 <__stack+0x1b5>
     ac8:	f6 01       	movw	r30, r12
     aca:	86 81       	ldd	r24, Z+6	; 0x06
     acc:	97 81       	ldd	r25, Z+7	; 0x07
     ace:	02 c0       	rjmp	.+4      	; 0xad4 <__stack+0x1d5>
     ad0:	8f ef       	ldi	r24, 0xFF	; 255
     ad2:	9f ef       	ldi	r25, 0xFF	; 255
     ad4:	2b 96       	adiw	r28, 0x0b	; 11
     ad6:	e2 e1       	ldi	r30, 0x12	; 18
     ad8:	0c 94 55 09 	jmp	0x12aa	; 0x12aa <__epilogue_restores__>

00000adc <putval>:
     adc:	20 fd       	sbrc	r18, 0
     ade:	09 c0       	rjmp	.+18     	; 0xaf2 <putval+0x16>
     ae0:	fc 01       	movw	r30, r24
     ae2:	23 fd       	sbrc	r18, 3
     ae4:	05 c0       	rjmp	.+10     	; 0xaf0 <putval+0x14>
     ae6:	22 ff       	sbrs	r18, 2
     ae8:	02 c0       	rjmp	.+4      	; 0xaee <putval+0x12>
     aea:	73 83       	std	Z+3, r23	; 0x03
     aec:	62 83       	std	Z+2, r22	; 0x02
     aee:	51 83       	std	Z+1, r21	; 0x01
     af0:	40 83       	st	Z, r20
     af2:	08 95       	ret

00000af4 <mulacc>:
     af4:	44 fd       	sbrc	r20, 4
     af6:	17 c0       	rjmp	.+46     	; 0xb26 <mulacc+0x32>
     af8:	46 fd       	sbrc	r20, 6
     afa:	17 c0       	rjmp	.+46     	; 0xb2a <mulacc+0x36>
     afc:	ab 01       	movw	r20, r22
     afe:	bc 01       	movw	r22, r24
     b00:	da 01       	movw	r26, r20
     b02:	fb 01       	movw	r30, r22
     b04:	aa 0f       	add	r26, r26
     b06:	bb 1f       	adc	r27, r27
     b08:	ee 1f       	adc	r30, r30
     b0a:	ff 1f       	adc	r31, r31
     b0c:	10 94       	com	r1
     b0e:	d1 f7       	brne	.-12     	; 0xb04 <mulacc+0x10>
     b10:	4a 0f       	add	r20, r26
     b12:	5b 1f       	adc	r21, r27
     b14:	6e 1f       	adc	r22, r30
     b16:	7f 1f       	adc	r23, r31
     b18:	cb 01       	movw	r24, r22
     b1a:	ba 01       	movw	r22, r20
     b1c:	66 0f       	add	r22, r22
     b1e:	77 1f       	adc	r23, r23
     b20:	88 1f       	adc	r24, r24
     b22:	99 1f       	adc	r25, r25
     b24:	09 c0       	rjmp	.+18     	; 0xb38 <mulacc+0x44>
     b26:	33 e0       	ldi	r19, 0x03	; 3
     b28:	01 c0       	rjmp	.+2      	; 0xb2c <mulacc+0x38>
     b2a:	34 e0       	ldi	r19, 0x04	; 4
     b2c:	66 0f       	add	r22, r22
     b2e:	77 1f       	adc	r23, r23
     b30:	88 1f       	adc	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	31 50       	subi	r19, 0x01	; 1
     b36:	d1 f7       	brne	.-12     	; 0xb2c <mulacc+0x38>
     b38:	62 0f       	add	r22, r18
     b3a:	71 1d       	adc	r23, r1
     b3c:	81 1d       	adc	r24, r1
     b3e:	91 1d       	adc	r25, r1
     b40:	08 95       	ret

00000b42 <skip_spaces>:
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	8c 01       	movw	r16, r24
     b4c:	c8 01       	movw	r24, r16
     b4e:	0e 94 45 08 	call	0x108a	; 0x108a <fgetc>
     b52:	ec 01       	movw	r28, r24
     b54:	97 fd       	sbrc	r25, 7
     b56:	08 c0       	rjmp	.+16     	; 0xb68 <skip_spaces+0x26>
     b58:	0e 94 1b 08 	call	0x1036	; 0x1036 <isspace>
     b5c:	89 2b       	or	r24, r25
     b5e:	b1 f7       	brne	.-20     	; 0xb4c <skip_spaces+0xa>
     b60:	b8 01       	movw	r22, r16
     b62:	ce 01       	movw	r24, r28
     b64:	0e 94 bf 08 	call	0x117e	; 0x117e <ungetc>
     b68:	ce 01       	movw	r24, r28
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	1f 91       	pop	r17
     b70:	0f 91       	pop	r16
     b72:	08 95       	ret

00000b74 <conv_int>:
     b74:	8f 92       	push	r8
     b76:	9f 92       	push	r9
     b78:	af 92       	push	r10
     b7a:	bf 92       	push	r11
     b7c:	ef 92       	push	r14
     b7e:	ff 92       	push	r15
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	8c 01       	movw	r16, r24
     b8a:	d6 2f       	mov	r29, r22
     b8c:	7a 01       	movw	r14, r20
     b8e:	b2 2e       	mov	r11, r18
     b90:	0e 94 45 08 	call	0x108a	; 0x108a <fgetc>
     b94:	9c 01       	movw	r18, r24
     b96:	33 27       	eor	r19, r19
     b98:	2b 32       	cpi	r18, 0x2B	; 43
     b9a:	31 05       	cpc	r19, r1
     b9c:	31 f0       	breq	.+12     	; 0xbaa <conv_int+0x36>
     b9e:	2d 32       	cpi	r18, 0x2D	; 45
     ba0:	31 05       	cpc	r19, r1
     ba2:	61 f4       	brne	.+24     	; 0xbbc <conv_int+0x48>
     ba4:	8b 2d       	mov	r24, r11
     ba6:	80 68       	ori	r24, 0x80	; 128
     ba8:	b8 2e       	mov	r11, r24
     baa:	d1 50       	subi	r29, 0x01	; 1
     bac:	11 f4       	brne	.+4      	; 0xbb2 <conv_int+0x3e>
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	68 c0       	rjmp	.+208    	; 0xc82 <conv_int+0x10e>
     bb2:	c8 01       	movw	r24, r16
     bb4:	0e 94 45 08 	call	0x108a	; 0x108a <fgetc>
     bb8:	97 fd       	sbrc	r25, 7
     bba:	f9 cf       	rjmp	.-14     	; 0xbae <conv_int+0x3a>
     bbc:	cb 2d       	mov	r28, r11
     bbe:	cd 7f       	andi	r28, 0xFD	; 253
     bc0:	2b 2d       	mov	r18, r11
     bc2:	20 73       	andi	r18, 0x30	; 48
     bc4:	09 f5       	brne	.+66     	; 0xc08 <conv_int+0x94>
     bc6:	80 33       	cpi	r24, 0x30	; 48
     bc8:	f9 f4       	brne	.+62     	; 0xc08 <conv_int+0x94>
     bca:	aa 24       	eor	r10, r10
     bcc:	aa 94       	dec	r10
     bce:	ad 0e       	add	r10, r29
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <conv_int+0x60>
     bd2:	43 c0       	rjmp	.+134    	; 0xc5a <conv_int+0xe6>
     bd4:	c8 01       	movw	r24, r16
     bd6:	0e 94 45 08 	call	0x108a	; 0x108a <fgetc>
     bda:	97 fd       	sbrc	r25, 7
     bdc:	3e c0       	rjmp	.+124    	; 0xc5a <conv_int+0xe6>
     bde:	9c 01       	movw	r18, r24
     be0:	2f 7d       	andi	r18, 0xDF	; 223
     be2:	33 27       	eor	r19, r19
     be4:	28 35       	cpi	r18, 0x58	; 88
     be6:	31 05       	cpc	r19, r1
     be8:	49 f4       	brne	.+18     	; 0xbfc <conv_int+0x88>
     bea:	c2 64       	ori	r28, 0x42	; 66
     bec:	d2 50       	subi	r29, 0x02	; 2
     bee:	a9 f1       	breq	.+106    	; 0xc5a <conv_int+0xe6>
     bf0:	c8 01       	movw	r24, r16
     bf2:	0e 94 45 08 	call	0x108a	; 0x108a <fgetc>
     bf6:	97 ff       	sbrs	r25, 7
     bf8:	07 c0       	rjmp	.+14     	; 0xc08 <conv_int+0x94>
     bfa:	2f c0       	rjmp	.+94     	; 0xc5a <conv_int+0xe6>
     bfc:	b6 fe       	sbrs	r11, 6
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <conv_int+0x90>
     c00:	c2 60       	ori	r28, 0x02	; 2
     c02:	01 c0       	rjmp	.+2      	; 0xc06 <conv_int+0x92>
     c04:	c2 61       	ori	r28, 0x12	; 18
     c06:	da 2d       	mov	r29, r10
     c08:	81 2c       	mov	r8, r1
     c0a:	91 2c       	mov	r9, r1
     c0c:	54 01       	movw	r10, r8
     c0e:	20 ed       	ldi	r18, 0xD0	; 208
     c10:	28 0f       	add	r18, r24
     c12:	28 30       	cpi	r18, 0x08	; 8
     c14:	80 f0       	brcs	.+32     	; 0xc36 <conv_int+0xc2>
     c16:	c4 ff       	sbrs	r28, 4
     c18:	04 c0       	rjmp	.+8      	; 0xc22 <conv_int+0xae>
     c1a:	b8 01       	movw	r22, r16
     c1c:	0e 94 bf 08 	call	0x117e	; 0x117e <ungetc>
     c20:	19 c0       	rjmp	.+50     	; 0xc54 <conv_int+0xe0>
     c22:	2a 30       	cpi	r18, 0x0A	; 10
     c24:	40 f0       	brcs	.+16     	; 0xc36 <conv_int+0xc2>
     c26:	c6 ff       	sbrs	r28, 6
     c28:	f8 cf       	rjmp	.-16     	; 0xc1a <conv_int+0xa6>
     c2a:	2f 7d       	andi	r18, 0xDF	; 223
     c2c:	3f ee       	ldi	r19, 0xEF	; 239
     c2e:	32 0f       	add	r19, r18
     c30:	36 30       	cpi	r19, 0x06	; 6
     c32:	98 f7       	brcc	.-26     	; 0xc1a <conv_int+0xa6>
     c34:	27 50       	subi	r18, 0x07	; 7
     c36:	4c 2f       	mov	r20, r28
     c38:	c5 01       	movw	r24, r10
     c3a:	b4 01       	movw	r22, r8
     c3c:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <mulacc>
     c40:	4b 01       	movw	r8, r22
     c42:	5c 01       	movw	r10, r24
     c44:	c2 60       	ori	r28, 0x02	; 2
     c46:	d1 50       	subi	r29, 0x01	; 1
     c48:	59 f0       	breq	.+22     	; 0xc60 <conv_int+0xec>
     c4a:	c8 01       	movw	r24, r16
     c4c:	0e 94 45 08 	call	0x108a	; 0x108a <fgetc>
     c50:	97 ff       	sbrs	r25, 7
     c52:	dd cf       	rjmp	.-70     	; 0xc0e <conv_int+0x9a>
     c54:	c1 fd       	sbrc	r28, 1
     c56:	04 c0       	rjmp	.+8      	; 0xc60 <conv_int+0xec>
     c58:	aa cf       	rjmp	.-172    	; 0xbae <conv_int+0x3a>
     c5a:	81 2c       	mov	r8, r1
     c5c:	91 2c       	mov	r9, r1
     c5e:	54 01       	movw	r10, r8
     c60:	c7 ff       	sbrs	r28, 7
     c62:	08 c0       	rjmp	.+16     	; 0xc74 <conv_int+0x100>
     c64:	b0 94       	com	r11
     c66:	a0 94       	com	r10
     c68:	90 94       	com	r9
     c6a:	80 94       	com	r8
     c6c:	81 1c       	adc	r8, r1
     c6e:	91 1c       	adc	r9, r1
     c70:	a1 1c       	adc	r10, r1
     c72:	b1 1c       	adc	r11, r1
     c74:	2c 2f       	mov	r18, r28
     c76:	b5 01       	movw	r22, r10
     c78:	a4 01       	movw	r20, r8
     c7a:	c7 01       	movw	r24, r14
     c7c:	0e 94 6e 05 	call	0xadc	; 0xadc <putval>
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	1f 91       	pop	r17
     c88:	0f 91       	pop	r16
     c8a:	ff 90       	pop	r15
     c8c:	ef 90       	pop	r14
     c8e:	bf 90       	pop	r11
     c90:	af 90       	pop	r10
     c92:	9f 90       	pop	r9
     c94:	8f 90       	pop	r8
     c96:	08 95       	ret

00000c98 <conv_brk>:
     c98:	a0 e2       	ldi	r26, 0x20	; 32
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	e2 e5       	ldi	r30, 0x52	; 82
     c9e:	f6 e0       	ldi	r31, 0x06	; 6
     ca0:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__prologue_saves__+0x6>
     ca4:	5c 01       	movw	r10, r24
     ca6:	96 2e       	mov	r9, r22
     ca8:	7a 01       	movw	r14, r20
     caa:	f9 01       	movw	r30, r18
     cac:	8e 01       	movw	r16, r28
     cae:	0f 5f       	subi	r16, 0xFF	; 255
     cb0:	1f 4f       	sbci	r17, 0xFF	; 255
     cb2:	68 01       	movw	r12, r16
     cb4:	80 e2       	ldi	r24, 0x20	; 32
     cb6:	d8 01       	movw	r26, r16
     cb8:	1d 92       	st	X+, r1
     cba:	8a 95       	dec	r24
     cbc:	e9 f7       	brne	.-6      	; 0xcb8 <conv_brk+0x20>
     cbe:	d5 01       	movw	r26, r10
     cc0:	13 96       	adiw	r26, 0x03	; 3
     cc2:	8c 90       	ld	r8, X
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	61 2c       	mov	r6, r1
     cca:	71 2c       	mov	r7, r1
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	61 e0       	ldi	r22, 0x01	; 1
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	83 fc       	sbrc	r8, 3
     cd4:	25 91       	lpm	r18, Z+
     cd6:	83 fe       	sbrs	r8, 3
     cd8:	21 91       	ld	r18, Z+
     cda:	8f 01       	movw	r16, r30
     cdc:	52 2e       	mov	r5, r18
     cde:	21 11       	cpse	r18, r1
     ce0:	03 c0       	rjmp	.+6      	; 0xce8 <conv_brk+0x50>
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	92 c0       	rjmp	.+292    	; 0xe0c <conv_brk+0x174>
     ce8:	2e 35       	cpi	r18, 0x5E	; 94
     cea:	11 f4       	brne	.+4      	; 0xcf0 <conv_brk+0x58>
     cec:	00 97       	sbiw	r24, 0x00	; 0
     cee:	51 f1       	breq	.+84     	; 0xd44 <conv_brk+0xac>
     cf0:	43 2f       	mov	r20, r19
     cf2:	50 e0       	ldi	r21, 0x00	; 0
     cf4:	48 17       	cp	r20, r24
     cf6:	59 07       	cpc	r21, r25
     cf8:	3c f4       	brge	.+14     	; 0xd08 <conv_brk+0x70>
     cfa:	2d 35       	cpi	r18, 0x5D	; 93
     cfc:	59 f1       	breq	.+86     	; 0xd54 <conv_brk+0xbc>
     cfe:	2d 32       	cpi	r18, 0x2D	; 45
     d00:	19 f4       	brne	.+6      	; 0xd08 <conv_brk+0x70>
     d02:	77 20       	and	r7, r7
     d04:	09 f1       	breq	.+66     	; 0xd48 <conv_brk+0xb0>
     d06:	03 c0       	rjmp	.+6      	; 0xd0e <conv_brk+0x76>
     d08:	77 20       	and	r7, r7
     d0a:	09 f4       	brne	.+2      	; 0xd0e <conv_brk+0x76>
     d0c:	6a c0       	rjmp	.+212    	; 0xde2 <conv_brk+0x14a>
     d0e:	45 2d       	mov	r20, r5
     d10:	46 95       	lsr	r20
     d12:	46 95       	lsr	r20
     d14:	46 95       	lsr	r20
     d16:	d6 01       	movw	r26, r12
     d18:	a4 0f       	add	r26, r20
     d1a:	b1 1d       	adc	r27, r1
     d1c:	45 2d       	mov	r20, r5
     d1e:	47 70       	andi	r20, 0x07	; 7
     d20:	8b 01       	movw	r16, r22
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <conv_brk+0x90>
     d24:	00 0f       	add	r16, r16
     d26:	11 1f       	adc	r17, r17
     d28:	4a 95       	dec	r20
     d2a:	e2 f7       	brpl	.-8      	; 0xd24 <conv_brk+0x8c>
     d2c:	a8 01       	movw	r20, r16
     d2e:	5c 91       	ld	r21, X
     d30:	45 2b       	or	r20, r21
     d32:	4c 93       	st	X, r20
     d34:	65 14       	cp	r6, r5
     d36:	59 f0       	breq	.+22     	; 0xd4e <conv_brk+0xb6>
     d38:	56 14       	cp	r5, r6
     d3a:	10 f4       	brcc	.+4      	; 0xd40 <conv_brk+0xa8>
     d3c:	53 94       	inc	r5
     d3e:	e7 cf       	rjmp	.-50     	; 0xd0e <conv_brk+0x76>
     d40:	5a 94       	dec	r5
     d42:	e5 cf       	rjmp	.-54     	; 0xd0e <conv_brk+0x76>
     d44:	31 e0       	ldi	r19, 0x01	; 1
     d46:	04 c0       	rjmp	.+8      	; 0xd50 <conv_brk+0xb8>
     d48:	77 24       	eor	r7, r7
     d4a:	73 94       	inc	r7
     d4c:	01 c0       	rjmp	.+2      	; 0xd50 <conv_brk+0xb8>
     d4e:	71 2c       	mov	r7, r1
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	bf cf       	rjmp	.-130    	; 0xcd2 <conv_brk+0x3a>
     d54:	77 20       	and	r7, r7
     d56:	19 f0       	breq	.+6      	; 0xd5e <conv_brk+0xc6>
     d58:	8e 81       	ldd	r24, Y+6	; 0x06
     d5a:	80 62       	ori	r24, 0x20	; 32
     d5c:	8e 83       	std	Y+6, r24	; 0x06
     d5e:	31 11       	cpse	r19, r1
     d60:	03 c0       	rjmp	.+6      	; 0xd68 <conv_brk+0xd0>
     d62:	88 24       	eor	r8, r8
     d64:	83 94       	inc	r8
     d66:	17 c0       	rjmp	.+46     	; 0xd96 <conv_brk+0xfe>
     d68:	f6 01       	movw	r30, r12
     d6a:	9e 01       	movw	r18, r28
     d6c:	2f 5d       	subi	r18, 0xDF	; 223
     d6e:	3f 4f       	sbci	r19, 0xFF	; 255
     d70:	80 81       	ld	r24, Z
     d72:	80 95       	com	r24
     d74:	81 93       	st	Z+, r24
     d76:	2e 17       	cp	r18, r30
     d78:	3f 07       	cpc	r19, r31
     d7a:	d1 f7       	brne	.-12     	; 0xd70 <conv_brk+0xd8>
     d7c:	f2 cf       	rjmp	.-28     	; 0xd62 <conv_brk+0xca>
     d7e:	e1 14       	cp	r14, r1
     d80:	f1 04       	cpc	r15, r1
     d82:	29 f0       	breq	.+10     	; 0xd8e <conv_brk+0xf6>
     d84:	d7 01       	movw	r26, r14
     d86:	8c 93       	st	X, r24
     d88:	f7 01       	movw	r30, r14
     d8a:	31 96       	adiw	r30, 0x01	; 1
     d8c:	7f 01       	movw	r14, r30
     d8e:	9a 94       	dec	r9
     d90:	81 2c       	mov	r8, r1
     d92:	99 20       	and	r9, r9
     d94:	f9 f0       	breq	.+62     	; 0xdd4 <conv_brk+0x13c>
     d96:	c5 01       	movw	r24, r10
     d98:	0e 94 45 08 	call	0x108a	; 0x108a <fgetc>
     d9c:	97 fd       	sbrc	r25, 7
     d9e:	18 c0       	rjmp	.+48     	; 0xdd0 <conv_brk+0x138>
     da0:	fc 01       	movw	r30, r24
     da2:	ff 27       	eor	r31, r31
     da4:	23 e0       	ldi	r18, 0x03	; 3
     da6:	f5 95       	asr	r31
     da8:	e7 95       	ror	r30
     daa:	2a 95       	dec	r18
     dac:	e1 f7       	brne	.-8      	; 0xda6 <conv_brk+0x10e>
     dae:	ec 0d       	add	r30, r12
     db0:	fd 1d       	adc	r31, r13
     db2:	20 81       	ld	r18, Z
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	ac 01       	movw	r20, r24
     db8:	47 70       	andi	r20, 0x07	; 7
     dba:	55 27       	eor	r21, r21
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <conv_brk+0x12a>
     dbe:	35 95       	asr	r19
     dc0:	27 95       	ror	r18
     dc2:	4a 95       	dec	r20
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <conv_brk+0x126>
     dc6:	20 fd       	sbrc	r18, 0
     dc8:	da cf       	rjmp	.-76     	; 0xd7e <conv_brk+0xe6>
     dca:	b5 01       	movw	r22, r10
     dcc:	0e 94 bf 08 	call	0x117e	; 0x117e <ungetc>
     dd0:	81 10       	cpse	r8, r1
     dd2:	87 cf       	rjmp	.-242    	; 0xce2 <conv_brk+0x4a>
     dd4:	e1 14       	cp	r14, r1
     dd6:	f1 04       	cpc	r15, r1
     dd8:	11 f0       	breq	.+4      	; 0xdde <conv_brk+0x146>
     dda:	d7 01       	movw	r26, r14
     ddc:	1c 92       	st	X, r1
     dde:	c8 01       	movw	r24, r16
     de0:	15 c0       	rjmp	.+42     	; 0xe0c <conv_brk+0x174>
     de2:	42 2f       	mov	r20, r18
     de4:	46 95       	lsr	r20
     de6:	46 95       	lsr	r20
     de8:	46 95       	lsr	r20
     dea:	d6 01       	movw	r26, r12
     dec:	a4 0f       	add	r26, r20
     dee:	b1 1d       	adc	r27, r1
     df0:	42 2f       	mov	r20, r18
     df2:	47 70       	andi	r20, 0x07	; 7
     df4:	8b 01       	movw	r16, r22
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <conv_brk+0x164>
     df8:	00 0f       	add	r16, r16
     dfa:	11 1f       	adc	r17, r17
     dfc:	4a 95       	dec	r20
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <conv_brk+0x160>
     e00:	a8 01       	movw	r20, r16
     e02:	5c 91       	ld	r21, X
     e04:	45 2b       	or	r20, r21
     e06:	4c 93       	st	X, r20
     e08:	62 2e       	mov	r6, r18
     e0a:	a2 cf       	rjmp	.-188    	; 0xd50 <conv_brk+0xb8>
     e0c:	a0 96       	adiw	r28, 0x20	; 32
     e0e:	ef e0       	ldi	r30, 0x0F	; 15
     e10:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__epilogue_restores__+0x6>

00000e14 <vfscanf>:
     e14:	a0 e0       	ldi	r26, 0x00	; 0
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e0 e1       	ldi	r30, 0x10	; 16
     e1a:	f7 e0       	ldi	r31, 0x07	; 7
     e1c:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__prologue_saves__+0x6>
     e20:	6c 01       	movw	r12, r24
     e22:	eb 01       	movw	r28, r22
     e24:	5a 01       	movw	r10, r20
     e26:	fc 01       	movw	r30, r24
     e28:	17 82       	std	Z+7, r1	; 0x07
     e2a:	16 82       	std	Z+6, r1	; 0x06
     e2c:	51 2c       	mov	r5, r1
     e2e:	f6 01       	movw	r30, r12
     e30:	e3 80       	ldd	r14, Z+3	; 0x03
     e32:	fe 01       	movw	r30, r28
     e34:	e3 fc       	sbrc	r14, 3
     e36:	85 91       	lpm	r24, Z+
     e38:	e3 fe       	sbrs	r14, 3
     e3a:	81 91       	ld	r24, Z+
     e3c:	18 2f       	mov	r17, r24
     e3e:	ef 01       	movw	r28, r30
     e40:	88 23       	and	r24, r24
     e42:	09 f4       	brne	.+2      	; 0xe46 <vfscanf+0x32>
     e44:	ee c0       	rjmp	.+476    	; 0x1022 <vfscanf+0x20e>
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 1b 08 	call	0x1036	; 0x1036 <isspace>
     e4c:	89 2b       	or	r24, r25
     e4e:	21 f0       	breq	.+8      	; 0xe58 <vfscanf+0x44>
     e50:	c6 01       	movw	r24, r12
     e52:	0e 94 a1 05 	call	0xb42	; 0xb42 <skip_spaces>
     e56:	eb cf       	rjmp	.-42     	; 0xe2e <vfscanf+0x1a>
     e58:	15 32       	cpi	r17, 0x25	; 37
     e5a:	41 f4       	brne	.+16     	; 0xe6c <vfscanf+0x58>
     e5c:	fe 01       	movw	r30, r28
     e5e:	e3 fc       	sbrc	r14, 3
     e60:	15 91       	lpm	r17, Z+
     e62:	e3 fe       	sbrs	r14, 3
     e64:	11 91       	ld	r17, Z+
     e66:	ef 01       	movw	r28, r30
     e68:	15 32       	cpi	r17, 0x25	; 37
     e6a:	81 f4       	brne	.+32     	; 0xe8c <vfscanf+0x78>
     e6c:	c6 01       	movw	r24, r12
     e6e:	0e 94 45 08 	call	0x108a	; 0x108a <fgetc>
     e72:	97 fd       	sbrc	r25, 7
     e74:	d4 c0       	rjmp	.+424    	; 0x101e <vfscanf+0x20a>
     e76:	41 2f       	mov	r20, r17
     e78:	50 e0       	ldi	r21, 0x00	; 0
     e7a:	9c 01       	movw	r18, r24
     e7c:	33 27       	eor	r19, r19
     e7e:	24 17       	cp	r18, r20
     e80:	35 07       	cpc	r19, r21
     e82:	a9 f2       	breq	.-86     	; 0xe2e <vfscanf+0x1a>
     e84:	b6 01       	movw	r22, r12
     e86:	0e 94 bf 08 	call	0x117e	; 0x117e <ungetc>
     e8a:	cb c0       	rjmp	.+406    	; 0x1022 <vfscanf+0x20e>
     e8c:	1a 32       	cpi	r17, 0x2A	; 42
     e8e:	39 f4       	brne	.+14     	; 0xe9e <vfscanf+0x8a>
     e90:	e3 fc       	sbrc	r14, 3
     e92:	15 91       	lpm	r17, Z+
     e94:	e3 fe       	sbrs	r14, 3
     e96:	11 91       	ld	r17, Z+
     e98:	ef 01       	movw	r28, r30
     e9a:	01 e0       	ldi	r16, 0x01	; 1
     e9c:	01 c0       	rjmp	.+2      	; 0xea0 <vfscanf+0x8c>
     e9e:	00 e0       	ldi	r16, 0x00	; 0
     ea0:	f1 2c       	mov	r15, r1
     ea2:	20 ed       	ldi	r18, 0xD0	; 208
     ea4:	21 0f       	add	r18, r17
     ea6:	2a 30       	cpi	r18, 0x0A	; 10
     ea8:	80 f4       	brcc	.+32     	; 0xeca <vfscanf+0xb6>
     eaa:	02 60       	ori	r16, 0x02	; 2
     eac:	6f 2d       	mov	r22, r15
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	40 e2       	ldi	r20, 0x20	; 32
     eb6:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <mulacc>
     eba:	f6 2e       	mov	r15, r22
     ebc:	fe 01       	movw	r30, r28
     ebe:	e3 fc       	sbrc	r14, 3
     ec0:	15 91       	lpm	r17, Z+
     ec2:	e3 fe       	sbrs	r14, 3
     ec4:	11 91       	ld	r17, Z+
     ec6:	ef 01       	movw	r28, r30
     ec8:	ec cf       	rjmp	.-40     	; 0xea2 <vfscanf+0x8e>
     eca:	01 ff       	sbrs	r16, 1
     ecc:	03 c0       	rjmp	.+6      	; 0xed4 <vfscanf+0xc0>
     ece:	f1 10       	cpse	r15, r1
     ed0:	03 c0       	rjmp	.+6      	; 0xed8 <vfscanf+0xc4>
     ed2:	a7 c0       	rjmp	.+334    	; 0x1022 <vfscanf+0x20e>
     ed4:	ff 24       	eor	r15, r15
     ed6:	fa 94       	dec	r15
     ed8:	18 36       	cpi	r17, 0x68	; 104
     eda:	19 f0       	breq	.+6      	; 0xee2 <vfscanf+0xce>
     edc:	1c 36       	cpi	r17, 0x6C	; 108
     ede:	51 f0       	breq	.+20     	; 0xef4 <vfscanf+0xe0>
     ee0:	10 c0       	rjmp	.+32     	; 0xf02 <vfscanf+0xee>
     ee2:	fe 01       	movw	r30, r28
     ee4:	e3 fc       	sbrc	r14, 3
     ee6:	15 91       	lpm	r17, Z+
     ee8:	e3 fe       	sbrs	r14, 3
     eea:	11 91       	ld	r17, Z+
     eec:	ef 01       	movw	r28, r30
     eee:	18 36       	cpi	r17, 0x68	; 104
     ef0:	41 f4       	brne	.+16     	; 0xf02 <vfscanf+0xee>
     ef2:	08 60       	ori	r16, 0x08	; 8
     ef4:	04 60       	ori	r16, 0x04	; 4
     ef6:	fe 01       	movw	r30, r28
     ef8:	e3 fc       	sbrc	r14, 3
     efa:	15 91       	lpm	r17, Z+
     efc:	e3 fe       	sbrs	r14, 3
     efe:	11 91       	ld	r17, Z+
     f00:	ef 01       	movw	r28, r30
     f02:	11 23       	and	r17, r17
     f04:	09 f4       	brne	.+2      	; 0xf08 <vfscanf+0xf4>
     f06:	8d c0       	rjmp	.+282    	; 0x1022 <vfscanf+0x20e>
     f08:	61 2f       	mov	r22, r17
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	88 e6       	ldi	r24, 0x68	; 104
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 24 08 	call	0x1048	; 0x1048 <strchr_P>
     f14:	89 2b       	or	r24, r25
     f16:	09 f4       	brne	.+2      	; 0xf1a <vfscanf+0x106>
     f18:	84 c0       	rjmp	.+264    	; 0x1022 <vfscanf+0x20e>
     f1a:	00 fd       	sbrc	r16, 0
     f1c:	07 c0       	rjmp	.+14     	; 0xf2c <vfscanf+0x118>
     f1e:	f5 01       	movw	r30, r10
     f20:	80 80       	ld	r8, Z
     f22:	91 80       	ldd	r9, Z+1	; 0x01
     f24:	c5 01       	movw	r24, r10
     f26:	02 96       	adiw	r24, 0x02	; 2
     f28:	5c 01       	movw	r10, r24
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <vfscanf+0x11c>
     f2c:	81 2c       	mov	r8, r1
     f2e:	91 2c       	mov	r9, r1
     f30:	1e 36       	cpi	r17, 0x6E	; 110
     f32:	51 f4       	brne	.+20     	; 0xf48 <vfscanf+0x134>
     f34:	f6 01       	movw	r30, r12
     f36:	46 81       	ldd	r20, Z+6	; 0x06
     f38:	57 81       	ldd	r21, Z+7	; 0x07
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	20 2f       	mov	r18, r16
     f40:	c4 01       	movw	r24, r8
     f42:	0e 94 6e 05 	call	0xadc	; 0xadc <putval>
     f46:	73 cf       	rjmp	.-282    	; 0xe2e <vfscanf+0x1a>
     f48:	13 36       	cpi	r17, 0x63	; 99
     f4a:	a9 f4       	brne	.+42     	; 0xf76 <vfscanf+0x162>
     f4c:	01 fd       	sbrc	r16, 1
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <vfscanf+0x140>
     f50:	ff 24       	eor	r15, r15
     f52:	f3 94       	inc	r15
     f54:	c6 01       	movw	r24, r12
     f56:	0e 94 45 08 	call	0x108a	; 0x108a <fgetc>
     f5a:	97 fd       	sbrc	r25, 7
     f5c:	60 c0       	rjmp	.+192    	; 0x101e <vfscanf+0x20a>
     f5e:	81 14       	cp	r8, r1
     f60:	91 04       	cpc	r9, r1
     f62:	29 f0       	breq	.+10     	; 0xf6e <vfscanf+0x15a>
     f64:	f4 01       	movw	r30, r8
     f66:	80 83       	st	Z, r24
     f68:	c4 01       	movw	r24, r8
     f6a:	01 96       	adiw	r24, 0x01	; 1
     f6c:	4c 01       	movw	r8, r24
     f6e:	fa 94       	dec	r15
     f70:	f1 10       	cpse	r15, r1
     f72:	f0 cf       	rjmp	.-32     	; 0xf54 <vfscanf+0x140>
     f74:	50 c0       	rjmp	.+160    	; 0x1016 <vfscanf+0x202>
     f76:	1b 35       	cpi	r17, 0x5B	; 91
     f78:	59 f4       	brne	.+22     	; 0xf90 <vfscanf+0x17c>
     f7a:	9e 01       	movw	r18, r28
     f7c:	a4 01       	movw	r20, r8
     f7e:	6f 2d       	mov	r22, r15
     f80:	c6 01       	movw	r24, r12
     f82:	0e 94 4c 06 	call	0xc98	; 0xc98 <conv_brk>
     f86:	ec 01       	movw	r28, r24
     f88:	89 2b       	or	r24, r25
     f8a:	09 f0       	breq	.+2      	; 0xf8e <vfscanf+0x17a>
     f8c:	44 c0       	rjmp	.+136    	; 0x1016 <vfscanf+0x202>
     f8e:	3e c0       	rjmp	.+124    	; 0x100c <vfscanf+0x1f8>
     f90:	c6 01       	movw	r24, r12
     f92:	0e 94 a1 05 	call	0xb42	; 0xb42 <skip_spaces>
     f96:	97 fd       	sbrc	r25, 7
     f98:	42 c0       	rjmp	.+132    	; 0x101e <vfscanf+0x20a>
     f9a:	1f 36       	cpi	r17, 0x6F	; 111
     f9c:	61 f1       	breq	.+88     	; 0xff6 <vfscanf+0x1e2>
     f9e:	28 f4       	brcc	.+10     	; 0xfaa <vfscanf+0x196>
     fa0:	14 36       	cpi	r17, 0x64	; 100
     fa2:	39 f1       	breq	.+78     	; 0xff2 <vfscanf+0x1de>
     fa4:	19 36       	cpi	r17, 0x69	; 105
     fa6:	51 f1       	breq	.+84     	; 0xffc <vfscanf+0x1e8>
     fa8:	28 c0       	rjmp	.+80     	; 0xffa <vfscanf+0x1e6>
     faa:	13 37       	cpi	r17, 0x73	; 115
     fac:	71 f0       	breq	.+28     	; 0xfca <vfscanf+0x1b6>
     fae:	15 37       	cpi	r17, 0x75	; 117
     fb0:	01 f1       	breq	.+64     	; 0xff2 <vfscanf+0x1de>
     fb2:	23 c0       	rjmp	.+70     	; 0xffa <vfscanf+0x1e6>
     fb4:	81 14       	cp	r8, r1
     fb6:	91 04       	cpc	r9, r1
     fb8:	29 f0       	breq	.+10     	; 0xfc4 <vfscanf+0x1b0>
     fba:	f4 01       	movw	r30, r8
     fbc:	60 82       	st	Z, r6
     fbe:	c4 01       	movw	r24, r8
     fc0:	01 96       	adiw	r24, 0x01	; 1
     fc2:	4c 01       	movw	r8, r24
     fc4:	fa 94       	dec	r15
     fc6:	ff 20       	and	r15, r15
     fc8:	71 f0       	breq	.+28     	; 0xfe6 <vfscanf+0x1d2>
     fca:	c6 01       	movw	r24, r12
     fcc:	0e 94 45 08 	call	0x108a	; 0x108a <fgetc>
     fd0:	3c 01       	movw	r6, r24
     fd2:	97 fd       	sbrc	r25, 7
     fd4:	08 c0       	rjmp	.+16     	; 0xfe6 <vfscanf+0x1d2>
     fd6:	0e 94 1b 08 	call	0x1036	; 0x1036 <isspace>
     fda:	89 2b       	or	r24, r25
     fdc:	59 f3       	breq	.-42     	; 0xfb4 <vfscanf+0x1a0>
     fde:	b6 01       	movw	r22, r12
     fe0:	c3 01       	movw	r24, r6
     fe2:	0e 94 bf 08 	call	0x117e	; 0x117e <ungetc>
     fe6:	81 14       	cp	r8, r1
     fe8:	91 04       	cpc	r9, r1
     fea:	a9 f0       	breq	.+42     	; 0x1016 <vfscanf+0x202>
     fec:	f4 01       	movw	r30, r8
     fee:	10 82       	st	Z, r1
     ff0:	12 c0       	rjmp	.+36     	; 0x1016 <vfscanf+0x202>
     ff2:	00 62       	ori	r16, 0x20	; 32
     ff4:	03 c0       	rjmp	.+6      	; 0xffc <vfscanf+0x1e8>
     ff6:	00 61       	ori	r16, 0x10	; 16
     ff8:	01 c0       	rjmp	.+2      	; 0xffc <vfscanf+0x1e8>
     ffa:	00 64       	ori	r16, 0x40	; 64
     ffc:	20 2f       	mov	r18, r16
     ffe:	a4 01       	movw	r20, r8
    1000:	6f 2d       	mov	r22, r15
    1002:	c6 01       	movw	r24, r12
    1004:	0e 94 ba 05 	call	0xb74	; 0xb74 <conv_int>
    1008:	81 11       	cpse	r24, r1
    100a:	05 c0       	rjmp	.+10     	; 0x1016 <vfscanf+0x202>
    100c:	f6 01       	movw	r30, r12
    100e:	83 81       	ldd	r24, Z+3	; 0x03
    1010:	80 73       	andi	r24, 0x30	; 48
    1012:	29 f4       	brne	.+10     	; 0x101e <vfscanf+0x20a>
    1014:	06 c0       	rjmp	.+12     	; 0x1022 <vfscanf+0x20e>
    1016:	00 fd       	sbrc	r16, 0
    1018:	0a cf       	rjmp	.-492    	; 0xe2e <vfscanf+0x1a>
    101a:	53 94       	inc	r5
    101c:	08 cf       	rjmp	.-496    	; 0xe2e <vfscanf+0x1a>
    101e:	55 20       	and	r5, r5
    1020:	19 f0       	breq	.+6      	; 0x1028 <vfscanf+0x214>
    1022:	85 2d       	mov	r24, r5
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	02 c0       	rjmp	.+4      	; 0x102c <vfscanf+0x218>
    1028:	8f ef       	ldi	r24, 0xFF	; 255
    102a:	9f ef       	ldi	r25, 0xFF	; 255
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	ef e0       	ldi	r30, 0x0F	; 15
    1032:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__epilogue_restores__+0x6>

00001036 <isspace>:
    1036:	91 11       	cpse	r25, r1
    1038:	0c 94 36 09 	jmp	0x126c	; 0x126c <__ctype_isfalse>
    103c:	80 32       	cpi	r24, 0x20	; 32
    103e:	19 f0       	breq	.+6      	; 0x1046 <isspace+0x10>
    1040:	89 50       	subi	r24, 0x09	; 9
    1042:	85 50       	subi	r24, 0x05	; 5
    1044:	c8 f7       	brcc	.-14     	; 0x1038 <isspace+0x2>
    1046:	08 95       	ret

00001048 <strchr_P>:
    1048:	fc 01       	movw	r30, r24
    104a:	05 90       	lpm	r0, Z+
    104c:	06 16       	cp	r0, r22
    104e:	21 f0       	breq	.+8      	; 0x1058 <strchr_P+0x10>
    1050:	00 20       	and	r0, r0
    1052:	d9 f7       	brne	.-10     	; 0x104a <strchr_P+0x2>
    1054:	c0 01       	movw	r24, r0
    1056:	08 95       	ret
    1058:	31 97       	sbiw	r30, 0x01	; 1
    105a:	cf 01       	movw	r24, r30
    105c:	08 95       	ret

0000105e <strnlen_P>:
    105e:	fc 01       	movw	r30, r24
    1060:	05 90       	lpm	r0, Z+
    1062:	61 50       	subi	r22, 0x01	; 1
    1064:	70 40       	sbci	r23, 0x00	; 0
    1066:	01 10       	cpse	r0, r1
    1068:	d8 f7       	brcc	.-10     	; 0x1060 <strnlen_P+0x2>
    106a:	80 95       	com	r24
    106c:	90 95       	com	r25
    106e:	8e 0f       	add	r24, r30
    1070:	9f 1f       	adc	r25, r31
    1072:	08 95       	ret

00001074 <strnlen>:
    1074:	fc 01       	movw	r30, r24
    1076:	61 50       	subi	r22, 0x01	; 1
    1078:	70 40       	sbci	r23, 0x00	; 0
    107a:	01 90       	ld	r0, Z+
    107c:	01 10       	cpse	r0, r1
    107e:	d8 f7       	brcc	.-10     	; 0x1076 <strnlen+0x2>
    1080:	80 95       	com	r24
    1082:	90 95       	com	r25
    1084:	8e 0f       	add	r24, r30
    1086:	9f 1f       	adc	r25, r31
    1088:	08 95       	ret

0000108a <fgetc>:
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	ec 01       	movw	r28, r24
    1090:	2b 81       	ldd	r18, Y+3	; 0x03
    1092:	20 ff       	sbrs	r18, 0
    1094:	33 c0       	rjmp	.+102    	; 0x10fc <fgetc+0x72>
    1096:	26 ff       	sbrs	r18, 6
    1098:	0a c0       	rjmp	.+20     	; 0x10ae <fgetc+0x24>
    109a:	2f 7b       	andi	r18, 0xBF	; 191
    109c:	2b 83       	std	Y+3, r18	; 0x03
    109e:	8e 81       	ldd	r24, Y+6	; 0x06
    10a0:	9f 81       	ldd	r25, Y+7	; 0x07
    10a2:	01 96       	adiw	r24, 0x01	; 1
    10a4:	9f 83       	std	Y+7, r25	; 0x07
    10a6:	8e 83       	std	Y+6, r24	; 0x06
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	29 c0       	rjmp	.+82     	; 0x1100 <fgetc+0x76>
    10ae:	22 ff       	sbrs	r18, 2
    10b0:	0f c0       	rjmp	.+30     	; 0x10d0 <fgetc+0x46>
    10b2:	e8 81       	ld	r30, Y
    10b4:	f9 81       	ldd	r31, Y+1	; 0x01
    10b6:	80 81       	ld	r24, Z
    10b8:	08 2e       	mov	r0, r24
    10ba:	00 0c       	add	r0, r0
    10bc:	99 0b       	sbc	r25, r25
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	19 f4       	brne	.+6      	; 0x10c8 <fgetc+0x3e>
    10c2:	20 62       	ori	r18, 0x20	; 32
    10c4:	2b 83       	std	Y+3, r18	; 0x03
    10c6:	1a c0       	rjmp	.+52     	; 0x10fc <fgetc+0x72>
    10c8:	31 96       	adiw	r30, 0x01	; 1
    10ca:	f9 83       	std	Y+1, r31	; 0x01
    10cc:	e8 83       	st	Y, r30
    10ce:	0e c0       	rjmp	.+28     	; 0x10ec <fgetc+0x62>
    10d0:	ea 85       	ldd	r30, Y+10	; 0x0a
    10d2:	fb 85       	ldd	r31, Y+11	; 0x0b
    10d4:	09 95       	icall
    10d6:	97 ff       	sbrs	r25, 7
    10d8:	09 c0       	rjmp	.+18     	; 0x10ec <fgetc+0x62>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	01 96       	adiw	r24, 0x01	; 1
    10de:	11 f0       	breq	.+4      	; 0x10e4 <fgetc+0x5a>
    10e0:	80 e2       	ldi	r24, 0x20	; 32
    10e2:	01 c0       	rjmp	.+2      	; 0x10e6 <fgetc+0x5c>
    10e4:	80 e1       	ldi	r24, 0x10	; 16
    10e6:	82 2b       	or	r24, r18
    10e8:	8b 83       	std	Y+3, r24	; 0x03
    10ea:	08 c0       	rjmp	.+16     	; 0x10fc <fgetc+0x72>
    10ec:	2e 81       	ldd	r18, Y+6	; 0x06
    10ee:	3f 81       	ldd	r19, Y+7	; 0x07
    10f0:	2f 5f       	subi	r18, 0xFF	; 255
    10f2:	3f 4f       	sbci	r19, 0xFF	; 255
    10f4:	3f 83       	std	Y+7, r19	; 0x07
    10f6:	2e 83       	std	Y+6, r18	; 0x06
    10f8:	99 27       	eor	r25, r25
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <fgetc+0x76>
    10fc:	8f ef       	ldi	r24, 0xFF	; 255
    10fe:	9f ef       	ldi	r25, 0xFF	; 255
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	08 95       	ret

00001106 <fputc>:
    1106:	0f 93       	push	r16
    1108:	1f 93       	push	r17
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
    110e:	fb 01       	movw	r30, r22
    1110:	23 81       	ldd	r18, Z+3	; 0x03
    1112:	21 fd       	sbrc	r18, 1
    1114:	03 c0       	rjmp	.+6      	; 0x111c <fputc+0x16>
    1116:	8f ef       	ldi	r24, 0xFF	; 255
    1118:	9f ef       	ldi	r25, 0xFF	; 255
    111a:	2c c0       	rjmp	.+88     	; 0x1174 <fputc+0x6e>
    111c:	22 ff       	sbrs	r18, 2
    111e:	16 c0       	rjmp	.+44     	; 0x114c <fputc+0x46>
    1120:	46 81       	ldd	r20, Z+6	; 0x06
    1122:	57 81       	ldd	r21, Z+7	; 0x07
    1124:	24 81       	ldd	r18, Z+4	; 0x04
    1126:	35 81       	ldd	r19, Z+5	; 0x05
    1128:	42 17       	cp	r20, r18
    112a:	53 07       	cpc	r21, r19
    112c:	44 f4       	brge	.+16     	; 0x113e <fputc+0x38>
    112e:	a0 81       	ld	r26, Z
    1130:	b1 81       	ldd	r27, Z+1	; 0x01
    1132:	9d 01       	movw	r18, r26
    1134:	2f 5f       	subi	r18, 0xFF	; 255
    1136:	3f 4f       	sbci	r19, 0xFF	; 255
    1138:	31 83       	std	Z+1, r19	; 0x01
    113a:	20 83       	st	Z, r18
    113c:	8c 93       	st	X, r24
    113e:	26 81       	ldd	r18, Z+6	; 0x06
    1140:	37 81       	ldd	r19, Z+7	; 0x07
    1142:	2f 5f       	subi	r18, 0xFF	; 255
    1144:	3f 4f       	sbci	r19, 0xFF	; 255
    1146:	37 83       	std	Z+7, r19	; 0x07
    1148:	26 83       	std	Z+6, r18	; 0x06
    114a:	14 c0       	rjmp	.+40     	; 0x1174 <fputc+0x6e>
    114c:	8b 01       	movw	r16, r22
    114e:	ec 01       	movw	r28, r24
    1150:	fb 01       	movw	r30, r22
    1152:	00 84       	ldd	r0, Z+8	; 0x08
    1154:	f1 85       	ldd	r31, Z+9	; 0x09
    1156:	e0 2d       	mov	r30, r0
    1158:	09 95       	icall
    115a:	89 2b       	or	r24, r25
    115c:	e1 f6       	brne	.-72     	; 0x1116 <fputc+0x10>
    115e:	d8 01       	movw	r26, r16
    1160:	16 96       	adiw	r26, 0x06	; 6
    1162:	8d 91       	ld	r24, X+
    1164:	9c 91       	ld	r25, X
    1166:	17 97       	sbiw	r26, 0x07	; 7
    1168:	01 96       	adiw	r24, 0x01	; 1
    116a:	17 96       	adiw	r26, 0x07	; 7
    116c:	9c 93       	st	X, r25
    116e:	8e 93       	st	-X, r24
    1170:	16 97       	sbiw	r26, 0x06	; 6
    1172:	ce 01       	movw	r24, r28
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	08 95       	ret

0000117e <ungetc>:
    117e:	fb 01       	movw	r30, r22
    1180:	23 81       	ldd	r18, Z+3	; 0x03
    1182:	20 ff       	sbrs	r18, 0
    1184:	12 c0       	rjmp	.+36     	; 0x11aa <ungetc+0x2c>
    1186:	26 fd       	sbrc	r18, 6
    1188:	10 c0       	rjmp	.+32     	; 0x11aa <ungetc+0x2c>
    118a:	8f 3f       	cpi	r24, 0xFF	; 255
    118c:	3f ef       	ldi	r19, 0xFF	; 255
    118e:	93 07       	cpc	r25, r19
    1190:	61 f0       	breq	.+24     	; 0x11aa <ungetc+0x2c>
    1192:	82 83       	std	Z+2, r24	; 0x02
    1194:	2f 7d       	andi	r18, 0xDF	; 223
    1196:	20 64       	ori	r18, 0x40	; 64
    1198:	23 83       	std	Z+3, r18	; 0x03
    119a:	26 81       	ldd	r18, Z+6	; 0x06
    119c:	37 81       	ldd	r19, Z+7	; 0x07
    119e:	21 50       	subi	r18, 0x01	; 1
    11a0:	31 09       	sbc	r19, r1
    11a2:	37 83       	std	Z+7, r19	; 0x07
    11a4:	26 83       	std	Z+6, r18	; 0x06
    11a6:	99 27       	eor	r25, r25
    11a8:	08 95       	ret
    11aa:	8f ef       	ldi	r24, 0xFF	; 255
    11ac:	9f ef       	ldi	r25, 0xFF	; 255
    11ae:	08 95       	ret

000011b0 <__ultoa_invert>:
    11b0:	fa 01       	movw	r30, r20
    11b2:	aa 27       	eor	r26, r26
    11b4:	28 30       	cpi	r18, 0x08	; 8
    11b6:	51 f1       	breq	.+84     	; 0x120c <__ultoa_invert+0x5c>
    11b8:	20 31       	cpi	r18, 0x10	; 16
    11ba:	81 f1       	breq	.+96     	; 0x121c <__ultoa_invert+0x6c>
    11bc:	e8 94       	clt
    11be:	6f 93       	push	r22
    11c0:	6e 7f       	andi	r22, 0xFE	; 254
    11c2:	6e 5f       	subi	r22, 0xFE	; 254
    11c4:	7f 4f       	sbci	r23, 0xFF	; 255
    11c6:	8f 4f       	sbci	r24, 0xFF	; 255
    11c8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ca:	af 4f       	sbci	r26, 0xFF	; 255
    11cc:	b1 e0       	ldi	r27, 0x01	; 1
    11ce:	3e d0       	rcall	.+124    	; 0x124c <__ultoa_invert+0x9c>
    11d0:	b4 e0       	ldi	r27, 0x04	; 4
    11d2:	3c d0       	rcall	.+120    	; 0x124c <__ultoa_invert+0x9c>
    11d4:	67 0f       	add	r22, r23
    11d6:	78 1f       	adc	r23, r24
    11d8:	89 1f       	adc	r24, r25
    11da:	9a 1f       	adc	r25, r26
    11dc:	a1 1d       	adc	r26, r1
    11de:	68 0f       	add	r22, r24
    11e0:	79 1f       	adc	r23, r25
    11e2:	8a 1f       	adc	r24, r26
    11e4:	91 1d       	adc	r25, r1
    11e6:	a1 1d       	adc	r26, r1
    11e8:	6a 0f       	add	r22, r26
    11ea:	71 1d       	adc	r23, r1
    11ec:	81 1d       	adc	r24, r1
    11ee:	91 1d       	adc	r25, r1
    11f0:	a1 1d       	adc	r26, r1
    11f2:	20 d0       	rcall	.+64     	; 0x1234 <__ultoa_invert+0x84>
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <__ultoa_invert+0x48>
    11f6:	68 94       	set
    11f8:	3f 91       	pop	r19
    11fa:	2a e0       	ldi	r18, 0x0A	; 10
    11fc:	26 9f       	mul	r18, r22
    11fe:	11 24       	eor	r1, r1
    1200:	30 19       	sub	r19, r0
    1202:	30 5d       	subi	r19, 0xD0	; 208
    1204:	31 93       	st	Z+, r19
    1206:	de f6       	brtc	.-74     	; 0x11be <__ultoa_invert+0xe>
    1208:	cf 01       	movw	r24, r30
    120a:	08 95       	ret
    120c:	46 2f       	mov	r20, r22
    120e:	47 70       	andi	r20, 0x07	; 7
    1210:	40 5d       	subi	r20, 0xD0	; 208
    1212:	41 93       	st	Z+, r20
    1214:	b3 e0       	ldi	r27, 0x03	; 3
    1216:	0f d0       	rcall	.+30     	; 0x1236 <__ultoa_invert+0x86>
    1218:	c9 f7       	brne	.-14     	; 0x120c <__ultoa_invert+0x5c>
    121a:	f6 cf       	rjmp	.-20     	; 0x1208 <__ultoa_invert+0x58>
    121c:	46 2f       	mov	r20, r22
    121e:	4f 70       	andi	r20, 0x0F	; 15
    1220:	40 5d       	subi	r20, 0xD0	; 208
    1222:	4a 33       	cpi	r20, 0x3A	; 58
    1224:	18 f0       	brcs	.+6      	; 0x122c <__ultoa_invert+0x7c>
    1226:	49 5d       	subi	r20, 0xD9	; 217
    1228:	31 fd       	sbrc	r19, 1
    122a:	40 52       	subi	r20, 0x20	; 32
    122c:	41 93       	st	Z+, r20
    122e:	02 d0       	rcall	.+4      	; 0x1234 <__ultoa_invert+0x84>
    1230:	a9 f7       	brne	.-22     	; 0x121c <__ultoa_invert+0x6c>
    1232:	ea cf       	rjmp	.-44     	; 0x1208 <__ultoa_invert+0x58>
    1234:	b4 e0       	ldi	r27, 0x04	; 4
    1236:	a6 95       	lsr	r26
    1238:	97 95       	ror	r25
    123a:	87 95       	ror	r24
    123c:	77 95       	ror	r23
    123e:	67 95       	ror	r22
    1240:	ba 95       	dec	r27
    1242:	c9 f7       	brne	.-14     	; 0x1236 <__ultoa_invert+0x86>
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	61 05       	cpc	r22, r1
    1248:	71 05       	cpc	r23, r1
    124a:	08 95       	ret
    124c:	9b 01       	movw	r18, r22
    124e:	ac 01       	movw	r20, r24
    1250:	0a 2e       	mov	r0, r26
    1252:	06 94       	lsr	r0
    1254:	57 95       	ror	r21
    1256:	47 95       	ror	r20
    1258:	37 95       	ror	r19
    125a:	27 95       	ror	r18
    125c:	ba 95       	dec	r27
    125e:	c9 f7       	brne	.-14     	; 0x1252 <__ultoa_invert+0xa2>
    1260:	62 0f       	add	r22, r18
    1262:	73 1f       	adc	r23, r19
    1264:	84 1f       	adc	r24, r20
    1266:	95 1f       	adc	r25, r21
    1268:	a0 1d       	adc	r26, r0
    126a:	08 95       	ret

0000126c <__ctype_isfalse>:
    126c:	99 27       	eor	r25, r25
    126e:	88 27       	eor	r24, r24

00001270 <__ctype_istrue>:
    1270:	08 95       	ret

00001272 <__prologue_saves__>:
    1272:	2f 92       	push	r2
    1274:	3f 92       	push	r3
    1276:	4f 92       	push	r4
    1278:	5f 92       	push	r5
    127a:	6f 92       	push	r6
    127c:	7f 92       	push	r7
    127e:	8f 92       	push	r8
    1280:	9f 92       	push	r9
    1282:	af 92       	push	r10
    1284:	bf 92       	push	r11
    1286:	cf 92       	push	r12
    1288:	df 92       	push	r13
    128a:	ef 92       	push	r14
    128c:	ff 92       	push	r15
    128e:	0f 93       	push	r16
    1290:	1f 93       	push	r17
    1292:	cf 93       	push	r28
    1294:	df 93       	push	r29
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	ca 1b       	sub	r28, r26
    129c:	db 0b       	sbc	r29, r27
    129e:	0f b6       	in	r0, 0x3f	; 63
    12a0:	f8 94       	cli
    12a2:	de bf       	out	0x3e, r29	; 62
    12a4:	0f be       	out	0x3f, r0	; 63
    12a6:	cd bf       	out	0x3d, r28	; 61
    12a8:	09 94       	ijmp

000012aa <__epilogue_restores__>:
    12aa:	2a 88       	ldd	r2, Y+18	; 0x12
    12ac:	39 88       	ldd	r3, Y+17	; 0x11
    12ae:	48 88       	ldd	r4, Y+16	; 0x10
    12b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    12b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    12b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    12b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    12b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    12ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    12bc:	b9 84       	ldd	r11, Y+9	; 0x09
    12be:	c8 84       	ldd	r12, Y+8	; 0x08
    12c0:	df 80       	ldd	r13, Y+7	; 0x07
    12c2:	ee 80       	ldd	r14, Y+6	; 0x06
    12c4:	fd 80       	ldd	r15, Y+5	; 0x05
    12c6:	0c 81       	ldd	r16, Y+4	; 0x04
    12c8:	1b 81       	ldd	r17, Y+3	; 0x03
    12ca:	aa 81       	ldd	r26, Y+2	; 0x02
    12cc:	b9 81       	ldd	r27, Y+1	; 0x01
    12ce:	ce 0f       	add	r28, r30
    12d0:	d1 1d       	adc	r29, r1
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	ed 01       	movw	r28, r26
    12de:	08 95       	ret

000012e0 <_exit>:
    12e0:	f8 94       	cli

000012e2 <__stop_program>:
    12e2:	ff cf       	rjmp	.-2      	; 0x12e2 <__stop_program>
