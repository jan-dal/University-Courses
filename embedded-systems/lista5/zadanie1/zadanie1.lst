
zadanie1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000015c  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007e  00800100  00800100  000001f0  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d00  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000015d4  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015e8  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00001c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000021be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  000021d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_8>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ae 37       	cpi	r26, 0x7E	; 126
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 90 00 	call	0x120	; 0x120 <main>
  88:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <counter2_init>:


void counter2_init()
{

  TCCR2B = _BV(CS22) | _BV(CS21); // Preskaler 256
  90:	86 e0       	ldi	r24, 0x06	; 6
  92:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
  TCCR2A = _BV(WGM21); // CTC TOP = OCRA
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
  OCR2A = 249; // 16000000/(2*(249+1)*256) = 125 Hz
  9c:	89 ef       	ldi	r24, 0xF9	; 249
  9e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
  a2:	08 95       	ret

000000a4 <counter2_interrupt_init>:

}

void counter2_interrupt_init()
{
  TIMSK2 = _BV(OCIE2B); // Włącz flagę compare match
  a4:	84 e0       	ldi	r24, 0x04	; 4
  a6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
  aa:	08 95       	ret

000000ac <pins_init>:
}

void pins_init()
{
  DDRC = _BV(PC5);
  ac:	80 e2       	ldi	r24, 0x20	; 32
  ae:	87 b9       	out	0x07, r24	; 7
  PORTD = _BV(PD2);
  b0:	84 e0       	ldi	r24, 0x04	; 4
  b2:	8b b9       	out	0x0b, r24	; 11
  b4:	08 95       	ret

000000b6 <__vector_8>:
volatile uint8_t index;
// 125 Razy wywołamy przerwanie w trakcie sekundy
volatile uint8_t flags[125];  

ISR(TIMER2_COMPB_vect)
{
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	8f 93       	push	r24
  c2:	ef 93       	push	r30
  c4:	ff 93       	push	r31
  if(flags[index]){
  c6:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	ef 5f       	subi	r30, 0xFF	; 255
  ce:	fe 4f       	sbci	r31, 0xFE	; 254
  d0:	80 81       	ld	r24, Z
  d2:	88 23       	and	r24, r24
  d4:	19 f1       	breq	.+70     	; 0x11c <__vector_8+0x66>
    PORTC |= _BV(PC5);
  d6:	45 9a       	sbi	0x08, 5	; 8
    flags[index] = 0;
  d8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	ef 5f       	subi	r30, 0xFF	; 255
  e0:	fe 4f       	sbci	r31, 0xFE	; 254
  e2:	10 82       	st	Z, r1
  } else {
    PORTC &= ~_BV(PC5);
  }
  if(bit_is_clear(PIND, PD2)){
  e4:	4a 99       	sbic	0x09, 2	; 9
  e6:	07 c0       	rjmp	.+14     	; 0xf6 <__vector_8+0x40>
    flags[index] = 1;
  e8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	ef 5f       	subi	r30, 0xFF	; 255
  f0:	fe 4f       	sbci	r31, 0xFE	; 254
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	80 83       	st	Z, r24
  }
  index++;
  f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fa:	8f 5f       	subi	r24, 0xFF	; 255
  fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  if(index >= 125){
 100:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 104:	8d 37       	cpi	r24, 0x7D	; 125
 106:	10 f0       	brcs	.+4      	; 0x10c <__vector_8+0x56>
    index = 0;
 108:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
  }
}
 10c:	ff 91       	pop	r31
 10e:	ef 91       	pop	r30
 110:	8f 91       	pop	r24
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti
{
  if(flags[index]){
    PORTC |= _BV(PC5);
    flags[index] = 0;
  } else {
    PORTC &= ~_BV(PC5);
 11c:	45 98       	cbi	0x08, 5	; 8
 11e:	e2 cf       	rjmp	.-60     	; 0xe4 <__vector_8+0x2e>

00000120 <main>:


void counter2_init()
{

  TCCR2B = _BV(CS22) | _BV(CS21); // Preskaler 256
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
  TCCR2A = _BV(WGM21); // CTC TOP = OCRA
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
  OCR2A = 249; // 16000000/(2*(249+1)*256) = 125 Hz
 12c:	89 ef       	ldi	r24, 0xF9	; 249
 12e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>

}

void counter2_interrupt_init()
{
  TIMSK2 = _BV(OCIE2B); // Włącz flagę compare match
 132:	84 e0       	ldi	r24, 0x04	; 4
 134:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
}

void pins_init()
{
  DDRC = _BV(PC5);
 138:	90 e2       	ldi	r25, 0x20	; 32
 13a:	97 b9       	out	0x07, r25	; 7
  PORTD = _BV(PD2);
 13c:	8b b9       	out	0x0b, r24	; 11
int main()
{
  counter2_init();
  counter2_interrupt_init();
  pins_init();
  sei(); // Włącz przerwania globalnie
 13e:	78 94       	sei

  while(1){
    // W trybie power save licznik 2 nadal pracuje 
    // poza tym tryb jest identyczny do power down
    set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 140:	83 b7       	in	r24, 0x33	; 51
 142:	81 7f       	andi	r24, 0xF1	; 241
 144:	86 60       	ori	r24, 0x06	; 6
 146:	83 bf       	out	0x33, r24	; 51
    sleep_mode();  
 148:	83 b7       	in	r24, 0x33	; 51
 14a:	81 60       	ori	r24, 0x01	; 1
 14c:	83 bf       	out	0x33, r24	; 51
 14e:	88 95       	sleep
 150:	83 b7       	in	r24, 0x33	; 51
 152:	8e 7f       	andi	r24, 0xFE	; 254
 154:	83 bf       	out	0x33, r24	; 51
 156:	f4 cf       	rjmp	.-24     	; 0x140 <main+0x20>

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
