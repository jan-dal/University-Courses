
zadanie1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000116  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000116  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000648  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c88  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001470  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00002046  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00002060  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  78:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <adc_init>:
#include <util/delay.h>

// inicjalizacja ADC
void adc_init()
{
  ADMUX   = _BV(REFS0); // referencja AVcc, wejście ADC0
  80:	80 e4       	ldi	r24, 0x40	; 64
  82:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  DIDR0   = _BV(ADC0D); // wyłącz wejście cyfrowe na ADC0
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  // częstotliwość zegara ADC 125 kHz (16 MHz / 128)
  ADCSRA  = _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2); // preskaler 128
  8c:	ea e7       	ldi	r30, 0x7A	; 122
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	87 e0       	ldi	r24, 0x07	; 7
  92:	80 83       	st	Z, r24
  ADCSRA |= _BV(ADEN); // włącz ADC
  94:	80 81       	ld	r24, Z
  96:	80 68       	ori	r24, 0x80	; 128
  98:	80 83       	st	Z, r24
  9a:	08 95       	ret

0000009c <timer1_init>:
  // WGM1  = 1110 -- fast PWM top=ICR1
  // CS1   = 010  -- prescaler 1024
  // ICR1  = 15624
  // częstotliwość 16e6/(8*(1+1999)) = 1 kHz
  // wzór: datasheet 20.12.3 str. 164
  ICR1 = 1999;
  9c:	8f ec       	ldi	r24, 0xCF	; 207
  9e:	97 e0       	ldi	r25, 0x07	; 7
  a0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  a4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  TCCR1A = _BV(COM1A1) | _BV(WGM11);
  a8:	82 e8       	ldi	r24, 0x82	; 130
  aa:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  TCCR1B = _BV(WGM12) | _BV(WGM13) | _BV(CS11);
  ae:	8a e1       	ldi	r24, 0x1A	; 26
  b0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  // ustaw pin OC1A (PB1) jako wyjście
  DDRB |= _BV(PB1);
  b4:	21 9a       	sbi	0x04, 1	; 4
  b6:	08 95       	ret

000000b8 <main>:
#include <util/delay.h>

// inicjalizacja ADC
void adc_init()
{
  ADMUX   = _BV(REFS0); // referencja AVcc, wejście ADC0
  b8:	80 e4       	ldi	r24, 0x40	; 64
  ba:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  DIDR0   = _BV(ADC0D); // wyłącz wejście cyfrowe na ADC0
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  // częstotliwość zegara ADC 125 kHz (16 MHz / 128)
  ADCSRA  = _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2); // preskaler 128
  c4:	87 e0       	ldi	r24, 0x07	; 7
  c6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  ADCSRA |= _BV(ADEN); // włącz ADC
  ca:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  ce:	80 68       	ori	r24, 0x80	; 128
  d0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  // WGM1  = 1110 -- fast PWM top=ICR1
  // CS1   = 010  -- prescaler 1024
  // ICR1  = 15624
  // częstotliwość 16e6/(8*(1+1999)) = 1 kHz
  // wzór: datasheet 20.12.3 str. 164
  ICR1 = 1999;
  d4:	8f ec       	ldi	r24, 0xCF	; 207
  d6:	97 e0       	ldi	r25, 0x07	; 7
  d8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  dc:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  TCCR1A = _BV(COM1A1) | _BV(WGM11);
  e0:	82 e8       	ldi	r24, 0x82	; 130
  e2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  TCCR1B = _BV(WGM12) | _BV(WGM13) | _BV(CS11);
  e6:	8a e1       	ldi	r24, 0x1A	; 26
  e8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  // ustaw pin OC1A (PB1) jako wyjście
  DDRB |= _BV(PB1);
  ec:	21 9a       	sbi	0x04, 1	; 4
  adc_init();
  // zainicjalizuj licznik
  timer1_init();
  
  while(1) {
    ADCSRA |= _BV(ADSC); // wykonaj konwersję
  ee:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    loop_until_bit_is_clear(ADCSRA, ADSC); // czekaj na wykonanie pomiaru
  f8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  fc:	86 fd       	sbrc	r24, 6
  fe:	fc cf       	rjmp	.-8      	; 0xf8 <main+0x40>
    uint16_t v = ADC; // weź zmierzoną wartość (0..1023)
 100:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 104:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    OCR1A = v;
 108:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 10c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  }
 110:	ee cf       	rjmp	.-36     	; 0xee <main+0x36>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
