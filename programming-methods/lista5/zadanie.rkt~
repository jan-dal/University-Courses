#lang racket

(define leaf 'leaf)                ; konstruktor liścia

(define (leaf? t)                  ; predykat
  (eq? t 'leaf))

(define (node v l r)               ; konstruktor węzła
  (list 'node v l r))

(define (node? t)                  ; predykat
  (and (list? t)
       (= (length t) 4)
       (eq? (first t) 'node)))

(define (node-val t)               ; selektory
  (second t))

(define (node-left t)
  (third t))

(define (node-right t)
  (fourth t))

(define (tree? t)                  ; predykat definiujący
  (or (leaf? t)                    ; nasz główny typ danych!
      (and (node? t)
           (tree? (node-left  t))
           (tree? (node-right t)))))

(define (tree-sum t)
  (if (leaf? t)
      0
      (+ (node-val t)
         (tree-sum (node-left  t))
         (tree-sum (node-right t)))))
(define (flip t)
  (if (leaf? t)
      leaf
      (node (node-val t)
            (flip (node-right t))
            (flip (node-left t)))))

(define big-tree
  (node 1 (node 2 (node 4 leaf leaf)
                  (node 5 leaf leaf))
          (node 3 (node 6 leaf leaf)
                  (node 7 leaf leaf))))











